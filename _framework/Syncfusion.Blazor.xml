<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Internal.AnimationSettings">
            <summary>
            Animation properties for performing animation transition.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.AnimationSettings.Duration">
            <summary>
            Gets or sets the animation duration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.AnimationSettings.Name">
            <summary>
            Gets or sets the animation name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.AnimationSettings.TimingFunction">
            <summary>
            Gets or sets the animation timing function.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.AnimationSettings.Delay">
            <summary>
            Gets or sets the animation delay.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RippleSettings">
            <summary>
            Ripple settings for performing the ripple effect.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.Selector">
            <summary>
            Gets or sets the ripple selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.Ignore">
            <summary>
            Gets or sets the ripple ignore.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.RippleFlag">
            <summary>
            Gets or sets the ripple flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.IsCenterRipple">
            <summary>
            Gets or sets the boolean value whether ripple center enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.Duration">
            <summary>
            Gets or sets the ripple duration.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.BlazorIdJsonConverter">
            <summary>
            Custom JSON serialization type converter for the Template DataHashTable properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Internal.BlazorIdJsonConverter"/> class.
            </summary>
            <param name="values">Dictionary values for json convert.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.HashData">
            <summary>
            Gets or sets hash data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>true if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.NonFlagStringEnumConverter">
            <summary>
            Used to convert the enum integer values into a string
            Also, ignores the string conversion of number enum.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.NonFlagStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>true if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.PackageNameAttribute">
            <summary>
            Used to get the package name for specific component script loading.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.PackageNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Internal.PackageNameAttribute"/> class.
            </summary>
            <param name="packageName">package name.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.PackageNameAttribute.PackageName">
            <summary>
            Gets the package name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.FontInfo">
            <summary>
            Circular, Linear Gauges and TreeMap common property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.FontInfo.Average">
            <summary>
            Gets or sets average.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.FontInfo.Chars">
            <summary>
            Gets or sets chars.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ScriptModules">
            <summary>
            Script modules for the blazor components.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.AccumulationChart">
            <summary>
            AccumulationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Base">
            <summary>
            Base.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Calendar">
            <summary>
            Calendar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DatePicker">
            <summary>
            DatePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DateRangePicker">
            <summary>
            DateRangePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DateTimePicker">
            <summary>
            DateTimePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Timepicker">
            <summary>
            Timepicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Chart">
            <summary>
            Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Compression">
            <summary>
            Compression.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Drawings">
            <summary>
            Drawings.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DropDownBase">
            <summary>
            DropDownBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DropDownList">
            <summary>
            DropDownList.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.AutoComplete">
            <summary>
            AutoComplete.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ComboBox">
            <summary>
            ComboBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.MultiSelect">
            <summary>
            MultiSelect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ExcelExport">
            <summary>
            ExcelExport.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.FileUtils">
            <summary>
            FileUtils.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Gantt">
            <summary>
            Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.InplaceEditor">
            <summary>
            InplaceEditor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.InputBase">
            <summary>
            InputBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.FormValidator">
            <summary>
            FormValidator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.TextBox">
            <summary>
            TextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.NumericTextBox">
            <summary>
            NumericTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.MaskedTextBox">
            <summary>
            MaskedTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Uploader">
            <summary>
            Uploader.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Kanban">
            <summary>
            Kanban.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.OfficeChart">
            <summary>
            OfficeChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.PdfExport">
            <summary>
            PdfExport.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.PdfViewer">
            <summary>
            PdfViewer.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.TreeGrid">
            <summary>
            TreeGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Grid">
            <summary>
            Grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Pager">
            <summary>
            Pager.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.PopupsBase">
            <summary>
            PopupsBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Popup">
            <summary>
            Popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Accordion">
            <summary>
            Accordion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ListView">
            <summary>
            ListView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ListBase">
            <summary>
            ListBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ButtonBase">
            <summary>
            ButtonBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Button">
            <summary>
            Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ContextMenu">
            <summary>
            ContextMenu.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.NavigationsBase">
            <summary>
            NavigationsBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.SplitbuttonsBase">
            <summary>
            SplitbuttonsBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Tooltip">
            <summary>
            Tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Diagram">
            <summary>
            Diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.SymbolPalette">
            <summary>
            SymbolPalette.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Overview">
            <summary>
            Overview.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Dialog">
            <summary>
            Dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Spinner">
            <summary>
            Spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.SfSvgExport">
            <summary>
            SfSvgExport.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Sortable">
            <summary>
            Sortable.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.SfTextBox">
            <summary>
            SfTextbox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SfScriptModules">
            <summary>
            Script modules for the native rendering components.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfBase">
            <summary>
            SfBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfBaseExtended">
            <summary>
            SfBaseExtended.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfGrid">
            <summary>
            SfGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfChart">
            <summary>
            SfChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfAccumulationChart">
            <summary>
            SfAccumulationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfRangeNavigator">
            <summary>
            SfRangeNavigator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfProgressBar">
            <summary>
            SfProgressBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfGantt">
            <summary>
            SfGantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTreeGrid">
            <summary>
            SfTreeGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfPivotView">
            <summary>
            SfPivotView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTextBox">
            <summary>
            SfTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfNumericTextBox">
            <summary>
            SfNumericTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfMaskedTextBox">
            <summary>
            SfMaskedTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfUploader">
            <summary>
            SfUploader.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSlider">
            <summary>
            SfSlider.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDropDownList">
            <summary>
            SfDropDownList.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfMultiSelect">
            <summary>
            SfMultiSelect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfCalendarBase">
            <summary>
            SfCalendarBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDatePicker">
            <summary>
            SfDatePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTimePicker">
            <summary>
            SfTimePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfToolbar">
            <summary>
            SfToolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSplitter">
            <summary>
            SfSplitter.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDashboardLayout">
            <summary>
            SfDashboardLayout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDialog">
            <summary>
            SfDialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTab">
            <summary>
            SfTab.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDropDownButton">
            <summary>
            SfDropDownButton.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTooltip">
            <summary>
            SfTooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfBarcode">
            <summary>
            SfBarcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfAccordion">
            <summary>
            SfAccordion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfContextMenu">
            <summary>
            SfContextMenu.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfMenu">
            <summary>
            SfMenu.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfMaps">
            <summary>
            SfMaps.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfListView">
            <summary>
            SfListView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfFileManager">
            <summary>
            SfFileManager.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTreeView">
            <summary>
            SfTreeView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSidebar">
            <summary>
            SfSidebar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfToast">
            <summary>
            SfToast.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDateRangePicker">
            <summary>
            SfDateRangePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfRichTextEditor">
            <summary>
            SfRichTextEditor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSpinner">
            <summary>
            SfSpinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfCircularGauge">
            <summary>
            SfCircularGauge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfKanban">
            <summary>
            SfKanban.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSchedule">
            <summary>
            SfSchedule.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTreeMap">
            <summary>
            SfTreeMap.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfLinearGauge">
            <summary>
            SfLinearGauge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfListBox">
            <summary>
            SfListBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfInPlaceEditor">
            <summary>
            SfInPlaceEditor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfColorPicker">
            <summary>
            SfColorPicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSmithChart">
            <summary>
            SfSmithChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfBulletChart">
            <summary>
            SfBulletChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSparkline">
            <summary>
            SfSparkline.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfStockChart">
            <summary>
            SfStockChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDocumentEditorContainer">
            <summary>
            SfDocumentEditorContainer.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDocumentEditor">
            <summary>
            SfDocumentEditor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfHeatMap">
            <summary>
            HeatMap.
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDiagramComponent">
            <summary>
            SfDiagramComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.GlobalizeJsonGenerator">
            <summary>
            Generates globalization details for the specific culture in JSON format.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.GlobalizeJsonGenerator.GetGlobalizeJsonString(System.Globalization.CultureInfo)">
            <summary>
            Returns the globalized JSON string.
            </summary>
            <param name="cultureData">Specific culture information.</param>
            <returns>Json serialized globalize string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.GlobalizeJsonGenerator.GetGlobalizeContent(System.Globalization.CultureInfo)">
            <summary>
            Returns current culture information in the Dictionary format.
            </summary>
            <param name="cultureData">Specific culture information.</param>
            <returns>Localized contents.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.Intl">
            <summary>
            A static class for the Internationalization common features and functionalities.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.Intl.CurrentCulture">
            <summary>
            Gets or sets current culture.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.Intl.CurrencyData">
            <summary>
            Gets or sets currency date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.Intl.DefaultCulture">
            <summary>
            Gets or sets default culture.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetDateFormat``1(``0,System.String,System.String)">
            <summary>
            Returns formatted date string based on the current culture.
            </summary>
            <typeparam name="T">The date format type.</typeparam>
            <param name="date">Date value to be formatted.</param>
            <param name="format">Format string for processing date format.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns formatted string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNumericFormat``1(``0,System.String,System.String,System.String)">
            <summary>
            Returns formatted number string based on the current culture.
            </summary>
            <typeparam name="T">The number format type.</typeparam>
            <param name="numberValue">Number value to be formatted.</param>
            <param name="format">Format string for processing number format.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <param name="currencyCode">Optional parameter to process the currency code.</param>
            <returns>Returns formatted string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetWeekOfYear(System.DateTime,System.String,System.Boolean,System.Globalization.CalendarWeekRule)">
            <summary>
            Returns the week of year based on the current culture.
            </summary>
            <param name="dateValue">Date value to be calculated.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <param name="isLastDayOfWeek">Optional paramaeter to pass last day of week.</param>
            <param name="weekRule">Optional parameter to pass week rules.</param>
            <returns>Returns the week of year.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNarrowDayNames(System.String)">
            <summary>
            Returns the narrow day names based on the current culture.
            </summary>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns the narrow day names.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetCulture(System.String)">
            <summary>
            Returns the current culture information.
            </summary>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Set culture info to Intl class.
            </summary>
            <param name="culture">Culture info needs to be set to the Intl.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.SetCulture(System.String)">
            <summary>
            Set culture string to Intl class.
            </summary>
            <param name="culture">Culture string needs to be set to the Intl.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNativeDigits(System.String,System.String[])">
            <summary>
            Converts native digits based on the current culture.
            </summary>
            <param name="formatValue">Format to be converted to native digits.</param>
            <param name="nativeDigits">Native digits of the current culture.</param>
            <returns>Returns the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetCultureFormats(System.String)">
            <summary>
            Returns the required patterns from the current culture.
            </summary>
            <param name="cultureCode">Culture code to be processed for the required patterns.</param>
            <returns>Returns culture patterns.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ISfCircularComponent">
            <summary>
            An interface for circular component reference.
            GridColumns -> GridColumn -> GridColumns -> GridColumn.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ISfCircularComponent.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values from parent component.
            </summary>
            <param name="key">Child property name.</param>
            <param name="propertyValue">Child property value.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IBaseInit">
            <summary>
            Common interface for blazor components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.IBaseInit.OnInitRenderAsync">
            <summary>
            Invoked after script loaded at first rendering.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SyncfusionStringLocalizer">
            <summary>
            Implements the Syncfusion Localizer for injecting its service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.SyncfusionStringLocalizer.ResourceManager">
            <summary>
            Gets the <see cref="T:System.Resources.ResourceManager" /> for localization.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SyncfusionStringLocalizer.GetText(System.String)">
            <summary>
            Get localized text from resource file.
            </summary>
            <param name="key">Property key to return localized value.</param>
            <returns>Locale text.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.LocalizerDetails">
            <summary>
            Maintains the Localizer details for performing Localization.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.#ctor(System.Resources.ResourceManager,System.Globalization.CultureInfo,Syncfusion.Blazor.SyncfusionBlazorService,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Internal.LocalizerDetails"/> class.
            </summary>
            <param name="resourceManager">Resource manager instance.</param>
            <param name="culture">culture information.</param>
            <param name="service">Syncfusion Blazor service.</param>
            <param name="keys">Locale key values.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.LocalizerDetails.Culture">
            <summary>
            Gets or sets culture.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.LocalizerDetails.LocaleKeys">
            <summary>
            Gets or sets locale keys.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.LocalizerDetails.SyncfusionService">
            <summary>
            Gets or sets Syncfusion service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.LocalizerDetails.Manager">
            <summary>
            Gets or sets resource manager.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.GetLocaleText">
            <summary>
            Returns the locale text for blazor components from the resource file.
            </summary>
            <returns>Locale text.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.GetString(System.String)">
            <summary>
            Returns the locale text from the ResourceManager.
            </summary>
            <param name="localeKey">locale key to retrieve the locale value.</param>
            <returns>Locale content.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.GetMappingLocale(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Updates the components locale dictionary.
            </summary>
            <param name="key">Component name.</param>
            <param name="componentLocale">List of components locale collections in dictionary.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.Dispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ResourceManager">
            <summary>
            Resource manager component for loading init interop script in .NET Core 3.0 applications.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.LocaleKeys">
            <summary>
            Add the component and its dependent component locale keys from the LocaleService/GetMappingLocale method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.Parent">
            <summary>
            Gets or sets parent component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.SyncfusionService">
            <summary>
            Gets or sets Syncfusion Blazor service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.JsRuntime">
            <summary>
            Gets or sets IJSRuntime.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.Localizer">
            <summary>
            Gets or sets Syncfusion localizer.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.Dispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.Dispose(System.Boolean)">
            <summary>
            Dispose the unmanaged resources.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <summary>
            Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.
            </summary>
            <param name="builder">A Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder that will receive the render output.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SfBaseUtils">
            <summary>
            Common utility methods which can be used in all the Syncfusion Blazor components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.UpdateDictionary(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update the given dictionary value based on the key value check.
            </summary>
            <param name="key">Key needs to be updated in the dictionary.</param>
            <param name="data">Value needs to be updated for the specific key.</param>
            <param name="dictionary">Dictionary needs to be add or updated.</param>
            <returns>Returns updated Dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GetAttribtues(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update the dictionary based on the @attributes key value check.
            <param name="classList">class list to be added in the string format.</param>
            <param name="dictionary">@attribute property value for updating class list.</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.Equals``1(``0,``0)">
            <summary>
            Returns the bool value based on comparing given values with the EqualityComparer.
            </summary>
            <param name="oldValue">Old value of the property.</param>
            <param name="newValue">New value of the property.</param>
            <returns>Returns bool value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.UpdateProperty``1(``0,``0,Microsoft.AspNetCore.Components.EventCallback{``0},Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Invoking events for two-way bindings property changes.
            </summary>
            <param name="publicValue">Public value needs to be updated in the two-way binding event.</param>
            <param name="privateValue">Private value to compare with public value for invoking two-way bindings.</param>
            <param name="eventCallback">EventCallback for invoking two-way binding event handler function.</param>
            <param name="editContext">EditContext instance for invoking NotifyFieldChanged method.</param>
            <param name="expression">Expression needs to be passed in the NotifyFieldChanged method.</param>
            <returns>Returns public property value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ToDoubleArray(System.Object)">
            <summary>
            Convert given arguments into double array.
            </summary>
            <param name="args">arguments for convert into double array.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ValidateExpression``1(Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Notify the field changes of the EditContext with specified expression.
            </summary>
            <param name="editContext">EditContext instance for invoking the NotifyFieldChanged method.</param>
            <param name="expression">Expression need to be passed in the NotifyFieldChanged method.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportModule(Microsoft.JSInterop.IJSRuntime,Syncfusion.Blazor.Internal.SfScriptModules,System.String)">
            <summary>
            Import component specific interop script modules in the application.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="scriptModule">Component specific interop script module.</param>
            <param name="hashKey">Component specific interop script module Key.</param>
            <returns>JSObjectReference.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportModules(Microsoft.JSInterop.IJSRuntime,System.Collections.Generic.List{Syncfusion.Blazor.Internal.ScriptModules},System.String)">
            <summary>
            Import component dependent interop script modules in the application.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="scriptModules">Component specific interop script module.</param>
            <param name="hashKey">Component specific interop script module Key.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportScripts(Microsoft.JSInterop.IJSRuntime,System.String)">
            <summary>
            Async method to execute script module import.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="modulePath">Module path to be load the script modules.</param>
            <returns>Async Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeEvent``1(System.Object,``0)">
            <summary>
            Invokes event handler function of the corresponding event name with parameters.
            </summary>
            <param name="eventFn">EventCallback to invoke the event handler method.</param>
            <param name="eventArgs">Arguments of the event handler method.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ChangeType(System.Object,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Convert an object to the specified type.
            </summary>
            <param name="dataValue">Value needs to be converted with specific type.</param>
            <param name="conversionType">Type that needs to be converted to the given value.</param>
            <param name="isClientChange">Validate the client changes for the components.</param>
            <param name="isParseValue">Validate the Parse Value for the components.</param>
            <returns>Returns converted object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GenerateID(System.String)">
            <summary>
            Generate the unique Guid.
            </summary>
            <param name="name">add addtional name into ID.</param>
            <returns>Returns ID string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeMethod(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])">
            <summary>
            Invoke void return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeMethod``1(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])">
            <summary>
            Invoke object return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.CompareValues``1(``0,``0)">
            <summary>
            compare the two values and returns a value indicating whether one value is less than, equal to, or greater than the second value.
            </summary>
            <returns>Less than Zero - value1 is less than value 2.</returns>
            <returns>Zero - Both are equals.</returns>
            <returns>Greater than Zero - value1 is greater than value 2.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.AddClass(System.String,System.String)">
            <summary>
            Add a class to the existing string content.
            </summary>
            <param name="prevClass">Previous class list in string format.</param>
            <param name="className">Class name needs to be added in the string content.</param>
            <returns>Returns class string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.RemoveClass(System.String,System.String)">
            <summary>
            Remove a class from the existing string content.
            </summary>
            <param name="prevClass">Previous class list in string format.</param>
            <param name="className">Class name needs to be removed in the string content.</param>
            <returns>Returns class string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.AddArrayValue``1(``0[],``0)">
            <summary>
            Adds a value to a array.
            <param name="arrayValue">array to which value should be added.</param>
            <param name="addValue">value to be added to the array</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.RemoveArrayValue``1(``0[],``0)">
            <summary>
            Removes a value from a array.
            <param name="arrayValue">array to which value should be removed.</param>
            <param name="removeValue">value to be removed from the array</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.IsNotNullOrEmpty(System.Collections.IList)">
            <summary>
            Returns true if the list value is not null or empty.
            <param name="list">list value to be checked for having null or empty values.</param>
            <returns>Returns boolean value.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.FormatUnit(System.String)">
            <summary>
            Function to normalize the units applied to the element.
            </summary>
            <param name="propertyValue">Value.</param>
            <returns>Retuns normalized unit value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GetEnumValue``1(``0)">
            <summary>
            Returns enumeration member value.
            </summary>
            <param name="enumValue">Actual enumeration value to be processed for its member value.</param>
            <returns>Returns actual enumeration member value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.Animate(Microsoft.JSInterop.IJSRuntime,Microsoft.AspNetCore.Components.ElementReference,Syncfusion.Blazor.Internal.AnimationSettings)">
            <summary>
            Function to perform the animation.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="reference">Represents a reference to a rendered element.</param>
            <param name="animationObject">Animation object for performing animation transition.</param>
            <returns>Async Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.RippleEffect(Microsoft.JSInterop.IJSRuntime,Microsoft.AspNetCore.Components.ElementReference,Syncfusion.Blazor.Internal.RippleSettings)">
            <summary>
            Function to perform the ripple effect.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="reference">Represents a reference to a rendered element.</param>
            <param name="rippleObject">Ripple object for performing the ripple effect.</param>
            <returns>Async Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.DataSourceTypeConverter">
            <summary>
            Custom JSON serialization type converter for the DataSource properties.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IBaseComponent">
            <summary>
            An interface for BaseComponent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IJSInteropAdaptor">
            <summary>
            An interface for implementing JSInteropAdaptor.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.JSInteropAdaptor">
            <summary>
            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IValidator">
            <summary>
            Interface for validator.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationContext">
            <summary>
            Validation context that shares the current validated field details.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationResult">
            <summary>
            Validation result of the currently done validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.Validator">
            <summary>
            Validator that handles column validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RequiredValidator">
            <summary>
            Class that performs required field validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.EmailAddressValidator">
            <summary>
            Class that performs email validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MaxLengthValidator">
            <summary>
            Class that performs max length validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MinLengthValidator">
            <summary>
            Class that performs min length validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.StringLengthValidator">
            <summary>
            Class that performs range length or string length validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RangeValidator">
            <summary>
            Class that performs range validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RegexValidator">
            <summary>
            Class that performs regex validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.NumberValidator">
            <summary>
            Class that performs number validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MaxValidator">
            <summary>
            Class that performs max value validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MinValidator">
            <summary>
            Class that performs min value validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationRuleBase">
            <summary>
            Provides validation rules and message customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Required">
            <summary>
            Validates the given value is present or not null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.RangeLength">
            <summary>
            Validates that given string is in range length given.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Range">
            <summary>
            Validates that given value is within range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.MinLength">
            <summary>
            Validates that given value length is greater than minlength value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.MaxLength">
            <summary>
            Validates that given value length is lesser than maxlength value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.RegexPattern">
            <summary>
            Validates that given value matches the given regex.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Email">
            <summary>
            Validates that given value is an e-mail.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Number">
            <summary>
            Validates that given value is a number.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Min">
            <summary>
            Validates that given value is greater than min value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Max">
            <summary>
            Validates that given value is lesser than max value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Messages">
            <summary>
            Gets or sets the error messages for the validation rules.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DOM">
            <summary>
            The HTML DOM equivalent C# class object to define basic properties and perform the basic DOM operations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.ID">
            <summary>
            A unique ID of the HTML DOM element object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.XPath">
            <summary>
            Gets or sets xPath.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.DomUUID">
            <summary>
            Gets or sets DOM UID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.ElementID">
            <summary>
            Gets or sets element ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.JsRuntime">
            <summary>
            Gets or sets JsRuntime.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.AddClass(System.String[])">
            <summary>
            Add a list of CSS classes to the HTML DOM element.
            </summary>
            <param name="classList">An array of string CSS class to be added in the HTML DOM.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.RemoveClass(System.String[])">
            <summary>
            Remove a list of CSS classes in the HTML DOM element.
            </summary>
            <param name="classList">An array of string CSS class to be removed in the HTML DOM.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.GetClassList">
            <summary>
            Get the CSS class names from the HTML DOM element.
            </summary>
            <returns>CSS class names in string of Array.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.SetAttribute``1(System.String,``0)">
            <summary>
            Set the attribute to the HTML DOM element.
            </summary>
            <typeparam name="T">The attribute value type.</typeparam>
            <param name="attributeName">The attribute name needs to be updated in the HTML element.</param>
            <param name="attributeValue">The attribute value needs to be updated to the corresponding attribute in the HTML element.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.GetAttribute``1(System.String)">
            <summary>
            Get the attribute value from the HTML DOM element.
            </summary>
            <typeparam name="T">The result.</typeparam>
            <param name="attributeName">The attribute name to get the attribute value from the HTML element.</param>
            <returns>Returns the HTML attribute value with specific type.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.AnimationEffect">
            <summary>
            Specifies the Animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeftIn">
            <summary>
            Defines the Animation effect as SlideLeftIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRightIn">
            <summary>
            Defines the Animation effect as SlideRightIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeIn">
            <summary>
            Defines the Animation effect as FadeIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeOut">
            <summary>
            Defines the Animation effect as FadeOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeZoomIn">
            <summary>
            Defines the Animation effect as FadeZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeZoomOut">
            <summary>
            Defines the Animation effect as FadeZoomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.ZoomIn">
            <summary>
            Defines the Animation effect as ZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.ZoomOut">
            <summary>
            Defines the Animation effect as ZoomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeft">
            <summary>
            Defines the Animation effect as SlideLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRight">
            <summary>
            Defines the Animation effect as SlideRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftDownIn">
            <summary>
            Defines the Animation effect as FlipLeftDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftDownOut">
            <summary>
            Defines the Animation effect as FlipLeftDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftUpIn">
            <summary>
            Defines the Animation effect as FlipLeftUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftUpOut">
            <summary>
            Defines the Animation effect as FlipLeftUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightDownIn">
            <summary>
            Defines the Animation effect as FlipRightDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightDownOut">
            <summary>
            Defines the Animation effect as FlipRightDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightUpIn">
            <summary>
            Defines the Animation effect as FlipRightUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightUpOut">
            <summary>
            Defines the Animation effect as FlipRightUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXDownIn">
            <summary>
            Defines the Animation effect as FlipXDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXDownOut">
            <summary>
            Defines the Animation effect as FlipXDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXUpIn">
            <summary>
            Defines the Animation effect as FlipXUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXUpOut">
            <summary>
            Defines the Animation effect as FlipXUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYLeftIn">
            <summary>
            Defines the Animation effect as FlipYLeftIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYLeftOut">
            <summary>
            Defines the Animation effect as FlipYLeftOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYRightIn">
            <summary>
            Defines the Animation effect as FlipYRightIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYRightOut">
            <summary>
            Defines the Animation effect as FlipYRightOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideBottomIn">
            <summary>
            Defines the Animation effect as SlideBottomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideBottomOut">
            <summary>
            Defines the Animation effect as SlideBottomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideDown">
            <summary>
            Defines the Animation effect as SlideDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideUp">
            <summary>
            Defines the Animation effect as SlideUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeftOut">
            <summary>
            Defines the Animation effect as SlideLeftOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRightOut">
            <summary>
            Defines the Animation effect as SlideRightOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideTopIn">
            <summary>
            Defines the Animation effect as SlideTopIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideTopOut">
            <summary>
            Defines the Animation effect as SlideTopOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.None">
            <summary>
            Defines the Animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Theme">
            <summary>
            Defines the theme style of the Syncfusion component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Material">
            <summary>
            Renders the Syncfusion component with material theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Bootstrap">
            <summary>
            Renders the Syncfusion component with bootstrap theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.HighContrastLight">
            <summary>
            Renders the Syncfusion component with high contrast light theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Fabric">
            <summary>
            Renders the Syncfusion component with fabric theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.MaterialDark">
            <summary>
            Renders the Syncfusion component with material dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.FabricDark">
            <summary>
            Renders the Syncfusion component with fabric dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.HighContrast">
            <summary>
            Renders the Syncfusion component with high contrast theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.BootstrapDark">
            <summary>
            Renders the Syncfusion component with bootstrap dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Bootstrap4">
            <summary>
            Renders the Syncfusion component with bootstrap4 theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Bootstrap5">
            <summary>
            Renders the Syncfusion component with bootstrap5 theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Bootstrap5Dark">
            <summary>
            Renders the Syncfusion component with bootstrap5Dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Tailwind">
            <summary>
            Renders the Syncfusion component with tailwind theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.TailwindDark">
            <summary>
            Renders the Syncfusion component with tailwind dark theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.ISyncfusionStringLocalizer">
            <summary>
            An interface for processing the Syncfusion UI component's Localization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ISyncfusionStringLocalizer.ResourceManager">
            <summary>
            ResourceManager for processing the resource file parsing.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.ISyncfusionStringLocalizer.GetText(System.String)">
            <summary>
            Return the Localized value from the resource file.
            </summary>
            <param name="key">Key string to get the localized value.</param>
            <returns>Returns the localized string.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.SfBaseComponent">
            <summary>
            A Base Component for all the Syncfusion Blazor UI components to implement the common functionalities.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.Dispose">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ComponentDispose">
            <summary>
            The virtual method to override the Dispose method at component side.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnAfterScriptRendered">
            <summary>
            Notify the component about the required scripts are rendered in the web page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeScriptRendered">
            <summary>
            Invoke method for ScriptDependencies class to notify script rendered in web page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeMethod(System.String,System.Object[])">
            <summary>
            Invokes JSInterop for void return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeMethod``1(System.String,System.Boolean,System.Object[])">
            <summary>
            Invokes JSInterop for object return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.NotifyPropertyChanges``1(System.String,``0,``0,System.Boolean)">
            <summary>
            Notify the property value changes and it will be tracked in the PropertyChanges.
            </summary>
            <param name="propertyName">Name of the property needs to be compared.</param>
            <param name="publicValue">Public value of the property.</param>
            <param name="privateValue">Private value of the property.</param>
            <param name="updatePrevProps">Private value of the Previous property</param>
            <returns>Returns T.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.UpdateObservableEventsForObject(System.String,System.Object,System.Boolean)">
            <summary>
            Wire or unwire observable events to a specific collection object.
            </summary>
            <param name="propertyName">ObservableCollection property name to track it in PropertyChanges.</param>
            <param name="dataValue">A ObservableCollection data object to bind or unbind the events.</param>
            <param name="unwire">Set true to unwire observable events to the ObservableCollection object.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.UpdateObservableEvents(System.String,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Wire or unwire observable events to a specific ObservableCollection object.
            </summary>
            <param name="propertyName">ObservableCollection property name to track it in PropertyChanges.</param>
            <param name="dataValue">A ObservableCollection data object to bind or unbind the events.</param>
            <param name="unwire">Set true to unwire observable events to the ObservableCollection object.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ObservableCollectionChanged(System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            INotifyCollectionChanged event handler method to track the changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ObservablePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            INotifyPropertyChanged event handler method to track the changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnObservableChange(System.String,System.Object,System.Boolean,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overridable Method for INotifyCollectionChanged event handler to track the changes.
            </summary>
            <param name="propertyName">Observable property name.</param>
            <param name="sender">Observable model object.</param>
            <param name="isCollectionChanged">Sets true if the observable collection changed.</param>
            <param name="e">Changed Event Args</param>
        </member>
        <member name="T:Syncfusion.Blazor.ScriptDependencies">
            <summary>
            ScriptDependencies class to load the dependent scripts in load time.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SyncfusionBlazor">
            <summary>
            An extension class controls methods to add the Syncfusion Blazor service to the <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection">service collection</see>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazor.AddSyncfusionBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Adds Syncfusion Blazor service to the <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection">service collection</see>.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazor.AddSyncfusionBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Syncfusion.Blazor.GlobalOptions})">
            <summary>
            Adds Syncfusion Blazor service to the <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection">service collection</see> and configure components global options.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="configure">A delegate that is used to configure <see cref="T:Syncfusion.Blazor.GlobalOptions"/>.</param>
            <returns>The collection of services.</returns>
            <example>
            <code lang="C#"><![CDATA[
            services.AddSyncfusionBlazor(options =>
            {
                options.IgnoreScriptIsolation = true;
            });
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.SyncfusionBlazorService">
            <summary>
            Represents an instance of Syncfusion Blazor service.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.#ctor(Microsoft.Extensions.Options.IOptions{Syncfusion.Blazor.GlobalOptions})">
            <exclude />
            /// <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.SyncfusionBlazorService"/> class.
            </summary>
            <param name="configure">Configured global options for Syncfusion Blazor.</param>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsEnabledScriptIsolation">
            <summary>
            Specifies global script rendering in the application, when IgnoreScriptIsolation is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsCultureLoaded">
            <summary>
            Specifies the current culture is set to the library for all type of components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsScriptRendered">
            <summary>
            Specifies the init JSInterop script is loaded, when DisableScriptManager is false.
            Specifies the IsDevice JSInterop call invoked, when DisableScriptManager is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsLicenseValidated">
            <summary>
            Specifies whether the license validated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsDeviceMode">
            <summary>
            Specifies the application is rendering in device mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.ScriptHashKey">
            <summary>
            Specifies the application is rendering in device mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsFirstResource">
            <summary>
            Specifies the first component rendering in the application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsFirstBaseResource">
            <summary>
            Specifies the first BaseComponent inherited rendering in the application.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.EnableScriptIsolation(System.Boolean)">
            <summary>
            Enable Global Script to the Syncfusion Blazor components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.EnableRipple(System.Boolean)">
            <summary>
            Enable ripple effect to the Syncfusion Blazor components for material design theme.
            </summary>
            <param name="enable">Set false to disable ripple effect.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.EnableRtl(System.Boolean)">
            <summary>
            Enable right-to-left text direction to the Syncfusion Blazor components.
            </summary>
            <param name="enable">Set false to disable right-to-left text direction.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.IsDevice">
            <summary>
            Returns true when the application is running on a mobile or IPad device.
            This method should be called only in the OnAfterRenderAsync life cycle method.
            </summary>
            <returns>Returns true, if the application rendering in mobile or IPad devices.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.SetIsDevice(System.Boolean)">
            <exclude />
            <summary>Update script rendered property after the init script loaded in the web page.</summary>
            <param name="isDevice">Boolean value to identify whether the application is rendering in mobile or IPad devices.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.GlobalOptions">
            <summary>
            A class that provides options to configure global settings for our Syncfusion Blazor components.
            </summary>
            <example>
            <code lang="C#"><![CDATA[
            services.AddSyncfusionBlazor(options =>
            {
                options.IgnoreScriptIsolation = true;
            });
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.GlobalOptions.IgnoreScriptIsolation">
            <summary>
            Gets or sets whether the Syncfusion Blazor scripts are loaded internally using JavaScript Isolation or refer to the required scripts from the application-end for better performance. 
            </summary>
            <value>
            false, if the Blazor scripts are loaded from built-in source using JavaScript Isolation internally. The default value is false.
            </value>
            <remarks>
            When the property value is true, the scripts should be referenced externally in the application-end from NuGet or CDN or by generating from CRG.
            </remarks>
            <example>
            <para> You can add script reference in one of the following ways externally for better performance when <c>IgnoreScriptIsolation</c> is <c>true</c>.</para>
            <para><b>Reference scripts from NuGet</b></para>
            To add script reference for all component except PdfViewer and DocumentEditor.
            <code lang="html"><![CDATA[
            <script  src="_content/Syncfusion.Blazor/scripts/syncfusion-blazor.min.js"  type="text/javascript"></script>
            ]]></code>
            To add script reference for PdfViewer.
            <code lang="html"><![CDATA[
            <script  src="_content/Syncfusion.Blazor.PdfViewer/scripts/syncfusion-blazor-pdfviewer.min.js"  type="text/javascript"></script>
            ]]></code>
            To add script reference for DocumentEditor.
            <code lang="html"><![CDATA[
            <script  src="_content/Syncfusion.Blazor.WordProcessor/scripts/syncfusion-blazor-documenteditor.min.js"  type="text/javascript"></script>
            ]]></code>
            <para><b>Reference scripts from CDN</b></para>
            To add script reference for all component except PdfViewer and DocumentEditor.
            <code lang="html"><![CDATA[
            <script  src="https://cdn.syncfusion.com/blazor/19.3.43/syncfusion-blazor.min.js"  type="text/javascript"></script>
            ]]></code>
            To add script reference for PdfViewer.
            <code lang="html"><![CDATA[
            <script  src="https://cdn.syncfusion.com/blazor/19.3.43/syncfusion-blazor-pdfviewer.min.js"  type="text/javascript"></script>
            ]]></code>
            To add script reference for DocumentEditor.
            <code lang="html"><![CDATA[
            <script  src="https://cdn.syncfusion.com/blazor/19.3.43/syncfusion-blazor-documenteditor.min.js"  type="text/javascript"></script>
            ]]></code>
            <em>Note: Ensure to change the version in CDN link based on the syncfusion version you are using.</em>
            <para><b>Reference scripts by generating from <see href="https://blazor.syncfusion.com/crg/">Blazor CRG</see> for only used components</b></para>
            Generate a required component script and styles from Blazor custom resource generator(Blazor CRG) and refer to them in your application.
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.GlobalOptions.EnableRippleEffect">
            <summary>
            Specifies whether the ripple effect is enabled in the application.
            </summary>
            <value>
            true, if the ripple effect is enabled in the application. The default value is false.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.GlobalOptions.EnableRtl">
            <summary>
            Specifies whether the Rtl mode enabled in the application.
            </summary>
            <value>
            true, if the Rtl mode enabled in the application. The default value is false.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfButton">
            <summary>
            The Button is a graphical user interface element that triggers an event on its click action.
            It can contain a text, an image, or both.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.ChildContent">
            <summary>
            Sets content for button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Content">
            <summary>
            Defines the text content of the button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the button element. The Button types, styles, and
            size can be defined by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Disabled">
            <summary>
            Specifies a value that indicates whether the Button is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.EnableRtl">
            <summary>
            Enable or disable rendering Button component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the Button that is used to include an icon.
            Buttons can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IconPosition">
            <summary>
            Positions the icon based on the text content in the button and its default value is Left.
            The possible values are:
            - Left: The icon will be positioned to the left of the text content.
            - Right: The icon will be positioned to the right of the text content.
            - Top: The icon will be positioned to the top of the text content.
            - Bottom: The icon will be positioned to the bottom of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IsPrimary">
            <summary>
            Allows the appearance of the button to be enhanced and visually appealing when set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IsToggle">
            <summary>
            Makes the Button toggle, when set to true. When you click it, the state changes from normal to active or viceversa.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as id, title etc., to the button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.OnClick">
            <summary>
            Triggers when button element is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfButton.FocusIn">
            <summary>
            Sets the focus to button element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfButton.FocusAsync">
            <summary>
            Sets the focus to button element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.IconPosition">
            <summary>
            Defines the icon position of Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Left">
            <summary>
            To position icon left to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Right">
            <summary>
            To position icon right to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Top">
            <summary>
            To position icon above the content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Bottom">
            <summary>
            To position icon below the content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfCheckBox`1">
            <summary>
            The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.
            It contains checked, unchecked, and indeterminate states.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Label">
            <summary>
            Defines the caption for the CheckBox, that describes the purpose of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition">
            <summary>
            Positions label before/after the CheckBox.
            The possible values are:
            - Before - The label is positioned to left of the CheckBox.
            - After - The label is positioned to right of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate">
            <summary>
            Specifies a value that indicates whether the CheckBox is in indeterminate state or not.
            When set to true, the CheckBox will be in indeterminate state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.IndeterminateChanged">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState">
            <summary>
            Specifies a value to enable/disable tri state functionality in CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.ValueChange">
            <summary>
            Triggers when the CheckBox state has been changed by user interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipEvents">
            <summary>
            Configure handlers to handle the events with the Chip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.BaseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnBeforeClick">
            <summary>
            This click event will get triggered once the chip is before click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnClick">
            <summary>
            This click event will get triggered once the chip is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.Created">
            <summary>
            This created event will get triggered once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.Destroyed">
            <summary>
            This created event will get triggered once the component successfuly disposed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnDelete">
            <summary>
            This delete event will get triggered before removing the chip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipItems">
            <summary>
            Configures the collection of chipitem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItems.BaseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItems.ChildContent">
            <summary>
            Indicates the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItems.Chips">
            <summary>
            Indicates the Chips List.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItems.UpdateChildProperty(Syncfusion.Blazor.Buttons.ChipItem)">
            <summary>
            Updates the Chips property and returns the count.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipItem">
            <summary>
            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.
            </summary>
            <summary>
            Partial Class ChipItem.
            </summary>
            <summary>
            Partial Class ChipItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Parent">
            <summary>
            Indicates the ChipItems component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.BaseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItem.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.CssClass">
            <summary>
            Specifies the custom classes to be added to the chip element used to customize the Chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Enabled">
            <summary>
            Specifies a value that indicates whether the chip component is enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingIconCss">
            <summary>
            Specifies the leading icon CSS class for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingIconUrl">
            <summary>
            Specifies the leading icon url for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingText">
            <summary>
            Specifies the customized text value for the avatar in the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Text">
            <summary>
            Specifies the text content for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.TrailingIconCss">
            <summary>
            Specifies the trailing icon CSS class for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.TrailingIconUrl">
            <summary>
            Specifies the leading icon url for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Value">
            <summary>
            This value property helps to store the chip component values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as title to the each chip element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SelectionType">
            <summary>
            Different selection types that are applicable for the Chip component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.Single">
            <summary>
            Single selection allows to select a single chip from a set of ChipItem/ChipItems.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.Multiple">
            <summary>
            Multiple selection allows to select multipe chips from a set of ChipItem/ChipItems.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.None">
            <summary>
            Selection of chip will be restricted in none type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipEventArgs">
            <summary>
            Interface for Chip Events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Cancel">
            <summary>
            It denotes whether the item can be deleted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Element">
            <summary>
            It denotes the deleted Item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Index">
            <summary>
            It denotes the deleted item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Selected">
            <summary>
            It denotes whether the clicked item is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Text">
            <summary>
            It denotes the deleted item text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Value">
            <summary>
            It denotes the deleted item value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfChip">
            <summary>
            Partial Class SfChip.
            </summary>
            <summary>
            Specifies the Partial class SfChip.
            </summary>
            <summary>
            Partial Class SfChip.
            </summary>
            <summary>
            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnInitializedAsync">
            <summary>
            Method gets invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.CssClass">
            <summary>
            Specifies the custom classes to be added to the chip element used to customize the chip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Chips">
            <summary>
            This chips property helps to render chipitem component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.EnableDelete">
            <summary>
            This enableDelete property helps to enable delete functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Enabled">
            <summary>
            This enabled property helps to enable/disable chipitem component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.SelectedChips">
            <summary>
            This selectedChips property helps to select chip items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.SelectedChipsChanged">
            <summary>
            Specifies the callback to trigger when the selected chips changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Selection">
            <summary>
            This selection property enables chip selection type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as title, native events etc., to the wrapper element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.FindChip(System.String)">
            <summary>
            A function that finds chip based on given chip value.
            </summary>
            <param name="chipValue">Value of the chip need to be passed to get the corresponding chip model.</param>
            <returns>GetItem.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetSelectedChips">
            <summary>
            A function that returns selected chips data.
            </summary>
            <returns>selectedChipModels.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.RemoveChips(System.String[])">
            <summary>
            A function that removes chip items based on given chip values.
            </summary>
            <param name="removableChipValues">Values of the chips which are to be removed should be passed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.SelectChips(System.String[])">
            <summary>
            A function that selects chip items based on given index.
            </summary>
            <param name="selectableChips">Values of the chips which are to be selected should be passed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.AddChip(Syncfusion.Blazor.Buttons.ChipItem)">
            <summary>
            A function that adds chip items based on given input.
            </summary>
            <param name="item">Chip Item to be added should be passed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateChips(System.Collections.Generic.List{Syncfusion.Blazor.Buttons.ChipItem})">
            <summary>
            Updates the child properties of the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.RefeshComponent">
            <summary>
            Re-renders the complete chip component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateAttributes">
            <summary>
            Updates the class and multiselection attributes of the chip root element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetItem(System.String)">
            <summary>
            Returns a ChipItem based on a value of a chip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateRefsCount(System.Int32)">
            <summary>
            Updates the chip elements count.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetAttributes(System.Int32)">
            <summary>
            Updates the text, icons url/class and attributes of each chip if multiple chip rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateAttributes(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the attributes value.
            </summary>
            <param name="htmlAttributes">The htmlAttributes.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnDeleteClick(System.Int32,System.Boolean)">
            <summary>
            Delete click event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipMouseDown(System.Int32,System.Boolean)">
            <summary>
            Chip element mouse down event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipClick(System.Int32,System.Boolean)">
            <summary>
            Chip element click event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetEventArgs(System.Int32)">
            <summary>
            Returns the click event arguments.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipFocusOut">
            <summary>
            Chip element focus out handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipFocus(System.Int32)">
            <summary>
            Chip element focus handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnKeyDown(System.Int32,Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Chip element key down handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.ComponentDispose">
            <summary>
            Component dispose handled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.LabelPosition">
            <summary>
            Defines the label position of component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.LabelPosition.After">
            <summary>
            To position label after the component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.LabelPosition.Before">
            <summary>
            To position label before the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChangeEventArgs`1">
            <summary>
            Arguments for `ValueChange` event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeEventArgs`1.Checked">
            <summary>
            Returns the checked value of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeEventArgs`1.Event">
            <summary>
            Returns the event parameters of the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChangeArgs`1">
            <summary>
            Interface for Radio Button change event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeArgs`1.Value">
            <summary>
            Returns the value of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeArgs`1.Event">
            <summary>
            Returns the event parameters of the RadioButton.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.CheckBoxModel`1">
            <summary>
            Interface for a class CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Checked">
            <summary>
            Specifies a value that indicates whether the CheckBox is `checked` or not.
            When set to `true`, the CheckBox will be in `checked` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the CheckBox element.
            You can add custom styles to the CheckBox by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Disabled">
            <summary>
            Specifies a value that indicates whether the CheckBox is `disabled` or not.
            When set to `true`, the CheckBox will be in `disabled` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as disabled, value etc., to the element.
            If you configured both property and equivalent html attribute then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Indeterminate">
            <summary>
            Specifies a value that indicates whether the CheckBox is in `indeterminate` state or not.
            When set to `true`, the CheckBox will be in `indeterminate` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Label">
            <summary>
            Defines the caption for the CheckBox, that describes the purpose of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.LabelPosition">
            <summary>
            Positions label `before`/`after` the CheckBox.
            The possible values are:
             Before - The label is positioned to left of the CheckBox.
             After - The label is positioned to right of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Name">
            <summary>
            Defines `name` attribute for the CheckBox.
            It is used to reference form data (CheckBox value) after a form is submitted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Value">
            <summary>
            Defines `value` attribute for the CheckBox.
            It is a form data passed to the server when submitting the form.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfInputBase`1">
            <summary>
            A base class for form input components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.ChildContent">
            <exclude/>
            <summary>
            Defines the caption for the input, that describes the purpose of the input including HTML and its customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the component wrapper element.
            You can add custom styles to the component by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name">
            <summary>
            Defines name attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value">
            <summary>
            Defines value attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked">
            <summary>
            Specifies a value that indicates whether the component is checked or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CheckedChanged">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CheckedExpression">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Disabled">
            <summary>
            Specifies a value that indicates whether the component is disabled or not.
            When set to true, the component will be in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as title , native events etc., to the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfInputBase`1.FocusIn">
            <summary>
            Sets the focus to component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfInputBase`1.FocusAsync">
            <summary>
            Sets the focus to component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.IconName">
            <summary>
            Defines the icon names that can be rendered in <see cref="T:Syncfusion.Blazor.Buttons.SfIcon"/> using <see cref="P:Syncfusion.Blazor.Buttons.SfIcon.Name"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AboveAverage">
            <summary>
            Defines above average icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AddChartElement">
            <summary>
            Defines add chart element icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AgendaDateRange">
            <summary>
            Defines agenda date range icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AlignBottom">
            <summary>
            Defines align bottom icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AlignCenter">
            <summary>
            Defines align center icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AlignLeft">
            <summary>
            Defines align left icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AlignMiddle">
            <summary>
            Defines align middle icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AlignRight">
            <summary>
            Defines align right icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AlignTop">
            <summary>
            Defines align top icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.All">
            <summary>
            Defines all icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AnnotationEdit">
            <summary>
            Defines annotation-edit icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Area">
            <summary>
            Defines area icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ArrowDown">
            <summary>
            Defines arrow down icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ArrowLeft">
            <summary>
            Defines arrow left icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ArrowRight">
            <summary>
            Defines arrow right icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ArrowRightUp">
            <summary>
            Defines arrow right up icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ArrowUp">
            <summary>
            Defines arrow up icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AutoFitContent">
            <summary>
            Defines auto fit content icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.AutoFitWindow">
            <summary>
            Defines auto fit window icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BelowAverage">
            <summary>
            Defines below average icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Between">
            <summary>
            Defines between icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Bold">
            <summary>
            Defines bold icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Bookmark">
            <summary>
            Defines bookmark icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderBottom">
            <summary>
            Defines border bottom icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderCenter">
            <summary>
            Defines border center icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderDiagonal1">
            <summary>
            Defines border diagonal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderDiagonal2">
            <summary>
            Defines border diagonal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderInner">
            <summary>
            Defines border inner icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderLeft">
            <summary>
            Defines border left icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderMiddle">
            <summary>
            Defines border middle icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderNone">
            <summary>
            Defines border none icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderOuter">
            <summary>
            Defines border outer icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderRight">
            <summary>
            Defines border right icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BorderTop">
            <summary>
            Defines border top icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BottomTen">
            <summary>
            Defines bottom 10 icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BottomTenItems">
            <summary>
            Defines bottom 10 items icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Box">
            <summary>
            Defines box icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Break">
            <summary>
            Defines break icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BreakPage">
            <summary>
            Defines break page icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BreakSection">
            <summary>
            Defines break section icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BringForward">
            <summary>
            Defines bring forward icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.BringToFront">
            <summary>
            Defines bring to front icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Bullet1">
            <summary>
            Defines bullet icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Bullet2">
            <summary>
            Defines bullet icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Bullet3">
            <summary>
            Defines bullet icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Bullet4">
            <summary>
            Defines bullet icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Bullet5">
            <summary>
            Defines bullet icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Bullet6">
            <summary>
            Defines bullet icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CalculatedMember">
            <summary>
            Defines calculated member icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Caption">
            <summary>
            Defines caption icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Cell">
            <summary>
            Defines cell icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChangeCase">
            <summary>
            Defines change case icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChangesAccept">
            <summary>
            Defines changes accept icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChangeScaleRatio">
            <summary>
            Defines change scale ratio icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChangesReject">
            <summary>
            Defines changes reject icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChangesTrack">
            <summary>
            Defines changes track icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart">
            <summary>
            Defines chart icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2D100PercentStackedArea">
            <summary>
            Defines chart 2d 100 percent stacked area icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2D100PercentStackedBar">
            <summary>
            Defines chart 2d 100 percent stacked bar icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2D100PercentStackedColumn">
            <summary>
            Defines chart 2d 100 percent stacked column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2D100PercentStackedLine">
            <summary>
            Defines chart 2d 100 percent stacked line icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DArea">
            <summary>
            Defines chart 2d area icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DClusteredBar">
            <summary>
            Defines chart 2d clustered bar icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DClusteredColumn">
            <summary>
            Defines chart 2d clustered column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DLine">
            <summary>
            Defines chart 2d line icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DPie">
            <summary>
            Defines chart 2d pie 2 icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DStackedArea">
            <summary>
            Defines chart 2d stacked area icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DStackedBar">
            <summary>
            Defines chart 2d stacked bar icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DStackedColumn">
            <summary>
            Defines chart 2d stacked column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Chart2DStackedLine">
            <summary>
            Defines chart 2d stacked line icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartAxes">
            <summary>
            Defines chart axes icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartAxesPrimaryHorizontal">
            <summary>
            Defines chart axes primary horizontal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartAxesPrimaryVertical">
            <summary>
            Defines chart axes primary vertical icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartAxisTitles">
            <summary>
            Defines chart axis titles icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartAxisTitlesPrimaryHorizontal">
            <summary>
            Defines chart axis titles primary horizontal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartAxisTitlesPrimaryVertical">
            <summary>
            Defines chart axis titles primary vertical icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartDataLabels">
            <summary>
            Defines chart data labels icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartDataLabelsCenter">
            <summary>
            Defines chart data labels center icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartDataLabelsInsideBase">
            <summary>
            Defines chart data labels inside base icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartDataLabelsInsideEnd">
            <summary>
            Defines chart data labels inside end icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartDataLabelsNone">
            <summary>
            Defines chart data labels none icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartDataLabelsOutsideEnd">
            <summary>
            Defines chart data labels outside end icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartDonut">
            <summary>
            Defines chart donut icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartGridlines">
            <summary>
            Defines chart gridlines icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartInsertBar">
            <summary>
            Defines chart insert bar icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartInsertColumn">
            <summary>
            Defines chart insert column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartInsertLine">
            <summary>
            Defines chart insert line icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartInsertPie">
            <summary>
            Defines chart insert pie icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartInsertXYScatter">
            <summary>
            Defines chart insert x y scatter icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartLegend">
            <summary>
            Defines chart legend icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartLegendBottom">
            <summary>
            Defines chart legend bottom icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartLegendLeft">
            <summary>
            Defines chart legend left icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartLegendNone">
            <summary>
            Defines chart legend none icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartLegendRight">
            <summary>
            Defines chart legend right icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartLegendTop">
            <summary>
            Defines chart legend top icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartLines">
            <summary>
            Defines chart lines icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartPrimaryMajorHorizontal">
            <summary>
            Defines chart primary major horizontal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartPrimaryMajorVertical">
            <summary>
            Defines chart primary major vertical icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartPrimaryMinorHorizontal">
            <summary>
            Defines chart primary minor horizontal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartPrimaryMinorVertical">
            <summary>
            Defines chart primary minor vertical icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartSwitchRowColumn">
            <summary>
            Defines chart switch row column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartTitle">
            <summary>
            Defines chart title icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartTitleCenteredOverlay">
            <summary>
            Defines chart title centered overlay icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChartTitleNone">
            <summary>
            Defines chart title none icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Check">
            <summary>
            Defines check icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CheckBox">
            <summary>
            Defines check box icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronDown">
            <summary>
            Defines chevron down icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronDownDouble">
            <summary>
            Defines chevron down double icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronDownFill">
            <summary>
            Defines chevron down fill icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronLeft">
            <summary>
            Defines chevron left icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronLeftDouble">
            <summary>
            Defines chevron left double icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronLeftSmall">
            <summary>
            Defines chevron left small icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronRight">
            <summary>
            Defines chevron right icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronRightDouble">
            <summary>
            Defines chevron right double icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronRightSmall">
            <summary>
            Defines chevron right small icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronUp">
            <summary>
            Defines chevron up icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ChevronUpDouble">
            <summary>
            Defines chevron up double icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Circle">
            <summary>
            Defines circle icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CircleAdd">
            <summary>
            Defines circle add icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CircleCheck">
            <summary>
            Defines circle check icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CircleInfo">
            <summary>
            Defines circle info icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CircleRemove">
            <summary>
            Defines circle remove icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ClearForm">
            <summary>
            Defines clear form icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ClearFormat">
            <summary>
            Defines clear format icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ClearRules">
            <summary>
            Defines clear rules icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Clock">
            <summary>
            Defines clock icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Close">
            <summary>
            Defines close icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CodeView">
            <summary>
            Defines code view icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Collapse">
            <summary>
            Defines collapse icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ColorScales">
            <summary>
            Defines color scales icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CommentAdd">
            <summary>
            Defines comment add icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CommentReopen">
            <summary>
            Defines comment reopen icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.CommentShow">
            <summary>
            Defines comment show icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ConditionalFormatting">
            <summary>
            Defines conditional formatting icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ConditionalFormattingLarge">
            <summary>
            Defines conditional formatting large icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ContinueNumbering">
            <summary>
            Defines continue numbering icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Copy">
            <summary>
            Defines copy icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Cut">
            <summary>
            Defines cut icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DataBars">
            <summary>
            Defines data bars icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DataValidation">
            <summary>
            Defines data validation icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DateOccurring">
            <summary>
            Defines date occurring icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Day">
            <summary>
            Defines day icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DecreaseIndent">
            <summary>
            Defines decrease indent icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DeleteColumn">
            <summary>
            Defines delete column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DeleteRow">
            <summary>
            Defines delete row icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Description">
            <summary>
            Defines description icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Dimension">
            <summary>
            Defines dimension icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Display">
            <summary>
            Defines display icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Download">
            <summary>
            Defines download icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DragAndDrop">
            <summary>
            Defines drag and drop icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DragAndDropIndicator">
            <summary>
            Defines drag and drop indicator icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DragFill">
            <summary>
            Defines drag fill icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DropDown">
            <summary>
            Defines drop down icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.DuplicateCell">
            <summary>
            Defines duplicate cell icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Edit">
            <summary>
            Defines edit icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.EndFootnote">
            <summary>
            Defines end footnote icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.EqualTo">
            <summary>
            Defines equalto icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Erase">
            <summary>
            Defines erase icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ErrorTreeview">
            <summary>
            Defines error treeview icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ExitFullScreen">
            <summary>
            Defines exit full screen icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Expand">
            <summary>
            Defines expand icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Export">
            <summary>
            Defines export icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ExportCsv">
            <summary>
            Defines export csv icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ExportExcel">
            <summary>
            Defines export excel icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ExportPdf">
            <summary>
            Defines export pdf icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ExportPng">
            <summary>
            Defines export png icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ExportSvg">
            <summary>
            Defines export svg icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ExportXls">
            <summary>
            Defines export xls icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Eye">
            <summary>
            Defines eye icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FieldSettings">
            <summary>
            Defines field settings icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FileNew">
            <summary>
            Defines file new icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Filter">
            <summary>
            Defines filter icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FilterActive">
            <summary>
            Defines filter active icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FilterClear">
            <summary>
            Defines filter clear icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Filtered">
            <summary>
            Defines filtered icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FilteredSortAscending">
            <summary>
            Defines filtered sort ascending icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FilteredSortDescending">
            <summary>
            Defines filtered sort descending icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FilterMain">
            <summary>
            Defines filter main icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FirstPage">
            <summary>
            Defines first page icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FixedColumnWidth">
            <summary>
            Defines fixed column width icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Folder">
            <summary>
            Defines folder icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FolderOpen">
            <summary>
            Defines folder open icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FontColor">
            <summary>
            Defines font color icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FontName">
            <summary>
            Defines font name icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Footer">
            <summary>
            Defines footer icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FormField">
            <summary>
            Defines form field icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FreezeColumn">
            <summary>
            Defines freeze column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FreezePane">
            <summary>
            Defines freeze pane icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FreezeRow">
            <summary>
            Defines freeze row icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.FullScreen">
            <summary>
            Defines full screen icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.GrandTotal">
            <summary>
            Defines  icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.GreaterThan">
            <summary>
            Defines greater than icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.GridView">
            <summary>
            Defines grid view icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.GripVertical">
            <summary>
            Defines grip vertical icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Group1">
            <summary>
            Defines group icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Group2">
            <summary>
            Defines group icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.GroupIcon">
            <summary>
            Defines group icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Header">
            <summary>
            Defines header icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.HideFormulaBar">
            <summary>
            Defines hide formula bar icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.HideGridlines">
            <summary>
            Defines hide gridlines icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.HideHeadings">
            <summary>
            Defines hide headings icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Highlight">
            <summary>
            Defines highlight icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.HighlightColor">
            <summary>
            Defines highlight color icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Home">
            <summary>
            Defines home icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.HyperlinkCopy">
            <summary>
            Defines hyperlink copy icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.HyperlinkEdit">
            <summary>
            Defines hyperlink edit icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.HyperlinkOpen">
            <summary>
            Defines hyperlink open icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.HyperlinkRemove">
            <summary>
            Defines hyperlink remove icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.IconSets">
            <summary>
            Defines iconsets icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Image">
            <summary>
            Defines image icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.IncreaseIndent">
            <summary>
            Defines increase indent icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.InsertAbove">
            <summary>
            Defines insert above icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.InsertBelow">
            <summary>
            Defines insert below icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.InsertCode">
            <summary>
            Defines insert code icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.InsertLeft">
            <summary>
            Defines insert left icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.InsertRight">
            <summary>
            Defines insert right icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.IntermediateState">
            <summary>
            Defines intermediate state icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Italic">
            <summary>
            Defines italic icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Justify">
            <summary>
            Defines justify icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Kpi">
            <summary>
            Defines kpi icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.LastPage">
            <summary>
            Defines last page icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Length">
            <summary>
            Defines length icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.LessThan">
            <summary>
            Defines less than icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Level1">
            <summary>
            Defines level icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Level2">
            <summary>
            Defines level icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Level3">
            <summary>
            Defines level icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Level4">
            <summary>
            Defines level icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Level5">
            <summary>
            Defines level icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Line">
            <summary>
            Defines line icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.LineNormal">
            <summary>
            Defines line normal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.LineSmall">
            <summary>
            Defines line small icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.LineSpacing">
            <summary>
            Defines line spacing icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.LineVerySmall">
            <summary>
            Defines line very small icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Link">
            <summary>
            Defines link icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.LinkRemove">
            <summary>
            Defines link remove icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ListOrdered">
            <summary>
            Defines list ordered icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ListUnordered">
            <summary>
            Defines list unordered icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Location">
            <summary>
            Defines location icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Lock">
            <summary>
            Defines lock icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.LowerCase">
            <summary>
            Defines lower case icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Mdx">
            <summary>
            Defines mdx icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Menu">
            <summary>
            Defines menu icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.MergeCells">
            <summary>
            Defines merge cells icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Month">
            <summary>
            Defines month icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.MoreHorizontal">
            <summary>
            Defines more horizontal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.MoreScatterCharts">
            <summary>
            Defines more scatter chart icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.MoreVertical">
            <summary>
            Defines more vertical icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.MousePointer">
            <summary>
            Defines mouse pointer icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.NamedSet">
            <summary>
            Defines named set icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.NumberFormatting">
            <summary>
            Defines number formatting icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Opacity">
            <summary>
            Defines opacity icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.OpenLink">
            <summary>
            Defines open link icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Order">
            <summary>
            Defines order icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.PageNumbering">
            <summary>
            Defines page numbering icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.PageSetup">
            <summary>
            Defines page setup icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.PaintBucket">
            <summary>
            Defines paint bucket icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Pan">
            <summary>
            Defines pan icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Paragraph">
            <summary>
            Defines paragraph icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Password">
            <summary>
            Defines password icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Paste">
            <summary>
            Defines paste icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.PasteMatchDestination">
            <summary>
            Defines paste match destination icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.PasteStyle">
            <summary>
            Defines paste style icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.PasteTextOnly">
            <summary>
            Defines paste text only icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Pause">
            <summary>
            Defines pause icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.People">
            <summary>
            Defines people icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Perimeter">
            <summary>
            Defines perimeter icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Play">
            <summary>
            Defines play icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Plus">
            <summary>
            Defines plus icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Print">
            <summary>
            Defines print icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.PrintLayout">
            <summary>
            Defines print layout icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ProtectSheet">
            <summary>
            Defines protect sheet icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ProtectWorkbook">
            <summary>
            Defines protect workbook icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.RadioButton">
            <summary>
            Defines radio button icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Radius">
            <summary>
            Defines radius icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Reapply">
            <summary>
            Defines reapply icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Rectangle">
            <summary>
            Defines rectangle icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.RecurrenceEdit">
            <summary>
            Defines recurrence edit icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Redo">
            <summary>
            Defines redo icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Refresh">
            <summary>
            Defines refresh icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Rename">
            <summary>
            Defines rename icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Repeat">
            <summary>
            Defines repeat icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Replace">
            <summary>
            Defines replace icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Resize">
            <summary>
            Defines resize icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.RestartAtOne">
            <summary>
            Defines restart at 1 icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Save">
            <summary>
            Defines save icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SaveAs">
            <summary>
            Defines save as icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Search">
            <summary>
            Defines search icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SelectAll">
            <summary>
            Defines select all icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Selection">
            <summary>
            Defines selection icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SendBackward">
            <summary>
            Defines send backward icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SendToBack">
            <summary>
            Defines send to back icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Settings">
            <summary>
            Defines settings icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Shapes">
            <summary>
            Defines shapes icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ShowHidePanel">
            <summary>
            Defines show/hide panel icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Signature">
            <summary>
            Defines signature icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SortAscending">
            <summary>
            Defines sort ascending icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SortAscending2">
            <summary>
            Defines sort ascending icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SortDescending">
            <summary>
            Defines sort descending icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SortDescending2">
            <summary>
            Defines sort descending icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Sorting1">
            <summary>
            Defines sorting icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Sorting2">
            <summary>
            Defines sorting icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SpellCheck">
            <summary>
            Defines spell check icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SplitHorizontal">
            <summary>
            Defines split horizontal icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SplitVertical">
            <summary>
            Defines split vertical icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Stamp">
            <summary>
            Defines stamp icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Strikethrough">
            <summary>
            Defines strikethrough icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.StrokeWidth">
            <summary>
            Defines stroke width icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Style">
            <summary>
            Defines style icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Subscript">
            <summary>
            Defines subscript icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.SubTotal">
            <summary>
            Defines sub total icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Sum">
            <summary>
            Defines sum icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Superscript">
            <summary>
            Defines superscript icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Table">
            <summary>
            Defines table icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableAlignCenter">
            <summary>
            Defines table align center icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableAlignLeft">
            <summary>
            Defines table align left icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableAlignRight">
            <summary>
            Defines table align right icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableBorderCustom">
            <summary>
            Defines table border custom icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableCell">
            <summary>
            Defines table cell icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableCellNone">
            <summary>
            Defines table cell none icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableDelete">
            <summary>
            Defines table delete icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableInsertColumn">
            <summary>
            Defines table insert column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableInsertRow">
            <summary>
            Defines table insert row icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableMerge">
            <summary>
            Defines table merge icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableNested">
            <summary>
            Defines table nested icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableOfContent">
            <summary>
            Defines table of content icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableOverwriteCells">
            <summary>
            Defines table overwrite cells icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TableUpdate">
            <summary>
            Defines table update icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TextAlternative">
            <summary>
            Defines text alternative icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TextAnnotation">
            <summary>
            Defines text annotation icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TextForm">
            <summary>
            Defines text form icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TextHeader">
            <summary>
            Defines text header icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TextThatContains">
            <summary>
            Defines text that contains icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TextWrap">
            <summary>
            Defines text wrap icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Thumbnail">
            <summary>
            Defines thumbnail icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TimelineDay">
            <summary>
            Defines timeline day icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TimelineMonth">
            <summary>
            Defines timeline month icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TimelineToday">
            <summary>
            Defines timeline today icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TimelineWeek">
            <summary>
            Defines timeline week icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TimelineWorkWeek">
            <summary>
            Defines timeline work week icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TimeZone">
            <summary>
            Defines time zone icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TopTen">
            <summary>
            Defines top 10 icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TopBottomRules">
            <summary>
            Defines top bottom rules icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Trash">
            <summary>
            Defines trash icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TwoColumn">
            <summary>
            Defines two column icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.TwoRow">
            <summary>
            Defines two row icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Underline">
            <summary>
            Defines underline icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Undo">
            <summary>
            Defines undo icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Unfiltered">
            <summary>
            Defines unfiltered icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Ungroup1">
            <summary>
            Defines ungroup icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Ungroup2">
            <summary>
            Defines ungroup icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Upload">
            <summary>
            Defines upload icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.UpperCase">
            <summary>
            Defines upper case icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.UserDefined">
            <summary>
            Defines user defined icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.VerticalAlignBottom">
            <summary>
            Defines vertical align bottom icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.VerticalAlignCenter">
            <summary>
            Defines vertical align center icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.VerticalAlignTop">
            <summary>
            Defines vertical align top icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ViewSide">
            <summary>
            Defines view side icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Volume">
            <summary>
            Defines volume icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.WebLayout">
            <summary>
            Defines web layout icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.Week">
            <summary>
            Defines week icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ZoomIn">
            <summary>
            Defines zoom in icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ZoomOut">
            <summary>
            Defines zoom out icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconName.ZoomToFit">
            <summary>
            Defines zoom to fit icon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.IconSize">
            <summary>
            Defines the icons to render with predefined size.
            IconSize will be included only when the icons will render using <see cref="P:Syncfusion.Blazor.Buttons.SfIcon.Name"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconSize.Small">
            <summary>
            Denotes the smaller size of icon.
            The icon size will be `8px`.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconSize.Medium">
            <summary>
            Denotes the default size of icon.
            The icon size will be `16px`.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconSize.Large">
            <summary>
            Denotes the larger size of icon.
            The icon size will be `24px`.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfIcon">
            <summary>
            SfIcon component used to render the predefined syncfusion icons using <see cref="P:Syncfusion.Blazor.Buttons.SfIcon.Name"/> property or custom font icons using <see cref="P:Syncfusion.Blazor.Buttons.SfIcon.IconCss"/> property.
            </summary>
            <example>
            The below example shows loading syncfusion icon using <see cref="P:Syncfusion.Blazor.Buttons.SfIcon.Name"/> property.
            <code><![CDATA[
            <SfIcon Name="IconName.Italic" Title="Italic"></SfIcon>
            ]]></code>
            The below example shows loading syncfusion icon using <see cref="P:Syncfusion.Blazor.Buttons.SfIcon.IconCss"/> property.
            <code><![CDATA[
            <SfIcon IconCss="e-icons e-bold" Title="Bold"></SfIcon>
            ]]></code>
            The below example shows loading third party icon using <see cref="T:Syncfusion.Blazor.Buttons.SfIcon"/> component.
            Plus icon were loaded from open iconic, by defining the open iconic font CSS.
            <code><![CDATA[
            <SfIcon IconCss="oi oi-plus" Title="Plus"></SfIcon>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfIcon.ChildContent">
            <exclude/>
            <summary>
            Gets or sets the child content for Icon component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfIcon.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to icon element.
            </summary>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, font size of the icon customized using <c>@attributes</c> directive.
            <code><![CDATA[
            <SfIcon Name="IconName.Copy" @attributes="customAttribute"></SfIcon>
            @code{
               Dictionary<string, object> customAttribute = new Dictionary<string, object>()
               {
                   { "style", "font-size: 20px" }
               };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfIcon.IconCss">
            <summary>
            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.
            </summary>
            <value>
            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.
            </remarks>
            <example>
            In the below example custom icon is loaded using <c>IconCss</c> property.
            <code><![CDATA[
            <SfIcon IconCss="oi oi-home"></SfIcon>
            ]]></code>
            In the below example icon color is customized using <c>IconCss</c> property.
            <code><![CDATA[
            <SfIcon IconCss="oi oi-plus color-red"></SfIcon>
            <style>
                .color-red {
                   color: red; 
                }
            </style>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfIcon.Name">
            <summary>
            Gets or sets the name of the built-in syncfusion icons to render. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Buttons.IconName"/> enumeration.
            </value>
            <remarks>
            This property is used to render icons from predefined <see cref="T:Syncfusion.Blazor.Buttons.IconName"/> options. You can use <see cref="P:Syncfusion.Blazor.Buttons.SfIcon.IconCss"/> to load custom icons.
            </remarks>
            <example>
            <code><![CDATA[
            <SfIcon Name="IconName.Bold"></SfIcon>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfIcon.Size">
            <summary>
            Gets or sets the size of the icon.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Buttons.IconSize"/> enumeration that specifies the size of the icon. 
            The default value is <see cref="F:Syncfusion.Blazor.Buttons.IconSize.Medium"/>
            </value>
            <remarks>
            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref="P:Syncfusion.Blazor.Buttons.SfIcon.Name"/> property.
            </remarks>
            <example>
            <code><![CDATA[
            <SfIcon Name="IconName.Paste" Size="IconSize.Large"></SfIcon>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfIcon.Title">
            <summary>
            Gets or sets title attribute for icon.
            </summary>
            <value>
            Accepts a string. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.
            </remarks>
            <example>
            <code><![CDATA[
            <SfIcon Name="IconName.Cut" Title="Cut"></SfIcon>
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfIcon.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Triggers while properties get dynamically changed in the component.
            </summary>
            <returns>System.Threading.Tasks.</returns>
            <param name="parameters"><see cref="T:Microsoft.AspNetCore.Components.ParameterView"/> parameters.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfRadioButton`1">
            <summary>
            The RadioButton is a graphical user interface element that allows you to select one option from the choices.
            It contains checked and unchecked states.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.Label">
            <summary>
            Defines the caption for the RadioButton, that describes the purpose of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition">
            <summary>
            Positions label `before`/`after` the RadioButton.
            The possible values are:
            - Before: The label is positioned to left of the RadioButton.
            - After: The label is positioned to right of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.ValueChange">
            <summary>
            Event trigger when the RadioButton state has been changed by user interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfSwitch`1">
            <summary>
            The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.OnLabel">
            <summary>
            Specifies a text that indicates the Switch is in checked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.OffLabel">
            <summary>
            Specifies a text that indicates the Switch is in unchecked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.ValueChange">
            <summary>
            Triggers when Switch state has been changed by user interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Adaptors">
            <summary>
            Specifies the data adaptors.
            <list type="bullet">
            <item>
            <term>BlazorAdaptor</term>
            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>
            </item>
            <item>
            <term>ODataAdaptor</term>
            <description>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </description>
            </item>
            <item>
            <term>ODataV4Adaptor</term>
            <description>
            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services
            </description>
            </item>
            <item>
            <term>WebApiAdaptor</term>
            <description>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </description>
            </item>
            <item>
            <term>UrlAdaptor</term>
            <description>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </description>
            </item>
            <item>
            <term>RemoteSaveAdaptor</term>
            <description>
            Remote Save Adaptor is used for binding JSON data.
            It interacts with remote services only for CRUD operations.
            </description>
            </item>
            <item>
            <term>CustomAdaptor</term>
            <description>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component
            extended from DataAdaptor class.
            </description>
            </item>
            <item>
            <term>JsonAdaptor</term>
            <description>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.JsonAdaptor">
            <summary>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.BlazorAdaptor">
            <summary>
            BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.ODataAdaptor">
            <summary>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.ODataV4Adaptor">
            <summary>
            OData v4 Adaptor provies ability to consume and manipulate data from OData v4 services.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.UrlAdaptor">
            <summary>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.WebApiAdaptor">
            <summary>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.RemoteSaveAdaptor">
            <summary>
            Remote Save Adaptor is used for binding JSON data.
            It interacts with remote services only for CRUD operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.CustomAdaptor">
            <summary>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component
            extended from DataAdaptor class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Operator">
            <summary>
            Specifies the operator list used for filtering or searching operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.None">
            <summary>
            No operator is selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.Contains">
            <summary>
            Filter items by contains operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.StartsWith">
            <summary>
            Filter items by starts with operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.EndsWith">
            <summary>
            Filter items by ends with operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.Equal">
            <summary>
            Filter items by equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.NotEqual">
            <summary>
            Filter items by not-equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.GreaterThan">
            <summary>
            Filter items by greater than operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.GreaterThanOrEqual">
            <summary>
            Filter items by greater than or equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.LessThan">
            <summary>
            Filter items by less than operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.LessThanOrEqual">
            <summary>
            Filter items by less than or equal operator.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IAdaptor">
            <summary>
            Provides the members for data adaptor class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.GetName">
            <summary>
            Returns the adaptor name.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.SetRunSyncOnce(System.Boolean)">
            <summary>
            Runs the data operation synchronously.
            </summary>
            <param name="runSync">Enables synchronous data operation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessQuery(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Read query from <see cref="T:Syncfusion.Blazor.Data.Query"/> and make it understandable by
            data source.
            </summary>
            <param name="queries">Specifies the query.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessCrudResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the CRUD operation response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.PerformDataOperation``1(System.Object)">
            <summary>
            Performs data operation. If its a remote data source then make a server request.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.IsRemote">
            <summary>
            Returns true if data source is remote service.
            </summary>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.SetModelType(System.Type)">
            <summary>
            To get model type.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.GetModelType">
            <summary>
            To get model type.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Update(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending changed items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Remove(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Handles the remove operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation in dynamic objects.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Update(Syncfusion.Blazor.DataManager,System.String,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation for Dynamic objects. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.AddParams(Syncfusion.Blazor.Data.RequestOptions,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Adds additional paramerters from Query instance to server request.
            </summary>
            <param name="options"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending server request.
            </summary>
            <param name="request">Specifies the HttpRequestMessage instance.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessBatchResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation batch response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.AdaptorBase">
            <summary>
            Base class for all data adaptors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.AdaptorBase.DataManager">
            <summary>
            Specifies the data manager instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.AdaptorBase.RunSyncOnce">
            <summary>
            When true, runs data operation synchronously. Applicable only for BlazorAdaptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.SetRunSyncOnce(System.Boolean)">
            <summary>
            Runs the data operation synchronously.
            </summary>
            <param name="runSync">Enables synchronous data operation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.GetName">
            <summary>
            Returns the adaptor name.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.IsRemote">
            <summary>
            Returns true if data source is remote service.
            </summary>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.SetModelType(System.Type)">
            <summary>
            To get model type.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.GetModelType">
            <summary>
            To get model type.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessQuery(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Read query from <see cref="T:Syncfusion.Blazor.Data.Query"/> and make it understandable by
            data source.
            </summary>
            <param name="queries">Specifies the query.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.PerformDataOperation``1(System.Object)">
            <summary>
            Performs data operation. If its a remote data source then make a server request.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessCrudResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the CRUD operation response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Update(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Remove(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Handles the remove operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Insert(Syncfusion.Blazor.DataManager,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation in dynamic objects.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Update(Syncfusion.Blazor.DataManager,System.String,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BatchUpdate(Syncfusion.Blazor.DataManager,System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation for Dynamic objects. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.AddParams(Syncfusion.Blazor.Data.RequestOptions,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Adds additional paramerters from Query instance to server request.
            </summary>
            <param name="options"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending server request.
            </summary>
            <param name="request">Specifies the HttpRequestMessage instance.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessBatchResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation batch response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RemoteOptions">
            <summary>
            Defines internal adaptor options.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.From">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.RequestType">
            <summary>
            Gets or sets the request type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.SortBy">
            <summary>
            Gets or sets the sort field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Select">
            <summary>
            Gets or sets the select field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Skip">
            <summary>
            Gets or sets the records to skip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Group">
            <summary>
            Gets or sets the group criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Take">
            <summary>
            Gets or sets the records to take.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Search">
            <summary>
            Gets or sets the search string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Count">
            <summary>
            Gets or sets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Where">
            <summary>
            Gets or sets the filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Aggregates">
            <summary>
            Gets or sets the aggregate details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Expand">
            <summary>
            Gets or sets the navigation table.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Accept">
            <summary>
            Gets or sets the accept type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.MultipartAccept">
            <summary>
            Gets or sets the multipart type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Batch">
            <summary>
            Gets or sets the batch value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ChangeSet">
            <summary>
            Gets or sets the change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchPre">
            <summary>
            Gets or sets the batch prefix.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ContentId">
            <summary>
            Gets or sets the content id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchContent">
            <summary>
            Gets or sets the batch content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ChangeSetContent">
            <summary>
            Gets or sets the change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchChangeSetContentType">
            <summary>
            Gets or sets the batch change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.UpdateType">
            <summary>
            Gets or sets the http update type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.LocalTime">
            <summary>
            Enables local time conversion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Apply">
            <summary>
            Gets or sets the odatav4 $apply value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.EnableODataSearchFallback">
            <summary>
            Enable odatav4 search by $filter.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.Equals(System.Object)">
            <summary>
            Compares the specified instance and the current instance of RemoteOptions
                for value equality.
            </summary>
            <param name="obj">The instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.Equals(Syncfusion.Blazor.Data.RemoteOptions)">
            <summary>
            Compares the specified instance and the current instance of RemoteOptions
                for value equality.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>int.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.op_Equality(Syncfusion.Blazor.Data.RemoteOptions,Syncfusion.Blazor.Data.RemoteOptions)">
            <summary>
            Handles equal
            </summary>
            <param name="point1">argument one</param>
            <param name="point2">argument two</param>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.op_Inequality(Syncfusion.Blazor.Data.RemoteOptions,Syncfusion.Blazor.Data.RemoteOptions)">
            <summary>
            Handles unequal
            </summary>
            <param name="point1">argument one</param>
            <param name="point2">argument two</param>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.CRUDModel`1">
            <summary>
            Defines the members of the CRUD arguments send during server request. Use this class to model
            bind request parameters while using UrlAdaptor.
            </summary>
            <typeparam name="T">Type of the data.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Action">
            <summary>
            Specifies the action initiated the request. Possible values are add, update or remove.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Table">
            <summary>
            Specifies the Table name(if any) to be updated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.KeyColumn">
            <summary>
            Specifies the primary key column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Key">
            <summary>
            Specifies the Primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Value">
            <summary>
            Specifies the modified/added record. For batch operation use Added, Changed and Deleted property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Added">
            <summary>
            Specifies the list of added records while batch editing.
            </summary>
            <remarks>The Added property will holds values on batch editing only.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Changed">
            <summary>
            Specifies the list of updated records while batch editing.
            </summary>
            <remarks>The Changed property will holds values on batch editing only.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Deleted">
            <summary>
            Specifies the list of deleted records while batch editing.
            </summary>
            <remarks>The Deleted property will holds values on batch editing only.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Params">
            <summary>
            Holds the additional parameters passed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Utils">
            <summary>
            Class holds URL and Key for batch operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Utils.Url">
            <summary>
            Specifies the batch url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Utils.Key">
            <summary>
            Specifies the batch primary key value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RequestOptions">
            <summary>
            Defines members of the request option for remote data handling.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Url">
            <summary>
            Specifies the service url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.BaseUrl">
            <summary>
            Specifies the application base url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.RequestMethod">
            <summary>
            Specifies the Http request method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Data">
            <summary>
            Specifies the data to be posted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Queries">
            <summary>
            Specifies the source query value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.ContentType">
            <summary>
            Specifies the content type. By default, application/json is used.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ApiAdaptor">
            <summary>
            Handles request and response to and from Web API created for ApiController.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.BlazorAdaptor">
            <summary>
            Handles data operation in IEnumerable data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.BlazorAdaptor.DataOperationInvoke``1(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Performs data operation.
            </summary>
            <typeparam name="T">Type of the data source item.</typeparam>
            <param name="DataSource">Data source value.</param>
            <param name="queries">Query to be processed.</param>
            <returns>DataResult.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.BlazorAdaptor.CollectChildRecords(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Performs data operation on child records.
            </summary>
            <param name="datasource">Data source value.</param>
            <param name="dm">Query to be processed.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataAdaptor">
            <summary>
            Handles request and response to and from OData service.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnPredicate(Syncfusion.Blazor.Data.WhereFilter,Syncfusion.Blazor.DataManagerRequest,System.Boolean)">
            <summary>
            Generates request filter query string from the Query value.
            </summary>
            <param name="filter">Filter criteria.</param>
            <param name="query">Query value.</param>
            <param name="requiresCast">Performs value cast. Applicable on search operation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnEachSort(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Returns sort query string based on query.
            </summary>
            <param name="queries">Query value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnEachSearch(Syncfusion.Blazor.Data.SearchFilter)">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">Search query.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSearch(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">List of filter queries.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSearch(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.Object)">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">List of filter queries.</param>
            <param name="additionParams">Additional parameters.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnCount(System.Boolean)">
            <summary>
            Returns count query string based on query.
            </summary>
            <param name="e">Request count value if it is true.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnExpand(System.Collections.Generic.List{System.String})">
            <summary>
            Returns expand query string based on query.
            </summary>
            <param name="expands">List of relational table names.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnExpand(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Returns expand query string based on query.
            </summary>
            <param name="selects">List of fields to select in relational tables.</param>
            <param name="expands">List of relational table names.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSelect(System.Collections.Generic.List{System.String})">
            <summary>
            Returns select query string based on query.
            </summary>
            <param name="selects">List of field names to select.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnDistinct(System.Collections.Generic.List{System.String})">
            <summary>
            Returns distinct query string based on query.
            </summary>
            <param name="distincts">List of field names.</param>
            <returns>string.</returns>
            <remarks>Applicable only for ODataV4 services.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.CheckDate(System.String)">
            <summary>
            Check if given value is a valid date or not.
            </summary>
            <param name="date">Input date string.</param>
            <returns>bool.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.PvtOptions">
            <summary>
            Hold private options.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.OData`1">
            <summary>
            Schema for OData service response.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataNoCount`1">
            <summary>
            Schema for OData service response with no count.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RemoteArgs">
            <summary>
            Remote arguments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.CrudResponse`1">
            <summary>
            Schema for CRUD OData service response.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataV4Adaptor">
            <summary>
            Handles request and response to and from ODataV4 service.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataV4`1">
            <summary>
            Schema for ODataV4 service response.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.UrlAdaptor">
            <summary>
            Handles request and response to and from any remote service.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.UrlResult`1">
            <summary>
            Schema for URL service response.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.WebApiAdaptor">
            <summary>
            Handles request and response to and from Web API controller.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Sort">
            <summary>
            Defines the sort descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Sort.Name">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Sort.Direction">
            <summary>
            Gets the sort direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Sort.Comparer">
            <summary>
            Gets the sort comparer
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SearchFilter">
            <summary>
            Defines members for creating search criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Fields">
            <summary>
            Collection of fields to search.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Key">
            <summary>
            Specifies the search key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Operator">
            <summary>
            Specifies the search operator. By default, contains operator will be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.IgnoreCase">
            <summary>
            Specifies that incasesensitive search to be done.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Aggregate">
            <summary>
            Defines the members of the aggregate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Aggregate.Field">
            <summary>
            Specifies the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Aggregate.Type">
            <summary>
            Specifies the aggregate type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.WhereFilter">
            <summary>
            Defines the members to build filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Field">
            <summary>
            Specifies the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IgnoreCase">
            <summary>
            Specifies that filter should be incasesensitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IgnoreAccent">
            <summary>
            Specifies that ignore accent/diacritic letters while searching.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IsComplex">
            <summary>
            When true it specifies that the filter criteria is a complex one.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Operator">
            <summary>
            Gets the filter operator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Condition">
            <summary>
            Provides the complex filter merge condition.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.value">
            <summary>
            Specifies the filter value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.predicates">
            <summary>
            Specifies the collection filter criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Merge the give collection of predicates using And condition.
            </summary>
            <param name="predicates">List of predicates.</param>
            <returns>WhereFilter.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Merge the give collection of predicates using Or condition.
            </summary>
            <param name="predicates">List of predicates.</param>
            <returns>WhereFilter.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Merge the give predicate using And condition.
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the filter operator.</param>
            <param name="value">Specifies the filter value.</param>
            <param name="ignoreCase">Performs incasesensitive filtering.</param>
            <param name="ignoreAccent">Ignores accent/diacritic letters while filtering.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Merge the give predicate using And condition.
            </summary>
            <param name="predicate">Predicate to be merged.</param>
            <returns>WhereFilter.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Merge the give predicate using Or condition.
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the filter operator.</param>
            <param name="value">Specifies the filter value.</param>
            <param name="ignoreCase">Performs incasesensitive filtering.</param>
            <param name="ignoreAccent">Ignores accent/diacritic letters while filtering.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Merge the give predicate using Or condition.
            </summary>
            <param name="predicate">Predicate to be merged.</param>
            <returns>WhereFilter.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DefaultAdaptor">
            <summary>
            Provide adaptor information which sends to client side.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataResult">
            <summary>
            Defines the members of the data manager operation result.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataResult`1">
            <summary>
            Defines the members of the data manager operation result.
            </summary>
            <typeparam name="T">Type of the data source element.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Result">
            <summary>
            Gets the result of the data operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Count">
            <summary>
            Gets the total count of the records in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Aggregates">
            <summary>
            Gets the aggregate result based on the aggregate query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.FilteredRecords">
            <summary>
            Gets the filtered records.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.BaseAdaptor">
            <summary>
            Handles custom adaptor logic.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Group`1">
            <summary>
            Defines the members of the grouped record.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.GroupGuid">
            <summary>
            Unique identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Level">
            <summary>
            Specifies the level of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.ChildLevels">
            <summary>
            Specifies the count of child if any.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Records">
            <summary>
            Specifies the ungrouped records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Key">
            <summary>
            Specifies the group key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.CountItems">
            <summary>
            Specifies the count of items in this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Items">
            <summary>
            Specifies the items of the group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Aggregates">
            <summary>
            Specifies the aggregates of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Field">
            <summary>
            Specifies the field value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.HeaderText">
            <summary>
            Specifies the header text of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.ForeignKey">
            <summary>
            Specifies the foreign key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Result">
            <summary>
            Specifies the result.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.GroupedData">
            <summary>
            Specifies the grouped data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IDataAdaptor">
            <summary>
            Interface for Data adaptors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataManagerTypeConverter">
            <summary>
            Handles the datamanager converter.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataUtil">
            <summary>
            Provides utility method used by data manager.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetUrl(System.String,System.String,System.String)">
            <summary>
            Resolves the given base url and relative url to generate absolute url. And merge query string if any.
            </summary>
            <param name="baseUrl">Base address url.</param>
            <param name="relativeUrl">Relative url.</param>
            <param name="queryParams">Query string.</param>
            <returns>string - absolute url.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetKeyValue(System.String,System.Object)">
            <summary>
            Gets the property value with the given key.
            </summary>
            <param name="key">Property name.</param>
            <param name="value">Source object.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.ToQueryParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts dictionary of key/value pair to query string.
            </summary>
            <param name="Params">Input dictionary value.</param>
            <returns>string - Query string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetDistinct``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts dictionary of key/value pair to query string.
            </summary>
            <param name="dataSource">Collection of Data source.</param>
            <param name="propertyName">property name which is need to distincts </param>.
            <returns>IEnumerable Distinct collections</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetValue(System.Int32,System.Object)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.Group``1(System.Collections.IEnumerable,System.String,System.Collections.Generic.List{Syncfusion.Blazor.Data.Aggregate},System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            Groups the given data source with the field name.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="jsonArray">Input data source.</param>
            <param name="field">Specifies the group by field name.</param>
            <param name="aggregates">Aggregate details to aggregate grouped records.</param>
            <param name="level">Level of the group. For parent group it is 0.</param>
            <param name="format">Specifies the format and handler method to perform group by format.</param>
            <param name="isLazyLoad">Specifies the isLazyLoad property as true to handle lazy load grouping.</param>
            <param name="isLazyGroupExpandAll">Specifies the isLazyGroupExpandAll as true to perform expand all for lazy load grouping.</param>
            <returns>IEnumerable - Grouped record.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.PerformAggregation(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Aggregate})">
            <summary>
            Performs aggregation on the given data source.
            </summary>
            <param name="jsonData">Input data source.</param>
            <param name="aggregates">List of aggregate to be calculated.</param>
            <returns>Dictionary of aggregate results.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetVal(System.Collections.IEnumerable,System.Int32,System.String)">
            <summary>
            Gets the property value from list of object.
            </summary>
            <param name="jsonData">List of object.</param>
            <param name="index">Index of the item to be processed.</param>
            <param name="field">Property name to get value.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetGroupValue(System.String,System.Object)">
            <summary>
            Gets the property value from object.
            </summary>
            <param name="nameSpace">Property name to be accessed.</param>
            <param name="from">Source object.</param>
            <returns>object - property value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetObject(System.String,System.Object)">
            <summary>
            Gets the property value from object.
            </summary>
            <param name="nameSpace">Property name to be accessed.</param>
            <param name="from">Source object.</param>
            <returns>object - property value.</returns>
            <remarks>For accessing complex/nested property value, given the nameSpace with field names delimited by dot(.).</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetEnumType(System.String,System.Type)">
            <summary>
            Returns enum column type.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetFormattedValue(System.Object,System.String)">
            <summary>
            Formats the given value.
            </summary>
            <param name="value">Value to be formatted.</param>
            <param name="format">Format string.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetDynamicValue(System.Dynamic.DynamicObject,System.String)">
            <summary>
            Gets the property value from the DynamicObject.
            </summary>
            <param name="obj">Input dynamic object.</param>
            <param name="name">Property name to get.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetExpandoValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Gets the property value from the ExpandoObject.
            </summary>
            <param name="obj">Input Expando object.</param>
            <param name="name">Property name to get.</param>
            <returns>object.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataMemberBinder">
            <summary>
            Defines the data member binder for setting dynamic object property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicQueryableExtensions">
            <summary>
            Provides extension methods for Queryable source.
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable();. </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as,. </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DynamicQueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,Syncfusion.Blazor.Data.FilterBehavior,System.Boolean,System.Type,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression.
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source">Data source.</param>
            <param name="paramExpression">Parameter expression to merge.</param>
            <param name="propertyName">Property name to be filtered.</param>
            <param name="constValue">Const value.</param>
            <param name="filterType">Filter operator type.</param>
            <param name="filterBehaviour">Specifies the filter behavior.</param>
            <param name="isCaseSensitive">Performs the case sensitive if true.</param>
            <param name="sourceType">Specifies the data source element type.</param>
            <param name="columnType">Specifies the current field type.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Data.EnumerableExtensions">
            <summary>
            Provides enumerable extension.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.EnumerableOperation">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.Execute(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="manager">Query to be executed.</param>
            <returns>IEnumerable - resultant records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformGrouping(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PredicateBuilder(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates predicate with the given filter criteria.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Value can be either AND or OR.</param>
            <param name="paramExpression">Parameter expression.</param>
            <param name="type">Specifies the source type.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IEnumerable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.GetDataType(System.Collections.IEnumerable,System.Type,System.String)">
            <summary>
            Returns data type.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.GetColumnType(System.Collections.IEnumerable,System.String,System.Type)">
            <summary>
            Returns column type.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSkip(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformTake(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IHttpHandler">
            <summary>
            Interface for http handler used by data manager.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpHandlerBase">
            <summary>
            Bas class for http handler used by data manager.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.HttpHandlerBase.GetClient">
            <summary>
            Returns http client.
            </summary>
            <returns>HttpClient</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpHandler">
            <summary>
            Handles HttpClient instance creation. Also build and sends HttpMessages request.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpMessageContent">
            <summary>
            Derived HttpMessageContent class to prepare or modify the multipart type requests.
            Reference from the https://github.com/aspnet/AspNetWebStack/blob/master/src/System.Net.Http.Formatting/HttpMessageContent.cs to prepare a HttpContent extension.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.FilterType">
            <summary>
            Specifies the FilterType to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.LessThan">
            <summary>
            Performs LessThan operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.LessThanOrEqual">
            <summary>
            Performs LessThan Or Equal operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Equals">
            <summary>
            Checks Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.NotEquals">
            <summary>
            Checks for Not Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for Greater Than or Equal on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.GreaterThan">
            <summary>
            Checks for Greater Than on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.StartsWith">
            <summary>
            Checks for StartsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.EndsWith">
            <summary>
            Checks for EndsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Contains">
            <summary>
            Checks for Contains on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Undefined">
            <summary>
            Returns invalid type
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.FilterBehavior">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ColumnFilter">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ColumnFilter.Value">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ColumnFilter.DisplayText">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortColumn">
            <summary>
            Defines the sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortColumn.ColumnName">
            <summary>
            Specifies the column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortColumn.SortDirection">
            <summary>
            Specifies the sort direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicClass">
            <summary>
            Defines the dynamic class.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicProperty">
            <summary>
            Specifies the dynamic property.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.GroupContext">
            <summary>
            Defines the group context class.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ListSortDirection">
            <summary>
             Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ListSortDirection.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ListSortDirection.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortOrder">
            <summary>
            Sepcifies the sort order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.None">
            <summary>
            No sort order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortedColumn">
            <summary>
            Defines the sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortedColumn.Field">
            <summary>
            Specifies the field to sort.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortedColumn.Direction">
            <summary>
            Specifies the sort order.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortedColumn.Comparer">
            <summary>
            Gets the sort comparer
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.IsComplexType(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Blazor.Data.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Data.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Blazor.Data.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'.
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'.
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image).</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image).
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'.
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image).</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Query">
            <summary>
            Provides methods to generate query which can be executed against data source using <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/>.
            </summary>
            <remarks>Methods in this class are chainable.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Queries">
            <summary>
            Provides various method that allow user to generate query.
            These queries is used by <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> to process given data source and returns resultant records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Key">
            <summary>
            Specifies the primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.FKey">
            <summary>
            Specifies the foreign key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.FromTable">
            <summary>
            Specifies the table name.
            </summary>
            <remarks>Table name is used by the remote adaptors.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Lookups">
            <summary>
            Specifies the lookup table names.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Expands">
            <summary>
            Specifies the relation table/resource names.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SortedColumns">
            <summary>
            Gets the sort column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.GroupedColumns">
            <summary>
            Gets the group column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SubQuerySelector">
            <summary>
            Specifies the sub query details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SubQuery">
            <summary>
            Specifies the sub query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IsChild">
            <summary>
            Specifies the presence of child.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Params">
            <summary>
            Gets the additional parameters to be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IsCountRequired">
            <summary>
            Specifies that count value is required in responses from remote services.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.DataManager">
            <summary>
            Gets the data manager instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Distincts">
            <summary>
            Gets the list of distinct values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IdMapping">
            <summary>
            Gets the id mapping value used for child data source process.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.From(System.String)">
            <summary>
            Adds the table or resource name.
            </summary>
            <param name="tableName">Table name.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Page(System.Int32,System.Int32)">
            <summary>
            Sets the current page index and page size.
            </summary>
            <param name="pageIndex">Specifies the current page.</param>
            <param name="pageSize">Specifies the page size.</param>
            <returns>Query.</returns>
            <remarks>Use this method to get chunk of records from the given data source.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Take(System.Int32)">
            <summary>
            Sets the take index.
            </summary>
            <param name="pageSize">Maximum index of the record.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Skip(System.Int32,System.Int32)">
            <summary>
            Sets the current page index and page size.
            </summary>
            <param name="pageIndex">Specifies the current page.</param>
            <param name="pageSize">Specifies the page size.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Skip(System.Int32)">
            <summary>
            Sets the skip index.
            </summary>
            <param name="skip">Number of records to skip.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Range(System.Int32,System.Int32)">
            <summary>
            Gets the range of records.
            </summary>
            <param name="start">Range start index.</param>
            <param name="end">Range end index.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Select(System.Collections.Generic.List{System.String})">
            <summary>
            Selects the given fields from data source.
            </summary>
            <param name="fieldNames">List of fields to select.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the operator.</param>
            <param name="value">Specifies the filter value.</param>
            <param name="ignoreCase">Performs case sensitive filter.</param>
            <param name="ignoreAccent">Ignore accents/diacritic words during filtering.</param>
            <returns>Query.</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="predicate">Specifies the predicate to be used.</param>
            <returns>Query.</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="predicates">Specifies the list of predicates to be used.</param>
            <returns>Query</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Search(System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the records with the given query.
            </summary>
            <param name="searchKey">Specifies the search key.</param>
            <param name="fieldNames">Specifies the field names.</param>
            <param name="operator">Specifies the search operator.</param>
            <param name="ignoreCase">Performs case sensitive search.</param>
            <param name="ignoreAccent">Ignore accents/diacritic words during searching.</param>
            <returns></returns>
            <remarks>Multiple Search method can be chained to create complex search criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.RequiresCount">
            <summary>
            Specifies that count is expected in remote service response.
            </summary>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Sort(System.String,System.String)">
            <summary>
            Sorts the data source.
            </summary>
            <param name="name">Specifies the sort name.</param>
            <param name="direction">Specifies the sort direction.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Sort(System.String,System.String,System.Object)">
            <summary>
            Sorts the data source.
            </summary>
            <param name="name">Specifies the sort name.</param>
            <param name="direction">Specifies the sort direction.</param>
            <param name="comparer">Specifies the comparer object.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.Collections.Generic.List{System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Groups the data source.
            </summary>
            <param name="fieldNames">Specifies the column names to group.</param>
            <param name="groupFormat">Specifies the group format.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.String)">
            <summary>
            Groups the data source.
            </summary>
            <param name="fieldName">Specifies the column name.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.String,System.String)">
            <summary>
            Groups the data source.
            </summary>
            <param name="fieldName">Specifies the column name.</param>
            <param name="columnFormat">Specifies the column format.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Aggregates(System.String,System.String)">
            <summary>
            Performs the aggregate operation in the aggregate type.
            </summary>
            <param name="field">Specifies the field name.</param>
            <param name="type">Specifies the aggregate type.</param>
            <returns>Query.</returns>
            <remarks>Multiple aggregation can be performed by chaining Aggregates method.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)">
            <summary>
            Adds additional parameters to the HTTP request sent by <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/>.
            </summary>
            <param name="key">Key value.</param>
            <param name="value">Additional parameter value.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Distinct(System.Collections.Generic.List{System.String})">
            <summary>
            Gets the distinct records of the given field from the data source.
            </summary>
            <param name="fieldNames">List of field names.</param>
            <returns>Query.</returns>
            <remarks>Applicable only for ODataV4Adaptor.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Expand(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the relational tables to be eager loaded.
            </summary>
            <param name="fieldNames">List of relational table names.</param>
            <returns>Query.</returns>
            <remarks>Given table names should be eager loaded. Lazy loading is not supported.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Clone">
            <summary>
            Performs deep cloning of the given Query.
            </summary>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.IsEqual(Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.Data.Query)">
            <summary>
            Compares given Query instance by value.
            </summary>
            <param name="source">Source Query instance.</param>
            <param name="destination">Destination Query instance.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryConverter">
            <summary>
            Converts Query class to and from string respectively.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryableExtensions">
            <summary>
            Provides extension methods for Queryable source.
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable();. </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as,. </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderBy(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetLambdaWithComplexPropertyNullCheck(System.Collections.IEnumerable,System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates lambda expression for the complex properties.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="paramExpression"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined.
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer defined.
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderByDescending(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generate expression from simple and complex property.
            </summary>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
            <param name="paramExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para></para>
            <code lang="C#">        DataClasses1DataContext db = new
            DataClasses1DataContext();
                    var orders = db.Orders.Skip(0).Take(100).ToList();
                    var queryable = orders.AsQueryable();
                    var parameter =
            queryable.Parameter();</code>
            <para></para>
            <para></para>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,Syncfusion.Blazor.Data.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression.
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="propertyName"></param>
            <param name="constValue"></param>
            <param name="filterType"></param>
            <param name="filterBehaviour"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single property value.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType">Type.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Select``1(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single and multiple property value.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType">Type.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="paramExp"></param>
            <param name="propertyName"></param>
            <param name="expressionFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetQueryableSumMethod(System.Type)">
            <summary>
            Get the exact Sum method from Queryable based on body type.
            </summary>
            <param name="bodyType"></param>
            <returns>exact method info.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetQueryableAverageMethod(System.Type)">
            <summary>
            Get the exact Average method from Queryable based on body type.
            </summary>
            <param name="bodyType"></param>
            <returns>exact method info.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query for the IComparer defined.
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenByDescending query for the IComparer defined.
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression.
            <para></para>
            <code lang="C#">            var nw = new Northwind(@&quot;Data Source =
            Northwind.sdf&quot;);
                        IQueryable queryable = nw.Orders.AsQueryable();
                        var filters = queryable.Where(&quot;ShipCountry&quot;,
            &quot;z&quot;, FilterType.Contains);
                        foreach (Orders item in filters)
                        {
                            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
                        }</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName">Name of the property.</param>
            <param name="value"></param>
            <param name="filterType"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda.
            <para></para>
            <para></para>
            <para></para>DataClasses1DataContext db = new DataClasses1DataContext();.
            <para></para>            var orders = db.Orders.Skip(0).Take(100).ToList();.
            <para></para>            var queryable = orders.AsQueryable();.
            <para></para>            var parameter =
            queryable.Parameter(&quot;ShipCountry&quot;);.
            <para></para>            var binaryExp = queryable.Predicate(parameter,.
            <para></para>&quot;ShipCountry&quot;, &quot;USA&quot;, true);.
            <para></para>            var filteredOrders = queryable.Where(parameter,
            binaryExp);.
            <para></para>            foreach (var order in filteredOrders).
            <para></para>            {.
            <para></para>                Console.WriteLine(order);.
            <para></para>            }.
            <para></para>
            <para></para>
            <para></para>Build Predicates for Contains / StartsWith / EndsWith,.
            <para></para>
            <para></para>            IQueryable queryable = nw.Orders.AsQueryable();.
            <para></para>            var parameter = queryable.Parameter();.
            <para></para>            var exp1 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);.
            <para></para>            var exp2 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);.
            <para></para>            var andExp = exp2.OrPredicate(exp1);.
            <para></para>            var filters = queryable.Where(parameter, andExp);.
            <para></para>            foreach (Orders item in filters).
            <para></para>            {.
            <para></para>                Console.WriteLine(&quot;{0}/{1}&quot;,
            item.OrderID, item.ShipCountry);.
            <para></para>            }.
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="predicateExpression"></param>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryableOperation">
            <summary>
            DataOperation class that performs data operation in IQueryable type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.Execute``1(System.Linq.IQueryable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="manager">Query to be executed.</param>
            <returns>IQueryable - resultant records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformGrouping``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQueryable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQueryable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSkip``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformTake``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSearching``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IQueryable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformFiltering``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IQueryable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSelect(System.Linq.IQueryable,System.Collections.Generic.List{System.String})">
            <summary>
            Selects the fields from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="select">Fields to select.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSelect``1(System.Linq.IQueryable,System.Collections.Generic.List{System.String})">
            <summary>
            Selects the fields from data source.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="dataSource">Input data source.</param>
            <param name="select">Fields to select.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortDescription">
            <summary>
             Defines the direction and the property name to be used as the criteria for
             sorting a collection.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.#ctor(System.String,Syncfusion.Blazor.Data.ListSortDirection)">
            <summary>
            Initializes a new instance of the System.ComponentModel.SortDescription structure.
            </summary>
            <param name="propertyName">The name of the property to sort the list by.</param>
            <param name="direction">The sort order.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.op_Inequality(Syncfusion.Blazor.Data.SortDescription,Syncfusion.Blazor.Data.SortDescription)">
            <summary>
            Compares two System.ComponentModel.SortDescription objects for value inequality.
            </summary>
            <param name="sd1">The first instance to compare.</param>
            <param name="sd2">The second instance to compare.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.op_Equality(Syncfusion.Blazor.Data.SortDescription,Syncfusion.Blazor.Data.SortDescription)">
            <summary>
            Compares two System.ComponentModel.SortDescription objects for value equality.
            </summary>
            <param name="sd1">The first instance to compare.</param>
            <param name="sd2">The second instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortDescription.Direction">
            <summary>
            Gets or sets a value that indicates whether to sort in ascending or descending
                order.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortDescription.PropertyName">
            <summary>
            Gets or sets the property name being used as the sorting criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.Equals(System.Object)">
            <summary>
            Compares the specified instance and the current instance of System.ComponentModel.SortDescription
                for value equality.
            </summary>
            <param name="obj">The System.ComponentModel.SortDescription instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.Equals(Syncfusion.Blazor.Data.SortDescription)">
            <summary>
            Compares the specified instance and the current instance of System.ComponentModel.SortDescription
                for value equality.
            </summary>
            <param name="other">The System.ComponentModel.SortDescription instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>int.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.BaseComponent">
            <summary>
            A Base Component for all the Syncfusion Blazor UI components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.LocaleText">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.ID">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.IsRendered">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.ModelType">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataManager">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.TemplateClientChanges">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.UniqueId">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataContainer">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataHashTable">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.OnInitRenderAsync">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.DataBind(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Trigger(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.UpdateModel(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.ErrorHandling(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.DataProcess(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Insert(System.String,System.String,System.Int32,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Update(System.String,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Remove(System.String,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.BatchUpdate(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.UpdateTemplate(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DataManager">
            <summary>
            The DataManager is a data management component used for performing data operations in applications.
            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.ServiceProvider">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BaseAdaptor">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.HttpClientInstance">
            <summary>
            Specifies the HttpClient instance to be used  by DataManager.
            </summary>
            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Url">
            <summary>
            Specifies the endpoint URL. DataManager requests this URL when data is needed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.AdaptorInstance">
            <summary>
            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.
            </summary>
            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.
            Injecting services into custom adaptor class, is not supported while using this approach.
            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Adaptor">
            <summary>
            Gets or sets the data adaptor to be used by DataManager.
            <list type="bullet">
            <item>
            <term>BlazorAdaptor</term>
            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>
            </item>
            <item>
            <term>ODataAdaptor</term>
            <description>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </description>
            </item>
            <item>
            <term>ODataV4Adaptor</term>
            <description>
            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services
            </description>
            </item>
            <item>
            <term>WebApiAdaptor</term>
            <description>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </description>
            </item>
            <item>
            <term>UrlAdaptor</term>
            <description>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </description>
            </item>
            <item>
            <term>RemoteSaveAdaptor</term>
            <description>
            Remote Save Adaptor is used for binding JSON data.
            It interacts with remote services only for CRUD operations.
            </description>
            </item>
            <item>
            <term>CustomAdaptor</term>
            <description>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component
            extended from DataAdaptor class.
            </description>
            </item>
            <item>
            <term>JsonAdaptor</term>
            <description>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DataAdaptor">
            <summary>
            Holds adaptor instance.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DotNetObjectRef">
            <summary>
            Holds dotnet instance.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.InsertUrl">
            <summary>
            Specifies the insert URL.
            </summary>
            <remarks>Applicable for remote adaptors.
            When Insert method is called, request will be made to InsertUrl.
            If InsertUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RemoveUrl">
            <summary>
            Specifies the remove URL.
            </summary>
            <remarks>Applicable for remote adaptors.
            When Remove method is called, request will be made to RemoveUrl.
            If RemoveUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.UpdateUrl">
            <summary>
            Specifies the update URL.
            </summary>
            <remarks>Applicable for remote adaptors.
            When Update method is called, request will be made to UpdateUrl.
            If UpdateUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CrudUrl">
            <summary>
            Specifies the CRUD URL.
            </summary>
            <remarks>Applicable for remote adaptors.
            When Insert, Remove or Update method is called, request will be made to CrudUrl.
            If CrudUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BatchUrl">
            <summary>
            Specifies the batch url.
            </summary>
            <remarks>Applicable for remote adaptors.
            When SaveChanges method is called, request will be made to BatchUrl.
            If BatchUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Json">
            <summary>
            Specifies the IEnumerable collection. This data could be queried and manipulated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Headers">
            <summary>
            Specifies the key/value pair of headers.
            </summary>
            <remarks>
            Use Headers to add any custom headers to the request made by DataManager.
            Users can also send authentication bearer token using Headers property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Accept">
            <summary>
            Specifies the accept type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Data">
            <summary>
            Specifies the IEnumerale data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.TimeTillExpiration">
            <summary>
            Specifies the time limit to clear the cached data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CachingPageSize">
            <summary>
            Specifies the caching page size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.EnableCaching">
            <summary>
            Enables data caching.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RequestType">
            <summary>
            Specifies the request type for sending data fetching.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Key">
            <summary>
            Specifies the primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CrossDomain">
            <summary>
            When true, then indicates that the request is a cross-domain request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Jsonp">
            <summary>
            Specifies the jsonp request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DataType">
            <summary>
            Specifies the data type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Offline">
            <summary>
            Enables offline mode in datamanager.
            </summary>
            <remarks>
            Applicable for remote data source. If offline is true then initial request will be made to fetch
            data. Further actions will be handled at the in-memory data and no more request will be made to the service.
            Cached data is stored in the JSON property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RequiresFormat">
            <summary>
            Sepcifies requires format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.guid">
            <summary>
            unique identifier.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.UniqueGuid">
            <summary>
            unique identifier
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Parent">
            <summary>
            Parent component of DataManager.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BaseParent">
            <summary>
            Parent component of DataManager.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.UriHelper">
            <summary>
            Gets navigation manager to get base url.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BaseUri">
            <summary>
            Gets the Base URL.
            </summary>
            <remarks>BaseUri will be used to get absolute of Url, InsertUrl, UpdateUrl and RemoveUrl properties.</remarks>
        </member>
        <member name="F:Syncfusion.Blazor.DataManager.HttpHandler">
            <summary>
            Specifies the http client handler.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ShouldSerializeJson">
            <summary>
            If returns true, Json property will be serialized.
            </summary>
            <returns>bool.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQuery``1(Syncfusion.Blazor.Data.Query)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class.</typeparam>
            <param name="query">Query class which will be executed against data source.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQueryAsync``1(Syncfusion.Blazor.Data.Query)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class.</typeparam>
            <param name="query">Query class which will be executed against data source.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQuery``1(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class</typeparam>
            <param name="queries">Query class which will be executed against data source.</param>
            <returns>Task</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQueryAsync``1(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class</typeparam>
            <param name="queries">Query class which will be executed against data source.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending http request.
            </summary>
            <param name="request">HttpRequestMessage instance.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Insert``1(System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Performs the new item add operation.
            </summary>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.InsertAsync``1(System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Performs the new item add operation.
            </summary>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Update``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Performs the update operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending changed items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated.</param>
            <returns>object.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.UpdateAsync``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Performs the update operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending changed items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Remove``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Performs the remove operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <returns>object.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.RemoveAsync``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Performs the remove operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.SaveChanges``1(System.Object,System.Object,System.Object,System.String,System.Nullable{System.Int32},System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Performs the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query class instance.</param>
            <param name="Original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.SaveChangesAsync``1(System.Object,System.Object,System.Object,System.String,System.Nullable{System.Int32},System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Performs the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query class instance.</param>
            <param name="Original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Dispose">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.DataManagerRequest">
            <summary>
            Defines the members of the query.
            </summary>
            <remarks>DataManagerRequest is used to model bind posted data at server side.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Skip">
            <summary>
            Specifies the records to skip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Take">
            <summary>
            Specifies the records to take.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.antiForgery">
            <summary>
            Specifies the anti-forgery key.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.RequiresCounts">
            <summary>
            Sepcifies that the count is required in response.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Table">
            <summary>
            Specifies the table name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.IdMapping">
            <summary>
            Specifies the parent id mapping value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Group">
            <summary>
            Specifies the grouped column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Select">
            <summary>
            Specifies the select column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Expand">
            <summary>
            Specifies the relational table names to be eagerloaded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Sorted">
            <summary>
            Speccifies the sort criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Search">
            <summary>
            Specifies the search criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Where">
            <summary>
            Specifies the filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Aggregates">
            <summary>
            Specifies the aggregate details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Params">
            <summary>
            Specifies additional parameters.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Distinct">
            <summary>
            Specifies the field names to find distinct values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.GroupByFormatter">
            <summary>
            Holds field and format method to handle group by format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.ServerSideGroup">
            <summary>
            Specifies that perform in-built grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.RequiresFilteredRecords">
            <summary>
            Sepcifies that the filtered records is required in response.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.LazyLoad">
            <summary>
            Specifies that perform lazy load grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.LazyExpandAllGroup">
            <summary>
            Specifies that to perform expand all for lazy load grouping.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataAdaptor">
            <summary>
            Abstract class for Data adaptors.
            </summary>
            <remarks>
            Extend DataAdaptor component while creating custom adaptor component. DataAdaptor component is extended from
            <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase"></see> so that
            services can be accessed from <see cref="P:Microsoft.AspNetCore.Components.OwningComponentBase.ScopedServices"/> property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataAdaptor`1">
            <summary>
            Abstract class for Data adaptors.
            </summary>
            <remarks>
            Extend DataAdaptor{T} component while creating custom adaptor component. DataAdaptor{T} component is extended from
            <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase`1"></see> so that
            services can be accessed from <see cref="P:Microsoft.AspNetCore.Components.OwningComponentBase`1.Service"/> property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataOperations">
            <summary>
            DataOperation class that performs data operation in IEnumerable and IQueryable type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="query">Query to be executed.</param>
            <returns>IEnumerable - resultant records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IEnumerable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute``1(System.Collections.Generic.IEnumerable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="query">Query to be executed.</param>
            <returns>IEnumerable - resultant records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSelect(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Selected the given field names alone from the data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="select">List of fields to select.</param>
            <returns>IEnumerale.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IEnumerable - filtered records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute``1(System.Linq.IQueryable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="query">Query to be executed.</param>
            <returns>IQueryable - resultant records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IQueryable - searched records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IQueryable - filtered records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSelect``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Selected the given field names alone from the data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="select">List of fields to select.</param>
            <returns>IQueryable.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.DynamicObjectOperation">
            <summary>
            DataOperation class that performs data operation in DynamicObject type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformDataOperations(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="DataSource">Input data source.</param>
            <param name="queries">Query to be executed against data source.</param>
            <returns>IEnumerable - resultant records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformSorting(System.Linq.IQueryable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the given data source.
            </summary>
            <param name="dataSource">Input data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQuerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Condition to merge two filter criteria.</param>
            <param name="columnTypes">Type collection of each property in data source.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter},System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
            <param name="columnTypes">Type collection of each property in data source.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PredicateBuilder(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Generates predicate from the filter criteria.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Condition to merge two filter criteria.</param>
            <param name="paramExpression">Parameter expression.</param>
            <param name="columnTypes">Type collection of each property in data source.</param>
            <returns>Expression.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.isDiagramRendered">
            <summary>
            This member is used only to prevent raising JS interop call for dependent controls (i.e. overview) before rendered the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.LocaleText">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.ID">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.ModelType">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataManager">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.TemplateClientChanges">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.UniqueId">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataContainer">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataHashTable">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.OnInitRenderAsync">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.DataBind(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.Trigger(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.UpdateModel(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.DataProcess(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.UpdateTemplate(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.EventData">
            <summary>
            Represents the event argument data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfDataBoundComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfDataBoundComponent.UpdateProperty``1(System.String,``0,``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Processing the property value changes and invoking the events for two-way bindings.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Thickness.#ctor(Syncfusion.Blazor.Diagram.Thickness)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/> from the given Thickness.
            </summary>
            <param name="src">Thickness.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Thickness.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Thickness.Left">
            <summary>
            Gets or sets the left value of the thickness.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Thickness.Right">
            <summary>
            Gets or sets the right value of the thickness.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Thickness.Top">
            <summary>
            Gets or sets the top value of the thickness.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Thickness.Bottom">
            <summary>
            Gets or sets the bottom value of the thickness.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Thickness.Clone">
            <summary>
            Creates a new Thickness that is a copy of the current Thickness.
            </summary>
            <returns>Thickness</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Margin">
            <summary>
            Specifies the extra space around the outer boundaries of an element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Margin.#ctor(Syncfusion.Blazor.Diagram.Margin)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Margin"/> from the given Margin.
            </summary>
            <param name="src">Margin.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Margin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Margin"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Margin.Bottom">
            <summary>
            Gets or sets the extra space at the bottom of an element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Margin.Left">
            <summary>
            Gets or sets the extra space at the left of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Margin.Right">
            <summary>
            Gets or sets the extra space at the right of an element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Margin.Top">
            <summary>
            Gets or sets the extra space at the top of an element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Margin.Clone">
            <summary>
            Creates a new Margin that is a copy of the current Margin.
            </summary>
            <returns>Margin</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Shadow">
            <summary>
            Represents the shadow appearance of the diagram object. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                Constraints = NodeConstraints.Default | NodeConstraints.Shadow,
                Shadow = new Shadow()
                {
                    Angle = 50,
                    Color = "Blue",
                    Opacity = 0.8,
                    Distance = 20
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.#ctor(Syncfusion.Blazor.Diagram.Shadow)">
            <summary>
            Creates a new instance of the Shadow from the given Shadow.
            </summary>
            <param name="src">Shadow.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Shadow"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Angle">
            <summary>
            Gets or sets the angle of the shadow. By default, it is 45.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Color">
            <summary>
            Gets or sets the color of the shadow. By default, it is light grey.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Distance">
            <summary>
            Gets or sets the distance of the shadow. By default, it is 5px.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Opacity">
            <summary>
            Gets or sets the Opacity of the shadow. The opacity value ranges from 0 to 1. By default, it is 0.7.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.Clone">
            <summary>
            Creates a new shadow that is a copy of the current shadow. 
            </summary>
            <returns>Shadow</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GradientBrush">
            <summary>
            Defines a smooth transition from one color to the next while painting the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientBrush.#ctor(Syncfusion.Blazor.Diagram.GradientBrush)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.GradientBrush"/> from the given Gradient.
            </summary>
            <param name="src">Gradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientBrush.#ctor">
            <summary>
            Initializes a new instance of the Gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientBrush.GradientStops">
            <summary>
            Gets or sets the color and the position where the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientBrush.BrushType">
            <summary>
            Gets or sets the type of the gradient.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LinearGradientBrush">
            <summary>
            Represents the class that defines to paints the node with linear color transitions
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                // Add node
                Style = new ShapeStyle()
                {
                   Gradient = new LinearGradientBrush()
                   {
                       //Start point of linear gradient
                       X1 = 0,
                       Y1 = 0,
                       //End point of linear gradient
                       X2 = 50,
                       Y2 = 50,
                       //Sets an array of stop objects
                       GradientStops = new DiagramObjectCollection<GradientStop>()
                       {
                           new GradientStop(){ Color = "white", Offset = 0},
                           new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                       },
                   }
                },
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LinearGradientBrush.#ctor(Syncfusion.Blazor.Diagram.LinearGradientBrush)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.LinearGradientBrush"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.LinearGradientBrush"/>.
            </summary>
            <param name="src">LinearGradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LinearGradientBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LinearGradientBrush"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradientBrush.X1">
            <summary>
            Gets or sets the start point of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradientBrush.X2">
            <summary>
            Gets or sets the start point of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradientBrush.Y1">
            <summary>
            Gets or sets the endpoint of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradientBrush.Y2">
            <summary>
            Gets or sets the endpoint of the Linear gradient.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LinearGradientBrush.Clone">
            <summary>
            Creates a new object that is a copy of the current linear gradient.
            </summary>
            <returns>LinearGradient</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RadialGradientBrush">
            <summary>
            Represents the focal point that defines the beginning of the gradient and a circle that defines the endpoint of the gradient
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             // Position of the node
             OffsetX = 250,
             OffsetY = 250,
             // Size of the node
             Width = 100,
             Height = 100,
             // Add node
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RadialGradientBrush.#ctor(Syncfusion.Blazor.Diagram.RadialGradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.RadialGradientBrush"/> class.
            </summary>
            <param name="src">RadialGradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RadialGradientBrush.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.RadialGradientBrush"/> from the given RadialGradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.CX">
            <summary>
            Gets or sets the center point of the outer circle of the radial gradient. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.CY">
            <summary>
            Gets or sets the center point of the outer circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.FX">
            <summary>
            Gets or sets the center point of the inner circle of the radial gradient. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.FY">
            <summary>
            Gets or sets the center point of the inner circle of the radial gradient. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.R">
            <summary>
            Gets or sets the radius of a radial gradient
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RadialGradientBrush.Clone">
            <summary>
            Creates a new object that is the a copy of the current radial gradient
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GradientStop">
            <summary>
            Defines the different colors and the regions of color transitions. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.#ctor(Syncfusion.Blazor.Diagram.GradientStop)">
            <summary>
            Creates a new instance of the GradientStop from the given GradientStop.
            </summary>
            <param name="src">GradientStop.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.GradientStop"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Color">
            <summary>
            Gets or sets the color to be filled over the specified region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Offset">
            <summary>
            Gets or sets the position at which the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Opacity">
            <summary>
            Gets or sets the transparency level of the region.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.Clone">
            <summary>
            Creates a new object that is a copy of the current gradient stop.
            </summary>
            <returns>GradientStop</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextStyle">
            <summary>
            Represents the appearance of the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextStyle"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextStyle.#ctor(Syncfusion.Blazor.Diagram.TextStyle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextStyle"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.TextStyle"/>.
            </summary>
            <param name="src">TextShapeStyle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.Bold">
            <summary>
            Enables or disables the bold style of a text. By default, it is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.Color">
            <summary>
            Gets or sets the font color of a text. By default, the font color is black. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.FontFamily">
            <summary>
            Gets or sets the font type of a text.  By default, the font family is Arial. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.FontSize">
            <summary>
            Gets or sets the font size of a text. By default, the font size is 12px. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.Italic">
            <summary>
            Enables or disables the italic style of a text. By default, it is false. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.TextAlign">
            <summary>
            Gets or sets the alignment of the text inside the node bounds. By default, it is aligned at the center. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.TextDecoration">
            <summary>
            Gets or sets the TextDecoration which contains the effects that should be applied to the text of a TextBlock. The default value is none. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.TextOverflow">
            <summary>
            Specifies a value that indicates whether to render ellipses (...) to indicate text overflow. By default, it is wrapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.TextWrapping">
            <summary>
            Gets or sets a TextWrap to wrap the text. By default, it is WrapWithOverflow. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.WhiteSpace">
            <summary>
            Gets or sets how the white space and the new line characters  be handled. By default, it is CollapseSpace. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextStyle.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.TextStyle"/> that is a copy of the current style.
            </summary>
            <returns>TextShapeStyle</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ShapeStyle">
            <summary>
            Represents the appearance of a shape/path.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.#ctor(Syncfusion.Blazor.Diagram.ShapeStyle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/> from the given ShapeStyle.
            </summary>
            <param name="src">ShapeStyle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or path. By default, it is white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Gradient">
            <summary>
            Gets or sets the gradient effect of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Opacity">
            <summary>
            Gets or sets the transparency level of the diagram elements. By default, opacity is 1px.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeColor">
            <summary>
             Gets or sets the stroke color of the diagram elements. By default, it is black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the stroke width of the diagram elements. By default, it is 1px.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/> that is a copy of the current style.
            </summary>
            <returns>ShapeStyle</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Canvas">
            <summary>
            A canvas is used to define a plane (canvas) and arrange children according to margins.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Canvas.Measure(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Measures the minimum space that the canvas requires
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Canvas.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the child elements of the canvas
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Canvas.AlignChildBasedOnParent(Syncfusion.Blazor.Diagram.ICommonElement,Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.DiagramSize,System.Double,System.Double)">
            <summary>
            Aligns the child element based on its parent
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Canvas.AlignChildBasedOnPoint(Syncfusion.Blazor.Diagram.DiagramElement,System.Double,System.Double)">
            <summary>
            Aligns the child elements based on a point
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramContainer">
            <summary>
            The DiagramContainer is used to group related objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.#ctor(Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramContainer"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.DiagramContainer"/>.
            </summary>
            <param name="src">DiagramContainer</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramContainer"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramContainer.Padding">
            <summary>
            Gets or sets the space between the container and its immediate children.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramContainer.Children">
            <summary>
            Gets or sets the collection of child elements (Canvas, Diagram Element). 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.HasChildren">
            <summary>
            Returns a value indiciate whether the container has child elements or not
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.Measure(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Measures the minimum space that the container requires
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the container and its children
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.StretchChildren(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Stretches the child elements based on the size of the container.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.ApplyPadding(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Considers the padding of the element when measuring its desired size.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.FindChildOffsetFromCenter(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Finds the offset of the child element with respect to the container.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.Clone">
            <summary>
            Creates a new element that is a copy of the current element.
            </summary>
            <returns>DiagramContainer</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramElement">
            <summary>
            The basic UI building blocks in a diagram node or connector are diagram elements. To create a node or connector, multiple DiagramElements can be combined.
            </summary>
            <remarks>
            A diagram element is responsible for sizing and positioning all nodes and connectors. For a node, it has more path element and text elements to render. (path element and text element are inherited from diagram element).
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.#ctor(Syncfusion.Blazor.Diagram.DiagramElement)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramElement"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.DiagramElement"/>.
            </summary>
            <param name="src">basic unit of diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramElement"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Measures the minimum space that the element requires
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.UpdateBounds">
            <summary>
            Updates the bounds of the element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.ValidateDesiredSize(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Validates the size of the element with respect to its minimum and maximum size
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Clone">
            <summary>
            Creates a new element that is a copy of the current element.
            </summary>
            <returns>DiagramElement</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramTemplates">
            <summary>
            Represents a segment of UI content, implemented as a delegate that writes the content of a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.NodeTemplate">
            <summary>
            Represents a segment of the UI to be rendered for a node.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.UserHandleTemplate">
            <summary>
            Represents a segment of the UI to be rendered for a Userhandle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramTemplates.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramTemplates.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramHtmlElement">
            <summary>
            The basic HTML building blocks in a diagram node are diagram HTML elements. To create a node, multiple diagram HTML elements can be combined. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ICommonElement">
            <summary>
            The basic UI building blocks in a diagram node or connector are elements. To create a node or connector, multiple elements can be combined
            </summary>
            <remarks>
            A Element is responsible for sizing and positioning of all nodes and connectors. For a node, it has more PathElement and TextElement to render
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Corners">
            <summary>
            Gets or sets the corners of the rectangular bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.FlipOffset">
            <summary>
            Gets or sets the offset values for container in flipping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ElementActions">
            <summary>
            Defines whether the element is group or port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.IsExport">
            <summary>
            Set to true during print and export
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ExportScaleValue">
            <summary>
            Set scaling value for print and export
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ICommonElement.ExportScaleOffset">
            <summary>
            Set scaling value for print and export
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.CanApplyStyle">
            <summary>
            Check whether style need to be apply or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Transform">
            <summary>
            Gets or sets whether the element has to be transformed based on its parent or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Flip">
            <summary>
            Gets or sets the mirror image of diagram element in both horizontal and vertical directions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ParentTransform">
            <summary>
            Gets or sets the rotating angle that is set to the immediate parent of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Description">
            <summary>
            Defines the description of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.StaticSize">
            <summary>
            Defines whether the element has to be measured or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.IsRectElement">
            <summary>
            Check whether the element is rect or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ID">
            <summary>
            Gets or sets the unique id of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Pivot">
            <summary>
            The element’s rotation angle will be based on pivot values, which range from 0 to 1 like offset values. By default, the Pivot values are set to X= 0.5 and Y=0.5.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.IsDirt">
            <summary>
            Gets or sets whether the content of the element needs to be measured or not. If it is false, the element will not measure unnecessary scenarios
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Visible">
            <summary>
            Represents whether the content of the element is visible or not..
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.OffsetX">
            <summary>
            Gets or sets the X-coordinate of the element. By default, it is 0. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.OffsetY">
            <summary>
            Gets or sets the y-coordinate of the element. By default, it is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of a border are rounded. It is only applicable to Element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.MinHeight">
            <summary>
            Gets or sets the minimum height of the element. By default, it is undefined. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.MinWidth">
            <summary>
            Gets or sets the minimum width of the element. By default, it is undefined. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.MaxWidth">
            <summary>
            Gets or sets the maximum width of the element. By default, it is undefined. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.MaxHeight">
            <summary>
            Gets or sets the maximum height of the element. By default, it is undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Width">
            <summary>
            Gets or sets the width of the element. If it is not specified, the element renders based on the content's width
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Height">
            <summary>
            Gets or sets the height of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.RotationAngle">
            <summary>
            Gets or sets the rotate angle of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Margin">
            <summary>
            Gets or sets the extra space around the outer boundaries of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the elements arranged to its immediate parent.
            Specifies how a Element in a control is horizontally aligned with respect to its parent element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.RelativeMode">
            <summary>
            Gets or sets whether the element has to be aligned based on the offset values or its immediate parent
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Style">
            <summary>
            Represents the appearance of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ParentID">
            <summary>
            Gets or sets the parent id of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.DesiredSize">
            <summary>
            After taking into consideration the constraints gets or sets the exact size of which the element should be rendered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ActualSize">
            <summary>
            Gets or sets the actual size of the Element that will be rendered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Bounds">
            <summary>
            Gets the size and location of the element in pixels, including its nonclient elements  relative to the parent control.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Shadow">
            <summary>
            Gets or sets the shadow appearance of a node. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.OuterBounds">
            <summary>
            Gets the element's outside bounds. It will consider all  the margin and padding properties as well.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonElement.SetOffsetWithRespectToBounds(System.Double,System.Double,Syncfusion.Blazor.Diagram.UnitMode)">
            <summary>
            Sets the offset of the element with respect to its parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonElement.GetAbsolutePosition(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Gets the position of the element with respect to its parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Corners">
            <summary>
            Define the Corners class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopLeft">
            <summary>
            Gets or sets the top left point of canvas corner
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopCenter">
            <summary>
            Gets or sets the top center point of canvas corner
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopRight">
            <summary>
            Gets or sets the top right point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.MiddleLeft">
            <summary>
            Gets or sets the middle left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Center">
            <summary>
            Gets or sets the center point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.MiddleRight">
            <summary>
            Gets or sets the middle left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomLeft">
            <summary>
            Gets or sets the bottom left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomCenter">
            <summary>
            Gets or sets the bottom center point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomRight">
            <summary>
            Gets or sets the bottom right point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Left">
            <summary>
            Gets or sets the left position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Right">
            <summary>
            Gets or sets the right position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Top">
            <summary>
            Gets or sets the top position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Bottom">
            <summary>
            Gets or sets the bottom position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Width">
            <summary>
            Gets or sets the width of canvas.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Height">
            <summary>
            Gets or sets the height of the element. By default, it is 50
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ImageElement">
            <summary>
            Represents the class that defines a basic image elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.#ctor(Syncfusion.Blazor.Diagram.ImageElement)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ImageElement"/> from the given ImageElement.
            </summary>
            <param name="src">basic image element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ImageElement"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.Source">
            <summary>
            Gets or sets the source of the image element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ImageScale">
            <summary>
            Gets or sets how the image will be scaled to fit within the bounds specified by the image scale property
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ImageAlign">
            <summary>
            Gets or sets the alignment of the image within the bounds specified.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.Stretch">
            <summary>
            Gets or sets the image element, which determines how the content fits into the available space
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ImageSize">
            <summary>
            Gets or sets the actual size of the image element to be rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Measures minimum space that is required to render the image
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the image element
            </summary>
            <param name="desiredSize"></param>
            <param name="isStack"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Clone">
            <summary>
            Creates a new image element that is a copy of the current image element
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramSvgElement">
            <summary>
            The basic native (SVG) building blocks in a diagram node are diagram native elements. To create a node, multiple diagram native elements can be combined. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PathElement">
            <summary>
            Represents the class which defines how to align the path based on offsetX and offsetY.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" @bind-Nodes="Nodes" SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>    
            @code
            { 
              DiagramObjectCollection<Node> Nodes = new DiagramObjectCollection<Node>();
              private ICommonElement SetTemplate(IDiagramObject node)
              {
                if ((node as Node).ID == "node2")
                {
                  Canvas container = new Canvas();
                  PathElement diagramElement = new PathElement();
                  diagramElement.Style.Fill = "green";
                  diagramElement.Data = "M150 0 L75 200 L225 200 Z";
                  container.Children.Add(diagramElement);
                  return container;
                }
                return null;
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.#ctor(Syncfusion.Blazor.Diagram.PathElement)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.PathElement"/> from the given PathElement.
            </summary>
            <param name="src">path element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.PathElement"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.Data">
            <summary>
            Gets or sets the geometry of the path element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.TransformPath">
            <summary>
            Gets or sets whether the path has to be transformed to fit the given x,y, width, height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.AbsolutePath">
            <summary>
            Gets or sets the equivalent path, that will have the origin as 0,0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Measures the minimum space that is required to render the element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the path element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.UpdatePath(System.String,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Translates the path to 0,0 and scales the path based on the actual size
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Clone">
            <summary>
            Creates a new element that is a copy of the current path element
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.StackPanel">
            <summary>
             Represents the class that arranges child elements into a single line that can be oriented horizontally or vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.StackPanel.considerPadding">
            <summary>
            Padding of the element needs to be measured
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.StackPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.#ctor(Syncfusion.Blazor.Diagram.StackPanel)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.StackPanel"/> from the given StackPanel.
            </summary>
            <param name="src">StackPanel element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.StackPanel"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.Measure(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Measures the minimum space that the panel needs
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the child elements of the stack panel
            </summary>
            <param name="desiredSize"></param>
            <param name="isStack"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.MeasureStackPanel(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Measures the minimum space that the panel needs
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.StretchChildren(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Stretches the child elements based on the size of the panel.
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.Clone">
            <summary>
            Creates a new element that is a copy of the current element.
            </summary>
            <returns>StackPanel</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextElement">
            <summary>
            Represents the text element which is used to display text or annotations.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" @bind-Nodes="Nodes" SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>    
            @code
            { 
                DiagramObjectCollection<Node> Nodes = new DiagramObjectCollection<Node>();
                private ICommonElement SetTemplate(IDiagramObject node)
                {
                    if ((node as Node).ID == "node2")
                    {
                        Canvas container = new Canvas();
                        TextElement textElement = new TextElement();
                        textElement.Content = "node2content";
                        container.Children.Add(textElement);
                        return container;
                    }
                     return null;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement.textContent">
            <summary>
            The image source
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement.Hyperlink">
            <summary>
            sets the hyperlink color to blue
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement.Constraints">
            <summary>
            The constraints for the text element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.#ctor(Syncfusion.Blazor.Diagram.TextElement)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/> from the given TextElement.
            </summary>
            <param name="src">TextElement.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.Content">
            <summary>
            Gets or sets the content of the text element that is to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.ChildNodes">
            <summary>
            Gets or sets the child element for the text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.WrapBounds">
            <summary>
            Gets or sets the wrapBounds for the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Measures the minimum size that is required for the text element
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the text element
            </summary>
            <param name="desiredSize"></param>
            <param name="isStack"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Clone">
            <summary>
            Creates a new object that is a copy of the current text element.
            </summary>
            <returns>TextElement</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramMargin">
            <summary>
            Specifies the extra space around the outer boundaries of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.LeftChanged">
            <summary>
            Specifies the callback to trigger when the left values changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.RightChanged">
            <summary>
            Specifies the callback to trigger when the right values changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.TopChanged">
            <summary>
            Specifies the callback to trigger when the top values changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.BottomChanged">
            <summary>
            Specifies the callback to trigger when the bottom values changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Left">
            <summary>
            Gets or sets the extra space at the left side of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Right">
            <summary>
            Gets or sets the extra space at the right side of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Top">
            <summary>
            Gets or sets the extra space at the top side of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Bottom">
            <summary>
            Gets or sets the extra space at the bottom of an element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.#ctor(Syncfusion.Blazor.Diagram.DiagramMargin)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramMargin"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.DiagramMargin"/>.
            </summary>
            <param name="src">DiagramMargin</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.#ctor">
            <summary>
            Initializes a new instance of the DiagramMargin.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.Clone">
            <summary>
            Creates a new margin that is a copy of the current margin.
            </summary>
            <returns>DiagramMargin</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BackgroundStyle">
            <summary>
            Represents the characteristics of the background of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageSourceChanged">
            <summary>
            Specifies the callback to trigger when the Source value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.BackgroundChanged">
            <summary>
            Specifies the callback to trigger when the color value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageScaleChanged">
            <summary>
            Specifies the callback to trigger when the scale value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageAlignChanged">
            <summary>
            Specifies the callback to trigger when the align value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageSource">
            <summary>
            Defines the source of the background image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.Background">
            <summary>
            Defines the background color of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageScale">
            <summary>
            Defines how the background image should be scaled/stretched.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageAlign">
            <summary>
            Defines how to align the background image over the diagram area.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering, otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PageMargin">
            <summary>
            Represents the margin of the diagram page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageMargin.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageMargin.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageMargin.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageMargin.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PageSettings">
            <summary>
            Specifies how to customize the appearance, width, and height of the diagram page.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent @ref="diagram" Width="100%" Height="500px" Nodes="@nodes" Connectors="@connectors">
                <PageSettings Width = "@PageWidth" Height="@PageHeight" Orientation="@pageOrientation" MultiplePage="@IsMultiplePage" ShowPageBreaks="@IsShowPageBreaks">
                    <PageMargin Left = "@marginLeft" Right="@marginRight" Top="@marginTop" Bottom="@marginBottom"></PageMargin>
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                SfDiagramComponent diagram;
                double PageWidth = 300;
                double PageHeight = 300;
                PageOrientation pageOrientation = PageOrientation.Landscape;
                bool IsMultiplePage = true;
                bool IsShowPageBreaks = true;
                double marginLeft = 10;
                double marginRight = 10;
                double marginTop = 10;
                double marginBottom = 10;
                DiagramObjectCollection<Node> nodes; DiagramObjectCollection<Connector> connectors;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>()
                    {
                        new Node { ID = "node1", Width = 150, Height = 100, OffsetX = 100, OffsetY = 100, Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation() { Content = "Node1" } } },
                        new Node { ID = "node2", Width = 80, Height = 130, OffsetX = 200, OffsetY = 200, Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation() { Content = "Node2" } } },
                        new Node { ID = "node3", Width = 100, Height = 75, OffsetX = 300, OffsetY = 350, Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation() { Content = "Node3" } } }
                    };
                    connectors = new DiagramObjectCollection<Connector> 
                    {
                        new Connector { ID="connector1", SourcePoint=new DiagramPoint { X=300, Y=400}, TargetPoint = new DiagramPoint { X = 500, Y = 500 } }
                    };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.WidthChanged">
            <summary>
            Specifies the callback to trigger when the width value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.HeightChanged">
            <summary>
            Specifies the callback to trigger when the height value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.OrientationChanged">
            <summary>
            Specifies the callback to trigger when the Orientation value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.BoundaryConstraintsChanged">
            <summary>
            Specifies the callback to trigger when the BoundaryConstraints value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.ShowPageBreaksChanged">
            <summary>
            Specifies the callback to trigger when the ShowPageBreaks value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.MultiplePageChanged">
            <summary>
            Specifies the callback to trigger when the MultiplePage value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.BackgroundChanged">
            <summary>
            Specifies the callback to trigger when the Background value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.MarginChanged">
            <summary>
            Specifies the callback to trigger when the Margin value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.ChildContent">
            <summary>
            Gets or sets the child content of the page settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Width">
            <summary>
            Gets or sets the width of the diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Height">
            <summary>
            Gets or sets the height of the diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Orientation">
            <summary>
            Gets or sets the orientation of the page in the diagram. By default, the orientation of the page is set to landscape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.BoundaryConstraints">
            <summary>
            Allows the user to customize the interactive region.
            </summary>
            <remarks>
            The boundary constraints property restricts or customizes the interactive region, out of which the elements cannot be dragged, resized or rotated.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.MultiplePage">
            <summary>
            Allows users to enable or disable multiple pages.
            </summary>
            <remarks>
            When multiple pages are enabled, the size of the page dynamically increases or decreases to split the single page into multiple pages and completely fit the diagram within the page boundaries. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.ShowPageBreaks">
            <summary>
            Allows the user to enable or disable the page break lines.
            </summary>
            <remarks>
            The ShowPageBreaks property is used as a visual guide to see how pages are split into multiple pages. By default, it is false. If it is true, then the page break lines will be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Margin">
            <summary>
            Specifies the extra space around the diagram content. The default values for the margin are set to 25 on all sides.
            </summary>
            <example>
            <code>
            <SfDiagramComponent Width="100%" Height="500px" Nodes="@nodes" Connectors="@connectors">
                <PageSettings Width = "@PageWidth" Height="@PageHeight" Orientation="@pageOrientation" MultiplePage="@IsMultiplePage" ShowPageBreaks="@IsShowPageBreaks">
                    <PageMargin Left = "10" Right="10" Top="10" Bottom="10"></PageMargin>
                </PageSettings>
            </SfDiagramComponent>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Background">
            <summary>
            Defines the page background.
            </summary>
            <remarks>
            Users can customize the background of the diagram page by using the background property.  The Source property of background allows the user to set the path of the image to the background, whereas the Color property of the background allows the user to set a color to the background of the diagram page. By default, it is set to transparent.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollSettings">
            <summary>
            Sets the diagram's current zoom value, zoom factor, scroll state, and viewport size.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings @bind-VerticalOffset="@verticalOffset" @bind-HorizontalOffset="@horizontalOffset" @bind-ScrollLimit="@scrollLimit" @bind-CurrentZoom="@currentZoom" @bind-MinZoom="minZoom" @bind-MaxZoom="@maxZoom">
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
                double verticalOffset { get; set; } = 300;
                double horizontalOffset { get; set; } = -1000;
                ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Infinity;
                double currentZoom { get; set; } = 1;
                double minZoom { get; set; } = 0.2;
                double maxZoom { get; set; } = 1.5;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.HorizontalOffsetChanged">
            <summary>
            Specifies the callback to trigger when the horizontal offset changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.VerticalOffsetChanged">
            <summary>
            Specifies the callback to trigger when the vertical offset changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.CurrentZoomChanged">
            <summary>
            Specifies the callback to trigger when the current zoom changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MinZoomChanged">
            <summary>
            Specifies the callback to trigger when the minimum zoom changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MaxZoomChanged">
            <summary>
            Specifies the callback to trigger when the maximum zoom changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ScrollLimitChanged">
            <summary>
            Specifies the callback to trigger when the scroll limit changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ChildContent">
            <summary>
            Sets the child content for the ScrollSettings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset of the scroller.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.VerticalOffset">
            <summary>
            Gets or sets the Vertical offset of the scroller. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.CurrentZoom">
            <summary>
            Gets or sets the diagram's currentZoom value. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MinZoom">
            <summary>
            Gets or sets the scroller's minimum zoom value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MaxZoom">
            <summary>
            Gets or sets the scroller's maximum zoom value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ScrollLimit">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GridLines">
            <summary>
            Represents the visual guidance while dragging or arranging the objects.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="500px">
                <SnapSettings Constraints="SnapConstraints.ShowLines">
                    <HorizontalGridLines LineColor="blue" LineDashArray="2,2" LineIntervals="@LineInterval">
                    </HorizontalGridLines>
                    <VerticalGridLines LineColor="blue" LineDashArray="2,2" LineIntervals="@LineInterval">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            @code
            {
               //Set the line intervals for the gridlines
               public double[] LineInterval { get; set; } = new double[] 
               {
                    1.25, 14, 0.25, 15, 0.25, 15, 0.25, 15, 0.25, 15
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.ScaledInterval">
            <summary>
            Specifies a set of intervals to snap the objects
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineColor">
            <summary>
            Defines the color of the horizontal or vertical gridlines.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineDashArray">
            <summary>
            Defines the pattern of dashes and gaps in the horizontal or vertical gridlines.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineIntervals">
            <summary>
             The thickness and the space between horizontal/vertical gridlines can be customized by using line intervals.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.DotIntervals">
            <summary>
            Represents the pattern of gaps defined by a set of dots.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.SnapIntervals">
            <summary>
            Specifies a set of intervals for snapping the objects. By default, the objects are snapped towards the nearest grid line.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineColorChanged">
            <summary>
            Specifies the callback to trigger when the linecolor changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineDashArrayChanged">
            <summary>
            Specifies the callback to trigger when the linedasharray changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineIntervalsChanged">
            <summary>
            Specifies the callback to trigger when the lineintervals changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.SnapIntervalsChanged">
            <summary>
            Specifies the callback to trigger when the snapintervals changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.DotIntervalsChanged">
            <summary>
            Specifies the callback to trigger when the dotintervals changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GridLines.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GridLines.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GridLines.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HorizontalGridLines">
            <summary>
            Represents the horizontal gridlines of the diagram.
            </summary>
            <remarks>
            Horizontal Gridlines provide visual guidance while dragging or arranging   objects on the diagram surface.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px">
                @* Shows vertical gridlines *@
                <SnapSettings Constraints = "SnapConstraints.ShowLines" >
                    @* Customizes the line color and line style to the gridlines*@
                    <HorizontalGridLines LineColor="blue" LineDashArray="2,2" />               
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HorizontalGridLines.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HorizontalGridLines.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SnapSettings">
            <summary>
            Customizes and controls the gridlines and the snap behavior of the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="500px">
                // Shows the horizontal gridlines
                <SnapSettings Constraints ="SnapConstraints.ShowLines" SnapAngle="10">
                    <HorizontalGridLines LineColor = "blue" LineDashArray="2,2">
                    </HorizontalGridLines>
                    <VerticalGridLines LineColor = "blue" LineDashArray="2,2">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.ChildContent">
            <summary>
            Gets or sets the child content of the SnapSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.VerticalGridLines">
            <summary>
            Defines the pattern of vertical gridlines.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.HorizontalGridLines">
            <summary>
            Defines the pattern of horizontal gridlines
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.Constraints">
            <summary>
            Enables or disables the features of gridlines and SnapSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.ConstraintsChanged">
            <summary>
            Specifies the callback to trigger when the constraints changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapDistance">
            <summary>
            Defines the minimum distance between the selected object and the nearest object. By default, it is 5.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings SnapDistance="10">
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapDistanceChanged">
            <summary>
            Specifies the callback to trigger when the SnapObjectDistance changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapAngle">
            <summary>
            SnapAngle defines the angle by which the object needs to be rotated. By default, 5.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapAngleChanged">
            <summary>
            Specifies the callback to trigger when the SnaAngle changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.GridType">
            <summary>
            Defines the diagram Grid pattern.
            </summary>
            <remarks>
            The GridType can be set to lines or dots. By default, the GridType is set to lines.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.GridTypeChanged">
            <summary>
            Specifies the callback to trigger when the GridType changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.VerticalGridLines">
            <summary>
            Represents the vertical gridlines of the diagram.
            </summary>
            <remarks>
            VerticalGridlines provides the visual guidance while dragging or arranging the objects on the diagram surface.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px">
                @* Shows vertical gridlines *@
                <SnapSettings Constraints = "SnapConstraints.ShowLines" >
                    @* Customizes the line color and line style to the gridlines*@
                    <VerticalGridLines LineColor = "blue" LineDashArray="2,2" />        
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.VerticalGridLines.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.VerticalGridLines.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramConstraints">
            <summary>
            Enables/Disables certain features of the diagram. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.None">
            <summary>
            Disables all the functionalities of the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Bridging">
            <summary>
            Specifies whether a bridge can be created for all the connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.UndoRedo">
            <summary>
            Enables or disables the undo or redo functionality over the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.UserInteraction">
            <summary>
            Decides whether interaction should happen on the diagram or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.ApiUpdate">
            <summary>
            Decides whether the public API needs to be enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PageEditable">
            <summary>
            Decides whether the diagram can be editable or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Zoom">
            <summary>
            Specifies whether zooming-related action can be enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PanX">
            <summary>
            Enables or disables panning actions only on the x-axis (horizontal panning). 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PanY">
            <summary>
            Enables or disables panning actions only on the y-axis (vertical panning). 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Pan">
            <summary>
            Specifies the panning action of the diagram on both axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.ZoomTextEdit">
            <summary>
            Specifies  whether the zooming ratio can be maintained or not while editing the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Default">
            <summary>
            Enables all the functionalities of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FlipDirection">
            <summary>
            Specifies how the diagram elements have to be flipped.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Horizontal">
            <summary>
            Flip the diagram shape horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Vertical">
            <summary>
            Flip the diagram shape vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Both">
            <summary>
            Flip the diagram shape to both horizontally and vertically. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.None">
            <summary>
            No flip will be applied and this is the default value. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HorizontalAlignment">
            <summary>
            Represents the alignment of the diagram elements based on its immediate parent. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes">
            </SfDiagramComponent>
            @code
            {
                public DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>() { };
                protected override void OnInitialized()
                {
                    // A node is created and stored in nodes array.
                    Node Node = new Node()
                    {
                        /// Initialize the port collection
                        Ports = new DiagramObjectCollection<PointPort>()
                        {
                            new PointPort()
                            {
                                HorizontalAlignment = HorizontalAlignment.Left
                            }
                        },
                    };
                    nodes.Add(Node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Stretch">
            <summary>
            Stretch the diagram element horizontally to its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Left">
            <summary>
            Align the diagram element horizontally to the left side of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Right">
            <summary>
            Align the diagram element horizontally to the right side of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Center">
            <summary>
            Align the diagram element horizontally to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent’s horizontal alignment property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment">
            <summary>
            Represents the alignment of the fixeduserhandle with respect to its immediate parent. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                Type = ConnectorSegmentType.Orthogonal,
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                // A fixed user handle is created and stored in the fixed user handle collection of the Connector.
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25, 
                        Width = 25,
                        Offset = 0.5,
                        Alignment = FixedUserHandleAlignment.After,
                        Displacement = new DiagramPoint { Y = 10 },
                        Visibility = true,Padding = new Margin() { Bottom = 1, Left = 1, Right = 1, Top = 1 },
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.Center">
            <summary>
            Aligns the fixedUserHandle on the connector segment. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.Before">
            <summary>
            Aligns the fixedUserHandle on top of a connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.After">
            <summary>
            Aligns the fixedUserHandle at the bottom of a connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GridType">
            <summary>
            Specifies the type of gridlines.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="500px">
                <SnapSettings GridType = "GridType.Dots" >
                    <HorizontalGridLines LineColor="Blue" @bind-LineIntervals="@HInterval"
                                      @bind-DotIntervals="@HDotInterval"></HorizontalGridLines>
                    <VerticalGridLines LineColor = "Blue" @bind-LineIntervals="@VInterval"
                                     @bind-DotIntervals="@VDotInterval"></VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            @code
            {
               public double[] HDotInterval { get; set; } = new double[] { 3, 20, 1, 20, 1, 20 };
               public double[] VDotInterval { get; set; } = new double[] { 3, 20, 1, 20, 1, 20, 1, 20, 1, 20 };
               public double[] HInterval { get; set; } = new double[] { 1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75 };
               public double[] VInterval { get; set; } = new double[] { 1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75 };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GridType.Lines">
            <summary>
            Renders grid patterns as lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GridType.Dots">
            <summary>
            Renders grid patterns as dots.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.VerticalAlignment">
            <summary>
            Represents the alignment of the diagram elements based on its immediate parent. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes">
            </SfDiagramComponent>
            @code
            {
                public DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>() { };
                protected override void OnInitialized()
                {
                    // A node is created and stored in nodes array.
                    Node Node = new Node()
                    {
                        /// Initialize the port collection
                        Ports = new DiagramObjectCollection<PointPort>()
                        {
                            new PointPort()
                            {
                                VerticalAlignment = VerticalAlignment.Top
                            }
                        },
                    };
                    nodes.Add(Node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Stretch">
            <summary>
            Stretch the diagram element vertically to its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Top">
            <summary>
            Align the diagram element vertically to the top side of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Bottom">
            <summary>
            Align the diagram element vertically to the bottom side of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Center">
            <summary>
            Align the diagram element vertically to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent’s vertical alignment property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextDecoration">
            <summary>
            Represents the decoration of a text in the text block. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.Overline">
            <summary>
            Draws a horizontal line above the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.Underline">
            <summary>
            Draws a horizontal line under the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.LineThrough">
            <summary>
            Draws a horizontal line through the text of a node or a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.None">
            <summary>
            Represents the default appearance of a text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextAlign">
            <summary>
            Represents the alignment of the text inside the text block. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Left">
            <summary>
            Sets the alignment of the text to the left in the text block.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Right">
            <summary>
            Sets the alignment of the text to the right in the text block. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Center">
            <summary>
            Sets the alignment of the text at the center of the text block .
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Justify">
            <summary>
            Sets the alignment of the text in respective to left and right margins.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextOverflow">
            <summary>
            Specifies a value that indicates whether to render ellipses (...) to indicate text overflow. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Wrap">
            <summary>
            Wraps the text to the next line, when it exceeds its bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Ellipsis">
            <summary>
            Ellipsis hides the text if the text size exceeds the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Clip">
            <summary>
            The text is restricted to the node/connector boundary and the text will not be overflown.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextWrap">
            <summary>
            Specifies how to control the overflow of text in the node boundaries. The wrapping property defines how to wrap the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow">
            <summary>
            Text-wrapping occurs when the text overflows beyond the available node width. However, the text may overflow beyond the node width in  case of a very long word.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.Wrap">
            <summary>
            The text will be wrapped within the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.NoWrap">
            <summary>
            The text will not be wrapped. If a lengthy text exists, the boundary will not be a limit.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.WhiteSpace">
            <summary>
            Specifies how the white space and the new line characters should be set.  
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.WhiteSpace.PreserveAll">
            <summary>
            Preserves (Includes) all empty spaces and empty lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.WhiteSpace.CollapseSpace">
            <summary>
            Collapses (Excludes) all consequent empty spaces and empty lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.WhiteSpace.CollapseAll">
            <summary>
            Collapses (Excludes) the consequent spaces into one.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GradientType">
            <summary>
            Specifies the type of transition between two or more colors. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GradientType.Linear">
            <summary>
            Sets the type of gradient to linear.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GradientType.Radial">
            <summary>
            Sets the type of gradient to radial.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RelativeMode">
            <summary>
            Specifies the relative mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RelativeMode.Point">
            <summary>
            DiagramPoint - Diagram elements will be aligned with respect to a point
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RelativeMode.Object">
            <summary>
            Object - Diagram elements will be aligned with respect to its immediate parent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Transform">
            <summary>
            Specifies the type of Transform.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Transform.Self">
            <summary>
            Self - Sets the transform type as Self
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Transform.Parent">
            <summary>
            Parent - Sets the transform type as Parent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ElementAction">
            <summary>
            Specifies the element action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.None">
            <summary>
            Disables all element actions are none.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.ElementIsPort">
            <summary>
            Enable the element action is Port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.ElementIsGroup">
            <summary>
            Enable the element action as Group.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.UnitMode">
            <summary>
            Specifies the type of unit mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.UnitMode.Absolute">
            <summary>
            Absolute - Sets the unit mode type as Absolute
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.UnitMode.Fraction">
            <summary>
            Fraction - Sets the unit mode type as Fraction
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortShapes">
            <summary>
            Specifies the shape of the ports.
            </summary>
            <remarks>
            To know more about using port shapes, refer to the Ports.
            To apply the X port shape, use the below code
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes">
            </SfDiagramComponent>
            @code{
              DiagramObjectCollection<Node> nodes;
              protected override void OnInitialized()
              {
                //Initialize the NodeCollection.
                nodes = new DiagramObjectCollection<Node>();
                Node Node = new Node()
                {
                  ID = "node1",
                  Height = 100,
                  Width = 100,
                  OffsetX = 100,
                  OffsetY = 100,
                };
                Node.Ports = new DiagramObjectCollection<PointPort>()
                {
                 new PointPort()
                 {
                     ID="port1",
                     Offset=new DiagramPoint(){X=0,Y=0.5},
                     Shape=PortShapes.X,
                     Visibility=PortVisibility.Hover|PortVisibility.Connect,
                     //set the PortConstraints...
                     Constraints=PortConstraints.Draw
                  }
                };
                nodes.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.X">
            <summary>
            Sets the shape of the port to X.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Circle">
            <summary>
            Sets the shape of the port to Circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Square">
            <summary>
            Sets the shape of the port to Square.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Custom">
            <summary>
            Sets the shape of the port to Custom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortVisibility">
            <summary>
            Represents the visibility options of the port.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes">
            </SfDiagramComponent>
            @code 
            {
              DiagramObjectCollection<Node> nodes;
              protected override void OnInitialized()
              {
               //Initialize the NodeCollection.
               nodes = new DiagramObjectCollection<Node>();
               Node Node = new Node()
               {
                 ID = "node1",
                 Height = 100,
                 Width = 100,
                 OffsetX = 100,
                 OffsetY = 100,
               };
               Node.Ports = new DiagramObjectCollection<PointPort>()
               {
                 new PointPort()
                 {
                   ID="port1",
                   Offset=new DiagramPoint(){X=0,Y=0.5},
                   Shape=PortShapes.X,
                   Visibility=PortVisibility.Hover|PortVisibility.Connect,
                   //set the PortConstraints...
                   Constraints=PortConstraints.Draw
                  }
                };
                nodes.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Connect">
            <summary>
            Shows the port when a connector endpoint is dragged over a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Hidden">
            <summary>
            Always hides the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Hover">
            <summary>
            Shows the port when the mouse hovers over a node. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Visible">
            <summary>
            Always shows the port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AlignmentMode">
            <summary>
            Defines how the specified selected items are aligned when calling the align command.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void OnAlignLeft()
            {
                diagram.SetAlign(AlignmentOptions.Left,null, AlignmentMode.Object);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentMode.Object">
            <summary>
            Aligns the selected objects based on the first object in the selected list. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentMode.Selector">
            <summary>
            Aligns the selected objects based on the selection boundary. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AlignmentOptions">
            <summary>
            Defines how the selected objects should be positioned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Left">
            <summary>
            Aligns all the selected objects to the left of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Right">
            <summary>
            Aligns all the selected objects to the right of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Top">
            <summary>
            Aligns all the selected objects at the top of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Bottom">
            <summary>
            Aligns all the selected objects at the bottom of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Center">
            <summary>
            Aligns all the selected objects at the center of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Middle">
            <summary>
            Aligns all the selected objects at the middle of the selection boundary.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DistributeOptions">
            <summary>
            Distribute the options that enable you to place the selected objects on the page at equal intervals from each other. 
            </summary>
            <remarks>
            The selected objects are equally spaced within the selection boundary.
            </remarks>
            <example>
            <code>
            <![CDATA[
            private void Distribute()
            {
                diagram.SetDistribute(DistributeOptions.Left);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.RightToLeft">
            <summary>
            Distributes the objects based on the distance between the right and left sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Center">
            <summary>
            Distributes the objects based on the distance between the centers of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Left">
            <summary>
            Distributes the objects based on the distance between the left sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Right">
            <summary>
            Distributes the objects based on the distance between the right sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Bottom">
            <summary>
            Distributes the objects based on the distance between the bottom sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Top">
            <summary>
            Distributes the objects based on the distance between the top sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.BottomToTop">
            <summary>
            Distributes the objects based on the distance between the bottom and top sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Middle">
            <summary>
            Distributes the objects based on the distance between the vertical centers of the adjacent objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SizingMode">
            <summary>
            Specifies how to equally size the selected nodes with respect to the first selected object.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void OnSameSize()
            {
               diagram.SetSameSize(SizingMode.Size);
            }
            private void OnSameWidth()
            {
               diagram.SetSameSize(SizingMode.Width);
            }
            private void OnSameHeight()
            {
               diagram.SetSameSize(SizingMode.Height);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingMode.Size">
            <summary>
            Scales the selected objects both vertically and horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingMode.Height">
            <summary>
            Scales the height of the selected objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingMode.Width">
            <summary>
            Scales the width of the selected objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortConstraints">
            <summary>
            Enables or disables certain features of the port. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize port collection
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        Style = new ShapeStyle() { Fill = "gray" }, 
                        Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                        Visibility=PortVisibility.Hover|PortVisibility.Connect,
                        Constraints = PortConstraints.Draw
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.None">
            <summary>
            Disables all the port functionalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.Draw">
            <summary>
            Enables or disables creating the connection when the mouse hovers on the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.InConnect">
            <summary>
            Enables or disables connecting only the target end of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.OutConnect">
            <summary>
            Enables or disables connecting only the source end of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.Default">
            <summary>
            Enables all constraints of a port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Shapes">
            <summary>
            Specifies the type of node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Basic">
            <summary>
            Allows defining a shape from the available built-in basic shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Path">
            <summary>
            Allows defining a custom node from path data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Image">
            <summary>
            Allows creating an image node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Flow">
            <summary>
            Allows defining a shape from the available built-in flow shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Bpmn">
            <summary>
            Allows defining a shape from the available built-in BPMN shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.SVG">
            <summary>
            Allows creating a native SVG node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.HTML">
            <summary>
            Allows setting a custom template for a node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BasicShapeType">
            <summary>
            Represents the available built-in basic shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Rectangle">
            <summary>
            Sets the type of basic shape as a Rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Ellipse">
            <summary>
            Sets the type of basic shape as an Ellipse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Hexagon">
            <summary>
            Sets the type of basic shape as a Hexagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Parallelogram">
            <summary>
            Sets the type of basic shape as a Parallelogram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Triangle">
            <summary>
            Sets the type of basic shape as a Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Plus">
            <summary>
            Sets the type of basic shape as a Plus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Star">
            <summary>
            Sets the type of basic shape as a Star.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Pentagon">
            <summary>
            Sets the type of basic shape as a Pentagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Heptagon">
            <summary>
            Sets the type of basic shape as a Heptagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Octagon">
            <summary>
            Sets the type of basic shape as a Octagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Trapezoid">
            <summary>
            Sets the type of basic shape as a Trapezoid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Decagon">
            <summary>
            Sets the type of basic shape as a Decagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.RightTriangle">
            <summary>
            Sets the type of basic shape as a Right Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Cylinder">
            <summary>
            Sets the type of basic shape as a Cylinder.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Diamond">
            <summary>
            Sets the type of basic shape as a Diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapeType.Polygon">
            <summary>
            Sets the type of basic shape as a Polygon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FlowShapeType">
            <summary>
            Specifies the type of process flow shape.
            </summary>
            <remarks>
            To learn more about using flow shapes, refer <see href="https://blazor.syncfusion.com/documentation/diagram-component/shapes">Shapes</see>.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        //Set the type of shape as flow
                        Shape = new FlowShape()
                        {
                            Type = Shapes.Flow,
                            Shape = FlowShapesType.DirectData
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Terminator">
            <summary>
            Sets the flow shape type to Terminator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Process">
            <summary>
            Sets the flow shape type to Process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Decision">
            <summary>
            Sets the flow shape type to Decision.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Document">
            <summary>
            Sets the flow shape type to Document.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.PreDefinedProcess">
            <summary>
            Sets the flow shape type to PreDefinedProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.PaperTap">
            <summary>
            Sets the flow shape type to PaperTap.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.DirectData">
            <summary>
            Sets the flow shape type to DirectData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.SequentialData">
            <summary>
            Sets the flow shape type to SequentialData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Sort">
            <summary>
            Sets the flow shape type to Sort.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.MultiDocument">
            <summary>
            Sets the flow shape type to MultiDocument.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Collate">
            <summary>
            Sets the flow shape type to Collate.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.SummingJunction">
            <summary>
            Sets the flow shape type to SummingJunction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Or">
            <summary>
            Sets the flow shape type to Or.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.InternalStorage">
            <summary>
            Sets the flow shape type to internal storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Extract">
            <summary>
            Sets the flow shape type to Extract.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.ManualOperation">
            <summary>
            Sets the flow shape type to ManualOperation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Merge">
            <summary>
            Sets the flow shape type to Merge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.OffPageReference">
            <summary>
            Sets the flow shape type to OffPageReference.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.SequentialAccessStorage">
            <summary>
            Sets the flow shape type to SequentialAccessStorage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Annotation">
            <summary>
            Sets the flow shape type to Annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Data">
            <summary>
            Sets the flow shape type to Data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Card">
            <summary>
            Sets the flow shape type to Card.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Delay">
            <summary>
            Sets the flow shape type to Delay.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Preparation">
            <summary>
            Sets the flow shape type to Preparation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.Display">
            <summary>
            Sets the flow shape type to Display.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.ManualInput">
            <summary>
            Sets the flow shape type to ManualInput.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.LoopLimit">
            <summary>
            Sets the flow shape type to LoopLimit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapeType.StoredData">
            <summary>
            Sets the flow shape type to stored data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeConstraints">
            <summary>
            Specifies the node constraints allow the users to enable or disable certain behaviors and features of the diagram nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.None">
            <summary>
            Disable all node Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Select">
            <summary>
            Enables or disables the selection of a node in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Drag">
            <summary>
            Enables or disables the dragging functionality of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Rotate">
            <summary>
            Enables or disables node rotation. It is done with the help of a curvy arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Shadow">
            <summary>
            Enables or disables to display the nodes shadow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.PointerEvents">
            <summary>
            Enables or disables the mouse pointers events when clicking with a mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Delete">
            <summary>
            Enables or disables node deletion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.InConnect">
            <summary>
            Enables node to allow only in coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.OutConnect">
            <summary>
            Enables node to allow only out coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.AllowDrop">
            <summary>
            AllowDrop allows dropping a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorthEast">
            <summary>
            It enables or disables the resizing of the node in the NorthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeEast">
            <summary>
            It enables or disables the resizing of the node in the East direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouthEast">
            <summary>
            It enables or disables the resizing of the node in the SouthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouth">
            <summary>
            It enables or disables the resizing of the node in the South direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouthWest">
            <summary>
            It enables or disables the resizing of the node in the SouthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeWest">
            <summary>
            It enables or disables the resizing of the node in the West direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorthWest">
            <summary>
            It enables or disables the resizing of the node in the NorthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorth">
            <summary>
            It enables or disables the resizing of the node in the North direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.AspectRatio">
            <summary>
            Enables the Aspect ratio of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ReadOnly">
            <summary>
            Enables the ReadOnly mode(Write operations cannot be done) for the annotation in the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.HideThumbs">
            <summary>
            Enables to hide all resize thumbs for the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Resize">
            <summary>
            Enables or Disables the expansion or compression of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Default">
            <summary>
            Enables all the constraints for a node
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Inherit">
            <summary>
            It allows the node to inherit the interaction option from the parent object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorConstraints">
            <summary>
            Enables or disables certain behaviors and features of the connectors. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
               ID = "connector1",
               Type = ConnectorSegmentType.Straight,
               SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
               TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
               //set the ConnectorConstraints...
               Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.None">
            <summary>
            Disables all the connector Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Select">
            <summary>
            Enables or disables the selection of a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Delete">
            <summary>
            Enables or disables the deletion of a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Drag">
            <summary>
            Enables or disables the connector from being dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragSourceEnd">
            <summary>
            Enables or disables the connector's source end from being dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragTargetEnd">
            <summary>
            Enables or disables the connector’s target end from being dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragSegmentThumb">
            <summary>
            Enables or disables the control point and endpoint of every segment in a connector for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Interaction">
            <summary>
            Enables or disables the interaction of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.AllowDrop">
            <summary>
            Enables to trigger a drop event when any object is dragged or dropped onto the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Bridging">
            <summary>
            Enables or disables bridging to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.InheritBridging">
            <summary>
            Enables or disables inheriting the value of bridging from the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.PointerEvents">
            <summary>
            Enables to set the pointer-events.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ReadOnly">
            <summary>
            Enables or disables read-only for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByNode">
            <summary>
            Enables or disables connecting to the nearest node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByPort">
            <summary>
            Enables or disables connecting to the nearest port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByElement">
            <summary>
            Enables or disables connecting to the nearest elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Default">
            <summary>
            Enables all constraints for the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorSegmentType">
            <summary>
            Specifies the segment type of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Straight">
            <summary>
            Sets the segment type as Straight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Orthogonal">
            <summary>
            Sets the segment type as Orthogonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Polyline">
            <summary>
            Sets the segment type as Polyline.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Bezier">
            <summary>
            Sets the segment type as Bezier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DecoratorShape">
            <summary>
            Specifies the decorator shape of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="500px" Connectors="@connectors">
                <SnapSettings Constraints = "@snapConstraints" ></SnapSettings>
            </SfDiagramComponent >
            @code
            {
                SnapConstraints snapConstraints = SnapConstraints.None;
                //Define the diagram's connector collection
                DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
                protected override void OnInitialized()
                {
                    Connector Connector = new Connector()
                    {
                        ID = "connector1",
                        // Set the source and target point of the connector
                        SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                        TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                        // Type of the connector segment
                        Type = ConnectorSegmentType.Straight,
                        TargetDecorator = new DecoratorSettings()
                        {
                            Shape = DecoratorShape.Arrow,
                            Style = new ShapeStyle()
                            {
                                Fill = "#6f409f",
                                StrokeColor = "#6f409f",
                                StrokeWidth = 1
                            }
                        }
                    };
                    connectors.Add(Connector);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Arrow">
            <summary>
            Sets the decorator’s shape to arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.None">
            <summary>
            Sets the decorator's shape to none.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Diamond">
            <summary>
            Sets the decorator shape to diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.OpenArrow">
            <summary>
            Sets the decorator shape to open arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Circle">
            <summary>
            Sets the decorator shape to circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Square">
            <summary>
            Sets the decorator shape to square.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Fletch">
            <summary>
            Sets the decorator shape to fletch.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.OpenFletch">
            <summary>
            Sets the decorator shape to open fletch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.InArrow">
            <summary>
            Sets the decorator shape to in arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.OutArrow">
            <summary>
            Sets the decorator shape to out arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.DoubleArrow">
            <summary>
            Sets the decorator’s shape to double arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Custom">
            <summary>
            Sets the decorator’s shape to custom
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Direction">
            <summary>
            Specifies the orthogonal connector's connection segment direction. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px"  @bind-Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
                public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();    
                Connector connector = new Connector()
                {
                    ID = "connector",
                    SourceID = "node13",
                    TargetID = "node14",
                    Type = ConnectorSegmentType.Orthogonal,
                    Segments = new DiagramObjectCollection<ConnectorSegment>() 
                    { 
                        new OrthogonalSegment() 
                        { 
                            Length = 70, 
                            Type = ConnectorSegmentType.Orthogonal, 
                            Direction = Direction.Right 
                        }, 
                        new OrthogonalSegment() 
                        { 
                            Length = 20, 
                            Type = ConnectorSegmentType.Orthogonal, 
                            Direction = Direction.Bottom 
                        } 
                    }
                };
                connectors.Add(connector);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Left">
            <summary>
            Sets the direction of the connector segment to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Right">
            <summary>
            Sets the direction of the connector segment to Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Top">
             <summary>
            Sets the direction of the connector segment to Top.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Bottom">
            <summary>
            Sets the direction of the connector segment to Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AnnotationConstraints">
            <summary>
            Enables or disables certain features and behaviors of the annotations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.None">
            <summary>
            Disables all the functionalities of annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.ReadOnly">
            <summary>
            Enables the user to only read the annotation (cannot be edited).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.InheritReadOnly">
            <summary>
            Enables or disables the user from inheriting the ReadOnly option from the parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AnnotationAlignment">
            <summary>
            It specifies the alignment of the diagram elements based on its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.Center">
            <summary>
            Annotation placed on the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.Before">
            <summary>
            Annotation placed on top of the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.After">
            <summary>
            Annotation placed at the bottom of the connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PageOrientation">
            <summary>
            Defines the orientation of the Page
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PageOrientation.Landscape">
            <summary>
            Display with page Width is more than the page Height
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PageOrientation.Portrait">
            <summary>
            Display with page Height is more than the page width
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BoundaryConstraints">
            <summary>
            Allows users to specify the region of the diagram in which they can interact with it. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <PageSettings @bind-BoundaryConstraints="@constraints" >
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                BoundaryConstraints constraints = BoundaryConstraints.Diagram;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Infinity">
            <summary>
            Allow interactions to take place at the infinite height and width of the diagram region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Diagram">
            <summary>
            Allow interactions to take place inside the diagram height and width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Page">
            <summary>
            Allow interactions to take place around the height and width mentioned in the page settings.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramRegions">
            <summary>
            Specifies the region that has to be drawn as an image
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramRegions.PageSettings">
            <summary>
            Sets to export the diagram with the given page settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramRegions.Content">
            <summary>
            Sets to export the diagram content alone.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramRegions.CustomBounds">
            <summary>
            Sets to export the diagram with the given bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ImageAlignment">
            <summary>
            Specifies the process of overlaying images of the same scene under different condition of the image.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node5 = new Node()
            {
              OffsetX = 500,
              OffsetY = 300,
              Shape = new ImageShape()
              {
                Type = Shapes.Image, ImageAlign = ImageAlignment.None, Scale = Scale.None,
                Source = " https://www.syncfusion.com/content/images/nuget/sync_logo_icon.png" 
              },
            };
            nodes.Add(node5);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.None">
            <summary>
            Sets the none alignments for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMin">
            <summary>
            Sets the smallest X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMin">
            <summary>
            Sets the midpoint X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMin">
            <summary>
            Sets the maximum X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMid">
            <summary>
            Sets the maximum X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMax">
            <summary>
            Sets the smallest X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMax">
            <summary>
            Sets the midpoint X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMax">
            <summary>
            Sets the maximum X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Scale">
            <summary>
            Indicates whether or not the image should be scaled uniformly.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px">
            <BackgroundStyle ImageSource = "@imageSource" ImageScale="@imageScale”></BackgroundStyle>
            </SfDiagramComponent>
            string imageSource = "https://www.w3schools.com/images/w3schools_green.jpg";
            Scale imageScale = Scale.Slice;
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Scale.None">
            <summary>
            There will be no scaling of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Scale.Meet">
            <summary>
            stretches the content in both the x and y dimensions until it fills the width or height provided.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Scale.Slice">
            <summary>
            Preserves the aspect ratio of the content but scales up the graphic until it fills both the width and height provided (clipping the content that overflows the bounds).
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollLimitMode">
            <summary>
            Defines the scrollable region of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px">
            <ScrollSettings @bind-ScrollLimit="@scrollLimit">
            </ScrollSettings>
            </SfDiagramComponent>
            @code
            { 
                ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Infinity;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimitMode.Diagram">
            <summary>
            Enables scrolling to view the diagram content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimitMode.Infinity">
            <summary>
            The Diagram will be extended when we try to scroll the through it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimitMode.Limited">
            <summary>
            Enables scrolling to view the specified area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Stretch">
            <summary>
            Describes how content is resized to fill its allocated space. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Stretch.None">
            <summary>
            Does not preserve the aspect ratio. Scales image to fit  the view box fully into the available space. Proportions will be distorted.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Stretch.Stretch">
            <summary>
            Stretch the image to fit into the available space.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Stretch.Meet">
            <summary>
            Preserves the aspect ratio and scales the view box to fit within the available space.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Stretch.Slice">
            <summary>
            Preserves the aspect ratio and slices of any part of the image that does not fit inside the available space.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutType">
            <summary>
            Specifies the types of automatic layout. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.None">
            <summary>
            None of the layouts are applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.HierarchicalTree">
            <summary>
            Defines the type of layout as a Hierarchical Tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.OrganizationalChart">
            <summary>
            Defines the type of layout as an Organizational Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.MindMap">
            <summary>
            Defines the type of layout as a Mind Map.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SubTreeAlignmentType">
            <summary>
            Specifies the collection of sub tree alignments in an organizational chart. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" NodeCreating="@NodeDefaults" ConnectorCreating="@ConnectorDefaults">
                <DataSourceSettings ID = "Id" ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.OrganizationalChart"
                        @bind-HorizontalSpacing="@HorizontalSpacing" 
                        @bind-VerticalSpacing="@VerticalSpacing" 
                        GetLayoutInfo="GetLayoutInfo">
                </Layout>
            </SfDiagramComponent>
            @code
            {
               int HorizontalSpacing = 40;
               int VerticalSpacing = 50;
               private TreeInfo GetLayoutInfo(IDiagramObject obj, TreeInfo options)
               {
                    options.AlignmentType = SubTreeAlignmentType.Alternate;
                    options.Orientation = Orientation.Vertical;
                    return options;         
               }
               private void ConnectorDefaults(IDiagramObject connector)
               {
                   (connector as Connector).Type = ConnectorSegmentType.Orthogonal;
                   (connector as Connector).TargetDecorator.Shape = DecoratorShape.None;
                   (connector as Connector).Style = new ShapeStyle() { StrokeColor = "#6d6d6d" };
                   (connector as Connector).Constraints = 0;
                   (connector as Connector).CornerRadius = 5;
               }
               private void NodeDefaults(IDiagramObject obj)
               {
                   Node node = obj as Node;
                   node.Height = 50;
                   node.Width = 150;
                   node.Style = new ShapeStyle() { Fill = "#6495ED", StrokeWidth = 1, StrokeColor = "Black" };
               }
               public class OrgChartDataModel 
               {
                   public string Id  { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                   new OrgChartDataModel() { Id= "2", Role= "Human Resource Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "3", Role= "Design Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "4", Role= "Operation Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "5", Role= "Marketing Manager", Team= "1" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Left">
            <summary>
            Aligns the child nodes at the left of the parent in a horizontal/vertical sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Right">
            <summary>
            Aligns the child nodes at the right of the parent in a horizontal/vertical sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Center">
            <summary>
            Aligns the child nodes at the center of the parent in a horizontal sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Alternate">
            <summary>
            Aligns the child nodes alternatively on both left and right sides in a vertical sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Balanced">
            <summary>
            Aligns the child nodes horizontally to balance the width and height of the sub tree.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutOrientation">
            <summary>
            Specifies the orientation of the automatic layout. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent @ref="@Diagram" Height="499px" InteractionController="@InteractionController.ZoomPan" ConnectorCreating="@ConnectorDefaults" NodeCreating="@NodeDefaults">
                <DataSourceSettings ID = "Name" ParentID="Category" DataSource="DataSource"> </DataSourceSettings>
                    <Layout @bind-Type="type" @bind-HorizontalSpacing="@HorizontalSpacing" @bind-Orientation="@orientation" @bind-VerticalSpacing="@VerticalSpacing" @bind-HorizontalAlignment="@horizontalAlignment" @bind-VerticalAlignment="@verticalAlignment" GetLayoutInfo="GetLayoutInfo">                
                    </Layout>            
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent Diagram;
               public int? HValue { get; set; } = 30;
               public int? VValue { get; set; } = 30;
               LayoutType type = LayoutType.HierarchicalTree;
               LayoutOrientation orientation = LayoutOrientation.TopToBottom;
               HorizontalAlignment horizontalAlignment = HorizontalAlignment.Auto;
               VerticalAlignment verticalAlignment = VerticalAlignment.Auto;
               int HorizontalSpacing = 30;
               int VerticalSpacing = 30;
               private void ConnectorDefaults(IDiagramObject connector)
               {
                   (connector as Connector).Type = ConnectorSegmentType.Orthogonal;
                   (connector as Connector).TargetDecorator.Shape = DecoratorShape.None;
                   (connector as Connector).Style = new ShapeStyle() { StrokeColor = "#6d6d6d" };
                   (connector as Connector).Constraints = 0;
                   (connector as Connector).CornerRadius = 5;
               }
               private TreeInfo GetLayoutInfo(IDiagramObject obj, TreeInfo options)
               {
                   options.EnableSubTree = true;
                   options.Orientation = Orientation.Horizontal;
                   return options;
               }
               private void NodeDefaults(IDiagramObject obj)
               {
                   Node node = obj as Node;
                   if (node.Data is System.Text.Json.JsonElement)
                   {
                       node.Data = System.Text.Json.JsonSerializer.Deserialize<HierarchicalDetails>(node.Data.ToString());
                   }
                   HierarchicalDetails hierarchicalData = node.Data as HierarchicalDetails;
                   node.Style = new ShapeStyle() { Fill = "#659be5", StrokeColor = "none", StrokeWidth = 2, };
                   node.BackgroundColor = "#659be5";
                   node.Width = 150;
                   node.Height = 50;
                   node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                   {
                       new ShapeAnnotation()
                       {
                           Content = hierarchicalData.Name,
                           Style =new TextStyle(){Color = "white"}
                       }
                   };
               }
               public class HierarchicalDetails 
               {
                   public string Name { get; set; }
                   public string FillColor { get; set; }
                   public string Category { get; set; }
               }
               public List<HierarchicalDetails> DataSource = new List<HierarchicalDetails>()
               {
                   new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Layout", Category="Diagram",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Tree layout", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Organizational chart", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Hierarchical tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Radial tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Mind map", Category="Hierarchical tree",FillColor="#659be5"},
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.TopToBottom">
            <summary>
            Renders the layout from top to bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.BottomToTop">
            <summary>
            Renders the layout from bottom to top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.LeftToRight">
            <summary>
            Renders the layout from left to right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.RightToLeft">
            <summary>
            Renders the layout from right to left.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Orientation">
            <summary>
            Representing the placement of child elements in a vertical or horizontal stack
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px"  SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>
            @code
            {
             private ICommonElement SetTemplate(IDiagramObject node)
             {
               var table = new StackPanel();
               table.Orientation = Orientation.Horizontal;
               return table;
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Orientation.Horizontal">
            <summary>
            Sets the orientation to Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Orientation.Vertical">
            <summary>
            Sets the orientation to Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Actions">
            <summary>
            It specifies the action to be performed in the diagram while interacting.
            </summary>
            <example>
            <code>
            <![CDATA[
            public string cursor(Actions action, bool active, string handle)
            {
                string cursors = null;
                if (action == Actions.Drag)
                cursors = "-webkit-grabbing";
                return cursors;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.None">
            <summary>
            None of the actions are performed by the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Select">
            <summary>
            Notifies when the selection happens.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Drag">
            <summary>
            Notifies when the dragging is ongoing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeWest">
            <summary>
            Notifies that the node is currently resizing to west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ConnectorSourceEnd">
            <summary>
            Notifies that the connector source points are currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ConnectorTargetEnd">
            <summary>
            Notifies that the connector Target points are currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeEast">
            <summary>
            Notifies that the node is currently resizing to east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeSouth">
            <summary>
            Notifies that the node is currently resizing to south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeNorth">
            <summary>
            Notifies that the node is currently resizing to north direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeSouthEast">
            <summary>
            Notifies that the node is currently resizing to south east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeSouthWest">
            <summary>
            Notifies that the node is currently resizing to south west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeNorthEast">
            <summary>
            Notifies that the node is currently resizing to north east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeNorthWest">
            <summary>
            Notifies that the node is currently resizing to north west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Rotate">
            <summary>
            Notifies that the node is currently rotating.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Pan">
            <summary>
            Notifies that the node is currently panning.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.BezierSourceThumb">
            <summary>
            Notifies the bezier connector source points are currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.BezierTargetThumb">
            <summary>
            Notifies that the bezier connector target points are currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.SegmentEnd">
            <summary>
            Notifies that the connector segment endpoint is currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.OrthogonalThumb">
            <summary>
            Notifies that the connector orthogonal thumb is currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.FixedUserHandle">
            <summary>
            Notifies that the fixed user handle is currently active.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Hyperlink">
            <summary>
            Notifies the hyperlink action when the mouse pointer is hovering over it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Draw">
            <summary>
            Notifies the drawing of shapes using the drawing tool.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.PortDraw">
            <summary>
            Notifies the port draw action when drawing the connector from the port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.InteractionController">
            <summary>
            Allows the users to customize the selection, zooming, and interaction behavior of the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent @ref="@diagram" Width="1000px"  Height="1000px" InteractionController="Tools" DrawingObject="@DrawingObject" Nodes="@nodes">
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent diagram;
               InteractionController Tools = InteractionController.ContinuousDraw;
               IDiagramObject DrawingObject { get; set; }
               DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
               protected override void OnInitialized()
               {
                   Node node = new Node()
                   {
                       Shape = new FlowShape() { Type = Shapes.Flow, Shape = FlowShapeType.Decision }
                   };
                   DrawingObject = node;
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InteractionController.None">
            <summary>
            It disables the selection, zooming, and interaction behavior of the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InteractionController.SingleSelect">
            <summary>
            It allows users to select one node or connector at a time.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InteractionController.MultipleSelect">
            <summary>
            It allows users to select multiple nodes and connectors. It won't allow selecting a single node/connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InteractionController.ZoomPan">
            <summary>
            It allows users to pan the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InteractionController.DrawOnce">
            <summary>
            It enables users to draw the drawing objects at once. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InteractionController.ContinuousDraw">
            <summary>
            It enables users to draw the drawing objects continuously.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InteractionController.Default">
            <summary>
            By default, it allows users to select an individual as well as multiple nodes and connectors.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RubberBandSelectionMode">
            <summary>
            Defines how to handle the selected items via rubber band selection.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RubberBandSelectionMode.CompleteIntersect">
            <summary>
            Selects the objects that are contained within the selected region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RubberBandSelectionMode.PartialIntersect">
            <summary>
            Selects the objects that are partially intersected with the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectorConstraints">
            <summary>
            Enables or disables certain behaviors and features of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.None">
            <summary>
            Hides all the selector elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ConnectorSourceThumb">
            <summary>
            Enables or disables the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ConnectorTargetThumb">
            <summary>
            Enables or disables the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouthEast">
            <summary>
            Enables or disables the bottom right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouthWest">
            <summary>
            Enables or disables the bottom left resize handle of the selector. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorthEast">
            <summary>
            Enables or disables the top right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorthWest">
            <summary>
            Enables or disables the top left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeEast">
            <summary>
            Enables or disables the middle right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeWest">
            <summary>
            Enables or disables the middle left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouth">
            <summary>
            Enables or disables the bottom center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorth">
            <summary>
            Enables or disables the top center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.Rotate">
            <summary>
            Enables or disables the rotate handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.UserHandle">
            <summary>
             Enables or disables the user handles of the selector .
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.All">
            <summary>
            Enables or disables all handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeAll">
            <summary>
            Enables or disables all resize handles of the selector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CollectionChangedAction">
            <summary>
            Specifies whether an object is added/removed from the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" SelectionChanging="@OnSelectionChanging">
            </SfDiagramComponent>
            @code
            {
                private void OnSelectionChanging(SelectionChangingEventArgs args)
                {
                    if ((args != null) && (args.NewValue != null) && (args.OldValue != null))
                    {
                        CollectionChangedAction type = args.Type;
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.CollectionChangedAction.Add">
            <summary>
            Indicates that the object has been added to the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.CollectionChangedAction.Remove">
            <summary>
            Indicates that the object has been removed from the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramAction">
            <summary>
            Stores certain diagram state information that differ based on the usecase. For example, diagram rendering is in progress or any interaction currently in progress. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Render">
            <summary>
             It indicates that the component was currently in a rendering state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.PublicMethod">
            <summary>
            It indicates that the current action was initiated through public API methods.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Interactions">
            <summary>
            It indicates whether the drag or rotate or resize interaction is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Layouting">
            <summary>
            It indicates the layout process is currently in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.IsGroupDragging">
            <summary>
            It indicates whether a group node is currently dragging in the state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.UndoRedo">
            <summary>
            It indicates that the diagram undo/redo action is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Group">
            <summary>
            It indicates group action in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.DrawingTool">
            <summary>
            It indicates whether the diagram drawing tool is currently active or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.EditText">
            <summary>
            It indicates whether any annotation is currently being edited in the state. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.MeasureDataJSCall">
            <summary>
            Indicates whether JS calling has been made.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventRefresh">
            <summary>
            Indicates to prevent the whole diagram refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PathDataMeasureAsync">
            <summary>
            Indicates whether path data is measuring has been made.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.EnableGroupAction">
            <summary>
            Enable the group action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventEventRefresh">
            <summary>
            Indicates to prevent the diagram refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.ScrollActions">
            <summary>
            Indicates to diagram is preformed scroll actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventPathDataMeasure">
            <summary>
            Indicates to prevent the path data measure.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.SymbolDrag">
            <summary>
            Indicates the symbol is being dragged from the palette
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.CancelCollectionChange">
            <summary>
            Indicates to collection change event is cancelled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.GroupingCollectionChange">
            <summary>
            Indicates to collection change event is cancelled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.RefreshSelectorLayer">
            <summary>
            Indicates to refresh the selector layer.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventDragSource">
            <summary>
            Indicates to prevent the drag source while group dragging.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ThumbsConstraints">
            <summary>
            Specifies to enables/disables the handles for the selected items
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ConnectorSource">
            <summary>
            Sets the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ConnectorTarget">
            <summary>
            Sets the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.Default">
            <summary>
            Sets all handles of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeEast">
            <summary>
            Sets the middle right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorth">
            <summary>
            Sets the top center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorthEast">
            <summary>
            Sets the top right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorthWest">
            <summary>
            Sets the top left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouth">
            <summary>
            Sets the bottom center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouthEast">
            <summary>
            Sets the bottom right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouthWest">
            <summary>
            Sets the bottom left resize handle of the selected items. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeWest">
            <summary>
            Sets the middle left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.Rotate">
            <summary>
            Sets the rotate handle of the selected items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnShapes">
            <summary>
             Represents the type of the BPMN shapes in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Gateway, 
                    Gateway = new BpmnGateway() 
                    {              
                        Type = BpmnGateways.None
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Event">
            <summary>
            Represents the Bpmn Shape as Event.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Gateway">
            <summary>
            Represents the Bpmn Shape as Gateway.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Message">
            <summary>
            Represents the Bpmn Shape as Message.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.DataObject">
            <summary>
            Represents the Bpmn Shape as Data Object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.DataSource">
            <summary>
            Represents the Bpmn Shape as Data Source.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Activity">
            <summary>
            Represents the Bpmn Shape as Activity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Group">
            <summary>
            Represents the Bpmn Shape as Group.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.TextAnnotation">
            <summary>
            Represents the shape as Text Annotation
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnEvents">
            <summary>
            In BPMN, the events are expressed as circles in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Event, 
                    Events = new BpmnSubEvent() 
                    { 
                        Event = BpmnEvents.Intermediate, 
                        Trigger = BpmnTriggers.None 
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.Start">
            <summary>
            Represents an event that starts a new process instance in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.Intermediate">
            <summary>
            Represents a process that can only continue once an event has been caught in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.End">
            <summary>
            Represents the final step of the process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.NonInterruptingStart">
            <summary>
            Represents the start of an activity along with the trigger type. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.NonInterruptingIntermediate">
            <summary>
            Represents the continuing once along with the trigger type. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.ThrowingIntermediate">
            <summary>
            Represents the intermediate events that can be attached to the trigger.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTriggers">
            <summary>
            Represents the type of the Bpmn Triggers in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Event, 
                    Events = new BpmnSubEvent() 
                    { 
                        Event = BpmnEvents.ThrowingIntermediate, 
                        Trigger = BpmnTriggers.None 
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.None">
            <summary>
            Sets the type of the task to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Message">
            <summary>
            Represents the process is started, it is facilitated, or it is completed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Timer">
            <summary>
            Represents the time and date that triggers the process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Escalation">
            <summary>
            Represents when an escalation occurs, a step is triggered and passed to another position within the organization.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Link">
            <summary>
            Represents a sub-process that is a component of a bigger process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Error">
            <summary>
             Represents an error trigger that will always interrupt the process that is contained in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Compensation">
            <summary>
            Represents a refund that occurs when procedures are partially successful.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Signal">
            <summary>
            Represents a signal that is shared by several processes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Multiple">
            <summary>
            Represents a process that is started by several triggers.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Parallel">
            <summary>
            Represents an instance of a process that does not begin, continue, or finish until all the potential events have occurred.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Cancel">
            <summary>
            Represents the cancelling of process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Conditional">
            <summary>
            Represents a process that begins or continues when a business condition or business rule is met.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Terminate">
            <summary>
            Represents a process step to be immediately terminated.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnGateways">
            <summary>
            It allows to control as well as merge and split the process flow in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Gateway, 
                    Gateway = new BpmnGateway() 
                    {              
                        Type = BpmnGateways.None
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.None">
            <summary>
            Sets the type of the gateway to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.Exclusive">
            <summary>
            Represents and evaluates the state of the business process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.Inclusive">
            <summary>
            It breaks the process flow into one or more flows.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.Parallel">
            <summary>
            Represents two concurrent tasks in a business flow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.Complex">
            <summary>
            It is used for the most complex flows in the business process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.EventBased">
            <summary>
            It is similar to an exclusive gateway because both involve one path in the flow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.ExclusiveEventBased">
            <summary>
            It evaluates the state of the business process and, based on the condition.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.ParallelEventBased">
            <summary>
            It allows multiple processes to happen at the same time.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDataObjects">
            <summary>
            Represents the transferring of data into or out of an Activity in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.DataObject, 
                    DataObject = new BpmnDataObject() 
                    { 
                        Collection = true, 
                        Type = BpmnDataObjects.Output 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjects.None">
            <summary>
            Represents the information flowing through the process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjects.Input">
            <summary>
            Represents the input for the entire process in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjects.Output">
            <summary>
            Represents the data result of the entire process in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnActivities">
            <summary>
            Defines the work that a company or organization performs in a business process using nodes in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity, 
                    Activity = new BpmnActivity() 
                    { 
                        Activity = BpmnActivities.Task, 
                        Task = new BpmnTask() { Type = BpmnTasks.BusinessRule } 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnActivities.Task">
            <summary>
            Represents the activity within a process flow. we can create a task when the activity cannot be broken down to a finer level of detail.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnActivities.None">
            <summary>
            Represents none of the Bpmn Activities are  performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnActivities.SubProcess">
            <summary>
            Represents the sub-process is a compound activity that represents a collection of other tasks and sub-processes.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnLoops">
            <summary>
            Represents the task that repeats over and over again in sequence.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity, 
                    Activity = new BpmnActivity()
                    {              
                        Activity = BpmnActivities.Task, 
                        Task = new BpmnTask() { Loop = BpmnLoops.ParallelMultiInstance } 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoops.None">
            <summary>
            Sets the type of the Bpmn loop as None, in which none of the loops will exist.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoops.Standard">
            <summary>
            Sets the type of the Bpmn loop to Standard with a repeat symbol in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoops.ParallelMultiInstance">
            <summary>
            The Parallel Multi-Instance marking denotes that the sub-process can operate in parallel with other identical sub-processes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoops.SequenceMultiInstance">
            <summary>
            Represents the instances being executed one by one.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTasks">
            <summary>
            Represents the activity within a process flow in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity, 
                    Activity = new BpmnActivity() 
                    { 
                        Activity = BpmnActivities.Task, 
                        Task = new BpmnTask { Call = true }
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.None">
            <summary>
            Sets the type of the task to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Service">
            <summary>
            Sets a task that represents a Web service, an automated application, or other kinds of service in completing the task.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Receive">
            <summary>
            Sets a task that represents the process has to wait for a message to arrive in order to continue.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Send">
            <summary>
            Sets a task that represents sending a Message to another element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.InstantiatingReceive">
            <summary>
            Sets a task that represents the process that has to be Instantiated for a message to arrive in order to continue.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Manual">
            <summary>
             Represents the aid of any business process execution engine or any application.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.BusinessRule">
            <summary>
            Represents the process of inserting data into a Business Rules Engine and eventually receiving the results.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.User">
            <summary>
            Represents that the task is completed by a human performer using a software application.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Script">
            <summary>
            Represents that the task will be completed when the script is completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSubProcessTypes">
            <summary>
            It allows to control as well as merge and split the process flow in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity,
                    Activity = new BpmnActivity() { Activity = BpmnActivities.SubProcess, SubProcess = new BpmnSubProcess { Collapsed = false, Type = BpmnSubProcessTypes.Transaction, Processes = new DiagramObjectCollection<string>() { "new" } } },
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessTypes.None">
            <summary>
            Represents none of the sub process are executed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessTypes.Transaction">
            <summary>
            Represents a composed activity that is included within a process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessTypes.Event">
            <summary>
            Represents the actions that are to be performed and expressed as circles in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnBoundary">
            <summary>
            Represents the type of the BPMN boundary.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity, 
                    Activity = new BpmnActivity() 
                    { 
                        Activity = BpmnActivities.SubProcess, 
                        SubProcess = new BpmnSubProcess { Collapsed = true, Boundary = BpmnBoundary.Default } 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnBoundary.Default">
            <summary>
            Sets the type of the boundary to Default that will be similar to the normal behaviour of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnBoundary.Call">
            <summary>
            Sets the type of  boundary to Call when the activity of the process execution arrives.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnBoundary.Event">
            <summary>
            Sets the type of  boundary to Event on an activity boundary that can  be triggered.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnFlows">
            <summary>
            Represents the transferring of data into or out of an Activity in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector4 = new Connector() 
            {
                ID = "connector4",
                SourcePoint = new DiagramPoint() { X = 100, Y = 300 },
                TargetPoint = new DiagramPoint() { X = 300, Y = 400 },
                Type = ConnectorSegmentType.Straight,
                Shape = new BpmnFlow() { Type = ConnectionShapes.Bpmn, Flow = BpmnFlows.Association, Association = BpmnAssociationFlows.Default }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlows.Sequence">
            <summary>
            Represents precisely expressing the order of execution in the flow of diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlows.Association">
            <summary>
            Represents the direction to indicate read or write access in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlows.Message">
            <summary>
            Represents the communication that crosses the boundaries of your process in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnAssociationFlows">
            <summary>
            Represents moving the data between the data objects, inputs, and outputs of the activities using nodes in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector4 = new Connector() 
            {
                ID = "connector4",
                SourcePoint = new DiagramPoint() { X = 100, Y = 300 },
                TargetPoint = new DiagramPoint() { X = 300, Y = 400 },
                Type = ConnectorSegmentType.Straight,
                Shape = new BpmnFlow() { Type = ConnectionShapes.Bpmn, Flow = BpmnFlows.Association, Association = BpmnAssociationFlows.Default }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnAssociationFlows.Default">
            <summary>
            Sets the type of Association flow to default  which  represents the next process in a flow or object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnAssociationFlows.Directional">
            <summary>
            Sets the type of Association flow to Direction in which the data will be transferred to the targeted object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnAssociationFlows.BiDirectional">
            <summary>
            Sets the type of Association flow to BiDirectional in which the data will be transferred to both the source and target objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnMessageFlows">
            <summary>
            Represents the flow of messages between separate nodes in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector4 = new Connector() 
            {
                ID = "connector4",
                SourcePoint = new DiagramPoint() { X = 100, Y = 300 },
                TargetPoint = new DiagramPoint() { X = 300, Y = 400 },
                Type = ConnectorSegmentType.Straight,
                Shape = new BpmnFlow() 
                { 
                    Type = ConnectionShapes.Bpmn, 
                    Flow = BpmnFlows.Message, 
                    Message = BpmnMessageFlows.NonInitiatingMessage 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnMessageFlows.Default">
            <summary>
            Represents a default connector line with a circular source decorator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnMessageFlows.InitiatingMessage">
            <summary>
            Represents a default connector line with a circular source decorator unfilled with a message icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnMessageFlows.NonInitiatingMessage">
            <summary>
            Represents a default connector line with a circular source decorator filled with a message icon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSequenceFlows">
            <summary>
            Represents the type of the Bpmn Sequence flows
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector4 = new Connector() 
            {
                ID = "connector4",
                SourcePoint = new DiagramPoint() { X = 100, Y = 300 },
                TargetPoint = new DiagramPoint() { X = 300, Y = 400 },
                Type = ConnectorSegmentType.Straight,
                Shape = new BpmnFlow() 
                { 
                    Type = ConnectionShapes.Bpmn, 
                    Flow = BpmnFlows.Sequence, 
                    Sequence = BpmnSequenceFlows.Default 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSequenceFlows.Normal">
            <summary>
            Represents the normal connector with any additional details in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSequenceFlows.Default">
            <summary>
            Represents the default association of a flow Node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSequenceFlows.Conditional">
            <summary>
            Represents the conditional expression in the activity of it.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorShapeType">
            <summary>
            Defines the connection shapes
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorShapeType.None">
            <summary>
            Sets the type of the connection shape as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorShapeType.Bpmn">
            <summary>
            Sets the type of the connection shape as Bpmn
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorShapeType.UmlActivity">
            <summary>
            Sets the type of the connection shape as UMLActivity
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorShapeType.UmlClassifier">
            <summary>
            Sets the type of the connection shape as UMLClassifier
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BranchType">
            <summary>
            Defines the Alignment position
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.Left">
            <summary>
            Sets the branch type as Left
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.Right">
            <summary>
            Sets the branch type as Right
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.SubLeft">
            <summary>
            Sets the branch type as SubLeft
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.SubRight">
            <summary>
            Sets the branch type as SubRight
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.Root">
            <summary>
            Sets the branch type as Root
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ModifierKeys">
            <summary>
            Specifies a combination of key modifiers, on recognition of which the command will be executed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="@diagram" Height="600px" Nodes="@nodes">
            @* Initializing the custom commands*@
                <CommandManager Commands = "@command" Execute="@CommandExecute" CanExecute="@canexe">
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                // Reference to the diagram
                SfDiagramComponent diagram;
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new KeyboardCommand()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = Keys.G, Modifiers = ModifierKeys.Control }
                    },
                    new KeyboardCommand()
                    {
                        Name = "CustomUnGroup",
                        Gesture = new KeyGesture() { Key = Keys.U, Modifiers = ModifierKeys.Control }
                    },
                };
                // Define the diagram's nodes collection
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                public void canexe(CommandKeyArgs args)
                {
                    args.CanExecute = true;
                }
                public void CommandExecute(CommandKeyArgs args)
                {
                    if (args.Gesture.Modifiers == ModifierKeys.Control && args.Gesture.Key == Keys.G)
                    {
                        //Custom command to group the selected nodes
                        diagram.Group();
                    }
                    if (args.Gesture.Modifiers == ModifierKeys.Control && args.Gesture.Key == Keys.U)
                    {
                        DiagramSelectionSettings selector = diagram.SelectionSettings;
                        //Custom command to ungroup the selected items
                        if (selector.Nodes.Count > 0 && selector.Nodes[0] is NodeGroup)
                        {
                            if ((selector.Nodes[0] as NodeGroup).Children.Length > 0)
                            {
                                diagram.UnGroup();
                            }
                        }
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.None">
            <summary>
            Specifies when no modifiers are pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.Control">
            <summary>
            Specifies the Ctrl key as a key modifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.Meta">
            <summary>
            Specifies meta key in mac.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.Alt">
            <summary>
            Specifies the alt key as a key modifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.Shift">
            <summary>
            Specifies the shift key as a key modifier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Keys">
            <summary>
             Represents the class for arranging the nodes and connectors in a tree structure.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.None">
            <summary>
            Sets the key value as null when none keys is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number0">
            <summary>
            Sets the key value as 0 when key 0 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number1">
            <summary>
            Sets the key value as 1 when key 1 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number2">
            <summary>
            Sets the key value as 2 when key 2 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number3">
            <summary>
            Sets the key value as 3 when key 3 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number4">
            <summary>
            Sets the key value as 4 when key 4 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number5">
            <summary>
            Sets the key value as 5 when key 5 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number6">
            <summary>
            Sets the key value as 6 when key 6 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number7">
            <summary>
            Sets the key value as 7 when key 7 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number8">
            <summary>
            Sets the key value as 8 when key 8 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number9">
            <summary>
             Sets the key value as 9 when key 9 is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.A">
            <summary>
            Sets the key value as A when key A is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.B">
            <summary>
            Sets the key value as B when key B is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.C">
            <summary>
             Sets the key value as C when key C is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.D">
            <summary>
             Sets the key value as D when key D is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.E">
            <summary>
            Sets the key value as E when key E is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F">
            <summary>
            Sets the key value as F when key F is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.G">
            <summary>
            Sets the key value as G when key G is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.H">
            <summary>
            Sets the key value as H when key H is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.I">
            <summary>
            Sets the key value as I when key I is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.J">
            <summary>
            Sets the key value as J when key J is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.K">
            <summary>
            Sets the key value as K when key K is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.L">
            <summary>
            Sets the key value as L when key L is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.M">
            <summary>
            Sets the key value as M when key M is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.N">
            <summary>
            Sets the key value as N when key N is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.O">
            <summary>
            Sets the key value as O when key O is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.P">
            <summary>
            Sets the key value as P when key P is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Q">
            <summary>
            Sets the key value as Q when key Q is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.R">
            <summary>
            Sets the key value as R when key R is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.S">
            <summary>
            Sets the key value as S when key S is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.T">
            <summary>
            Sets the key value as T when key T is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.U">
            <summary>
            Sets the key value as U when key U is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.V">
            <summary>
            Sets the key value as V when key V is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.W">
            <summary>
            Sets the key value as W when key W is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.X">
            <summary>
            Sets the key value as X when key X is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Y">
            <summary>
            Sets the key value as Y when key Y is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Z">
            <summary>
            Sets the key value as Z when key Z is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.ArrowLeft">
            <summary>
            Sets the key value as left when left arrow key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.ArrowUp">
            <summary>
            Sets the key value as up when up arrow key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.ArrowRight">
            <summary>
            Sets the key value as right when right arrow key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.ArrowDown">
            <summary>
            Sets the key value as down when left down key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Escape">
            <summary>
            Sets the key value as Escape when escape key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Space">
            <summary>
            Sets the key value as Space when space key is pressed.
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.PageUp">
            <summary>
            Sets the key value as PageUp when page up key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.PageDown">
            <summary>
             Sets the key value as PageDown when page down key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.End">
            <summary>
             Sets the key value as End when end key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Home">
            <summary>
            Sets the key value as Home when home key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Delete">
            <summary>
            Sets the key value as Delete when delete key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Tab">
            <summary>
             Sets the key value as Tab when tab key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Enter">
            <summary>
            Sets the key value as enter when enter key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.BackSpace">
            <summary>
            Sets the key value as BackSpace when BackSpace key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F1">
            <summary>
            Sets the key value as F1 when F1 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F2">
            <summary>
            Sets the key value as F2 when F2 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F3">
            <summary>
            Sets the key value as F3 when F3 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F4">
            <summary>
            Sets the key value as F4 when F4 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F5">
            <summary>
            Sets the key value as F5 when F5 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F6">
            <summary>
            Sets the key value as F6 when F6 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F7">
            <summary>
            Sets the key value as F7 when F7 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F8">
            <summary>
            Sets the key value as F8 when F8 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F9">
            <summary>
            Sets the key value as F9 when F9 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F10">
            <summary>
             Sets the key value as F10 when F10 key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F11">
            <summary>
             Sets the key value as F11 when F11 key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F12">
            <summary>
             Sets the key value as F12 when F12 key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Star">
            <summary>
             Sets the key value as Star when star key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Plus">
            <summary>
             Sets the key value as Plus when plus key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Minus">
            <summary>
             Sets the key value as Minus when minus key is pressed.
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SnapConstraints">
            <summary>
            Enables or disables certain features of snapping. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.None">
            <summary>
            Disables all the functionalities of snapping.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowHorizontalLines">
            <summary>
            Displays only the horizontal gridlines in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowVerticalLines">
            <summary>
            Displays only the vertical gridlines in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowLines">
            <summary>
            Display both the horizontal and the vertical gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToHorizontalLines">
            <summary>
            Enables the object to snap only with horizontal gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToVerticalLines">
            <summary>
            Enables the object to snap only with vertical gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToLines">
            <summary>
            Enables the object to snap with both the horizontal and vertical gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToObject">
            <summary>
            Enables the object to snap with other objects in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.All">
            <summary>
            Enables all the functionalities of snapping.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryEntryType">
            <summary>
             Defines the entry type
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.PositionChanged">
            <summary>
            PositionChanged - Sets the entry type as PositionChanged 
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.ConnectionChanged">
            <summary>
            ConnectionChanged - Sets the entry type as ConnectionChanged 
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.StartGroup">
            <summary>
            StartGroup - Sets the entry type as StartGroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.EndGroup">
            <summary>
            EndGroup - Sets the entry type as EndGroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.RotationChanged">
            <summary>
            RotationChanged - Sets the entry type as RotationChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.PropertyChanged">
            <summary>
            PropertyChanged - Sets the entry type as PropertyChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.CollectionChanged">
            <summary>
            CollectionChanged - Sets the entry type as CollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.LabelCollectionChanged">
            <summary>
            LabelCollectionChanged - Sets the entry type as LabelCollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.PortCollectionChanged">
            <summary>
            PortCollectionChanged - Sets the entry type as PortCollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.Group">
            <summary>
            Group - Sets the entry type as Group
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.UnGroup">
            <summary>
            UnGroup - Sets the entry type as UnGroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.SegmentChanged">
            <summary>
            SegmentChanged - Sets the entry type as SegmentChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.AnnotationPropertyChanged">
            <summary>
            AnnotationPropertyChanged - Sets the entry type as AnnotationPropertyChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.Undo">
            <summary>
            Undo - Sets the entry type as Undo
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.Redo">
            <summary>
            Redo - Sets the entry type as Redo
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.SizeChanged">
            <summary>
            SizeChanged - Sets the entry type as SizeChanged
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EntryCategory">
            <summary>
            Defines the kind of entry category from which the history will be added or modified by the user or internally.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void onCustomentry()
            {
                Node cloneobject = node1.Clone() as Node;
                cloneobject.AddInfo = new Dictionary<string, object>();
                cloneobject.AddInfo.Add(cloneobject.ID, "Description");
                HistoryEntry entry1 = new HistoryEntry();
                entry1.ChangeType = HistoryEntryChangeType.Insert;
                entry1.Category = EntryCategory.ExternalEntry;
                entry1.UndoObject = (cloneobject) as Node;
                diagram.HistoryManager.Push(entry1);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryCategory.InternalEntry">
            <summary>
            Sets the entry category type as Internal when it`s added internally.
            </summary>       
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryCategory.ExternalEntry">
            <summary>
            Sets the entry category type as External when it`s added by the user.
            </summary>   
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryChangedAction">
            <summary>
            Specifies the state of history actions such as undo and redo.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" HistoryChanged="@OnHistoryChanged">
            </SfDiagramComponent>
            private void OnHistoryChanged(HistoryChangedEventArgs arg)
            {
                if (arg.Entry != null)
                {
                    HistoryChangedAction historyChangeArgs = arg.ActionTrigger;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangedAction.CustomAction">
            <summary>
            Defines the history of action as custom action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangedAction.Undo">
            <summary>
            Sets the history action as Undo when performing an undo action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangedAction.Redo">
            <summary>
            Sets the history action as Redo when performing the redo action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.MouseButtons">
            <summary>
            Defines the value that specifies the buttons on a mouse device.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Left">
            <summary>
            Represents the left mouse button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Middle">
            <summary>
            Represents the middle mouse button
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Right">
            <summary>
            Represents the right mouse button.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryEntryChangeType">
            <summary>
            Defines the change type from which the history will be entered.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" HistoryChanged="@OnHistoryChanged">
            </SfDiagramComponent>
            private void OnHistoryChanged(HistoryChangedEventArgs arg)
            {
                if (arg.Entry != null)
                {
                    HistoryEntryChangeType historyEntryChangeType = arg.CollectionChangedAction;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryChangeType.None">
            <summary>
            Represents none of the history entries to insert/remove.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryChangeType.Insert">
            <summary>
            Represents the history inserted into the entry.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryChangeType.Remove">
            <summary>
            Represents the history  removed from the entry.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs">
            <summary>
            Provides data for the PropertyChanged event.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" Nodes="@nodes" Connectors="@connectors" PropertyChanged="@PropertyChanged">
            </SfDiagramComponent>
            @code
            { 
              private void PropertyChanged(PropertyChangedEventArgs args)
              {
                if ((args != null) && (args.Element != null) && (args.NewValue != null) && (args.OldValue != null))
                {
                  Console.WriteLine("Changed");
                }
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs.Element">
            <summary>
            Gets the object where the property change has occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs.NewValue">
            <summary>
            Gets the new value of the property that was changed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the property that was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property that has a property change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DraggingEventArgs">
            <summary>
            Notifies when an element drags over another diagram element.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" Dragging="Dragging">
            </SfDiagramComponent>
            private void Dragging(DraggingEventArgs args)
            {
                if (args.Element is DiagramSelectionSettings)
                {
                    DiagramSelectionSettings selector = args.Element as DiagramSelectionSettings;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.Element">
            <summary>
            Gets the node or connector that is dragged outside the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.Position">
            <summary>
            Gets the mouse position of the node/connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragStartEventArgs">
            <summary>
            Notifies when the element enters into the diagram from the symbol palette.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" DragStart="DragStart">
            </SfDiagramComponent>
            private void DragStart(DragStartEventArgs args)
            {
                if (args.Element is Node)
                {
                    (args.Element as Node).Width = 300;
                    (args.Element as Node).Height = 300;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragStartEventArgs.Element">
            <summary>
            Gets the node/connector over which the symbol is dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragStartEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to add or remove the symbol from the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragLeaveEventArgs">
            <summary>
            Notifies when the element leaves the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" DragLeave="DragLeave">
            </SfDiagramComponent>
            private void DragLeave(DragLeaveEventArgs args)
            {
                if (args.Element is Node)
                {
                    (args.Element as Node).Width = 300;
                    (args.Element as Node).Height = 300;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragLeaveEventArgs.Element">
            <summary>
            Gets the node or connector that is dragged outside the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DropEventArgs">
            <summary>
            Notifies when the element is dropped from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" DragDrop="DragDrop">
            </SfDiagramComponent>
            private void DragDrop(DropEventArgs args)
            {
                if (args.Element is Node)
                {
                    string id = (args.Element as NodeBase).ID;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Element">
            <summary>
            Gets the node or connector that is being dropped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Target">
            <summary>
            Gets the object from which the object will be dropped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the drop event or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Position">
            <summary>
            Gets the position of the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectionChangingEventArgs">
            <summary>
            Notifies before the select or deselect any objects from the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether the element can be selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs">
            <summary>
            Notifies when select or deselect any objects from the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs.ActionTrigger">
            <summary>
            Gets the actual cause of the event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs.NewValue">
            <summary>
            Gets the selected element after the event has triggered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs.OldValue">
            <summary>
            Gets the last selected elements, it's empty if previously, not objects have selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs.Type">
            <summary>
            Gets the item is added or removed from the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextChangeEventArgs">
            <summary>
            Notifies when the label of an element undergoes editing. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.OldValue">
            <summary>
            Gets the old text value of the element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.NewValue">
            <summary>
            Gets the new text value of the element that is being changed 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.Element">
            <summary>
            Gets a node or connector in which annotation is being edited 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.Annotation">
            <summary>
            Represents the annotation which is being edited. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the event or not. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs">
            <summary>
            Provides information about current mouse events like mouse down, mouse move, etc. 
            </summary>
            <remarks>
            It will return the event properties when a mouse down, mouse move, mouse leave, or mouse up event occurs based on the tool which is currently active, like resize, clone tool, etc.
            </remarks>
            <example>
            <code>
            <![CDATA[
            public class CloneTool : DragController
            {
                public CloneTool(SfDiagramComponent diagram) : base(diagram)
                {
                }
                public override void OnMouseDown(DiagramMouseEventArgs args)
                {
                    NodeBase newObject;
                    if (Diagram.SelectionSettings.Nodes.Count > 0)
                    {
                        newObject = (Diagram.SelectionSettings.Nodes[0]).Clone() as Node;
                    }
                    else
                    {
                        newObject = (Diagram.SelectionSettings.Connectors[0]).Clone() as Connector;
                    }
                    newObject.ID += Diagram.Nodes.Count.ToString();
                    Diagram.Copy();
                    Diagram.Paste();
                    ObservableCollection<IDiagramObject> obj = new ObservableCollection<IDiagramObject>() { Diagram.Nodes[Diagram.Nodes.Count - 1] as IDiagramObject };
                    Diagram.Select(obj);
                    args.Element = Diagram.SelectionSettings.Nodes[0] as IDiagramObject;
                    base.OnMouseDown(args);
                    this.InAction = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Position">
            <summary>
            Gets the current position of the mouse pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.ActualObject">
            <summary>
            Gets the actual node or connector which is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Element">
            <summary>
            Gets or sets the selector object which is currently selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.SourceWrapper">
            <summary>
            Gets or sets the wrapper of the source object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Target">
            <summary>
            Gets or sets the object under the source objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.TargetWrapper">
            <summary>
            Gets or sets the wrapper of the target object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.ClickCount">
            <summary>
            Gets the number of times it clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PositionChangingEventArgs">
            <summary>
            Notifies before the node or connector is dragging or its position is changing.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" PositionChanging="@changed">
            </SfDiagramComponent>
            private void changed(PositionChangingEventArgs args)
            {
                if (args.NewValue != null && args.OldValue != null && args.Element != null)
                {
                    Console.WriteLine("Changing");
                }
            }    
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PositionChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates the user prevents dragging of element over the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PositionChangedEventArgs">
            <summary>
            Notifies when the node or connector is dragged or its position is changed.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" PositionChanged="@changed">
            </SfDiagramComponent>
            private void changed(PositionChangedEventArgs args)
            {
                if (args.NewValue != null && args.OldValue != null && args.Element != null)
                {
                    Console.WriteLine("Changed");
                }
            }    
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PositionChangedEventArgs.NewValue">
            <summary>
            Gets the selector’s current value in which the node or the connector is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PositionChangedEventArgs.OldValue">
            <summary>
            Gets the Selector old value in which the node or the connector is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PositionChangedEventArgs.Element">
            <summary>
            Gets the node or connector that is being dragged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionObject">
            <summary>
            Specifies the source and the target details of the connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.SourceID">
            <summary>
            Gets the source node id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.SourcePortID">
            <summary>
            Gets the source port id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.TargetID">
            <summary>
            Gets the target node id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.TargetPortID">
            <summary>
            Gets the target port id of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionChangingEventArgs">
            <summary>
            Notifies before the connector’s source id or target id has changing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangingEventArgs.Cancel">
            <summary>
            Defines whether the user can prevent the connection or disconnection of the connector while its endpoint is dragging.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs">
            <summary>
            Notifies when the connector’s source id or target id has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs.Connector">
            <summary>
            Returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs.ConnectorAction">
            <summary>
            Returns whether it is a source end or a target end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs.NewValue">
            <summary>
            Represents the current source or target node while dragging the endpoint of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs.OldValue">
            <summary>
            Specifies the previous source or target node of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RotationChangingEventArgs">
            <summary>
            RotationChangingEventArgs notifies before the node/connector are rotating
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RotationChangedEventArgs">
            <summary>
            RotationChangedEventArgs notifies when the node/connector are rotated
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationChangedEventArgs.Element">
            <summary>
            Gets the node that is selected for rotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationChangedEventArgs.OldValue">
            <summary>
            Gets the previous rotation angle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationChangedEventArgs.NewValue">
            <summary>
            Gets the new rotation angle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SizeChangingEventArgs">
            <summary>
            Notifies when the element is resizing.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" SizeChanging="@OnSizeChange" />
            @code
            {
                // To define the node collection
                DiagramObjectCollection<Node> nodes;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    // A node is created and stored in the nodes collection.
                    Node node = new Node()
                    {
                        // Position of the node
                        OffsetX = 250,
                        OffsetY = 250,
                        // Size of the node
                        Width = 100,
                        Height = 100,
                        Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                    };
                    // Add a node
                    nodes.Add(node);
                }
                // Size change event for the diagram
                public void OnSizeChange(SizeChangingEventArgs args)
                {
                    Console.WriteLine(args.NewValue.Nodes[0].ID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SizeChangedEventArgs">
            <summary>
            Notifies when the element is resized.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" SizeChanged="@SizeChanged" />
            @code
            {
                // To define the node collection
                DiagramObjectCollection<Node> nodes;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    // A node is created and stored in the nodes collection.
                    Node node = new Node()
                    {
                        // Position of the node
                        OffsetX = 250,
                        OffsetY = 250,
                        // Size of the node
                        Width = 100,
                        Height = 100,
                        Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                    };
                    // Add a node
                    nodes.Add(node);
                }
                // Size change event for the diagram
                public void SizeChanged(SizeChangedEventArgs args)
                {
                    Console.WriteLine(args.NewValue.Nodes[0].ID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangedEventArgs.Element">
            <summary>
            Returns the element which has been selected for the resizing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangedEventArgs.OldValue">
            <summary>
            Returns the previous width, height, offsetX and offsetY values of the element that is resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangedEventArgs.NewValue">
            <summary>
            Returns the new width, height, offsetX and offsetY values of the element that is resized
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EndPointChangingEventArgs">
            <summary>
            Represents before the source and target points of the connector are changing.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" TargetPointChanging="@OnTargetPointChanging">
            </SfDiagramComponent>
            private void OnTargetPointChanging(EndPointChangingEventArgs args)
            {
                if (args.Connector != null)
                {
                    Connector connector = args.Connector;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the change or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs">
            <summary>
            Represents the source and target points of the connector are changed.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" TargetPointChanged="@OnTargetPointChanged">
            </SfDiagramComponent>
            private void OnTargetPointChanged(EndPointChangedEventArgs args)
            {
                if (args.Connector != null)
                {
                    Connector connector = args.Connector;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.Connector">
            <summary>
            Gets the current connector from which the source point or target point is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.OldValue">
            <summary>
            Gets the previous point of the mouse pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.NewValue">
            <summary>
            Gets the current point of the mouse pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.TargetNodeID">
            <summary>
            Gets the target node of the connector while dragging the end point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.TargetPortID">
            <summary>
            Gets the target port of the node that is to be connected with  the connector while dragging the end point.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs">
            <summary>
            Notifies when the fixed user handle gets clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs.FixedUserHandle">
            <summary>
            Represents the instance of the clicked fixed user handle. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs.Element">
            <summary>
            Gets nodes/connector which have the clicked fixed user handle. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandKeyArgs">
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="@diagram" Height="600px" Nodes="@nodes">
            @* Initializing the custom commands*@ 
                <CommandManager Commands = "@command" Execute="@CommandExecute" CanExecute="@canexe">
                </CommandManager>
            </SfDiagramComponent>
            @code
            { 
                // Reference to the diagram
                SfDiagramComponent diagram;
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new KeyboardCommand()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = Keys.G, Modifiers = ModifierKeys.Control }
                    },
                    new KeyboardCommand()
                    {
                        Name = "CustomUnGroup",
                        Gesture = new KeyGesture() { Key = Keys.U, Modifiers = ModifierKeys.Control }
                    },
                };
                // Define the diagram's nodes collection
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                public void canexe(CommandKeyArgs args)
                {
                    args.CanExecute = true;
                }
                public void CommandExecute(CommandKeyArgs args)
                {
                    if (args.Gesture.Modifiers == ModifierKeys.Control && args.Gesture.Key == Keys.G)
                    {
                        //Custom command to group the selected nodes
                        diagram.Group();
                    }
                    if (args.Gesture.Modifiers == ModifierKeys.Control && args.Gesture.Key == Keys.U)
                    {
                        DiagramSelectionSettings selector = diagram.SelectionSettings;
                        //Custom command to ungroup the selected items
                        if (selector.Nodes.Count > 0 && selector.Nodes[0] is NodeGroup)
                        {
                            if ((selector.Nodes[0] as NodeGroup).Children.Length > 0)
                            {
                                diagram.UnGroup();
                            }
                        }
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.Name">
            <summary>
            Specifies the name of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.CanExecute">
            <summary>
            Defines the method that determines whether the command can be executed in its current state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.Gesture">
            <summary>
            Specifies a combination of keys and key modifiers, on recognition of which the command should be executed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyEventArgs">
            <summary>
            Notifies while performing the key actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.Element">
            <summary>
            Returns the selected element of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.Key">
            <summary>
            Returns the value of the key action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.KeyCode">
            <summary>
            Returns a number that represents the actual key pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.KeyModifiers">
            <summary>
            Returns any modifier keys that were pressed when the flick gesture occurred.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs">
            <summary>
            Represents the class which is used to notifies while the changes occurs during undo/redo process.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.Source">
            <summary>
            Gets the collection of objects that are changed in the last undo/redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.Entry">
            <summary>
            Gets the previous and new value of the history object that has been changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.Type">
            <summary>
            Gets the type of the newly added entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.CollectionChangedAction">
            <summary>
             Gets the entry's change type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.ActionTrigger">
            <summary>
            Gets the event action.
            </summary>       
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CollectionChangingEventArgs">
            <summary>
            Notifies before the node/connector is added or removed from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" CollectionChanging="@collection">
            </SfDiagramComponent>
            @code
            {
                private void collection(CollectionChangingEventArgs args)
                {
                    if (args.Element != null)
                    {
                        Console.WriteLine("CollectionChanging");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the change or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CollectionChangedEventArgs">
            <summary>
            Notifies while the node/connector is added or removed from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" CollectionChanged="@collection">
            </SfDiagramComponent>
            @code
            {
                private void collection(CollectionChangedEventArgs args)
                {
                    if (args.Element != null)
                    {
                        Console.WriteLine("CollectionChanged");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangedEventArgs.ActionTrigger">
            <summary>
            Gets the current action, like Interactions, Drawing Tools, etc., to be performed in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangedEventArgs.Element">
            <summary>
            Gets the actual object which is added, removed, or modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangedEventArgs.Action">
            <summary>
            Gets the type of collection change like addition or removal.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ClickEventArgs">
            <summary>
            Notifies when clicking on an object or diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" Click="click">
            </SfDiagramComponent>
            @code
            {
                private void click(ClickEventArgs args)
                {
                    if (args.ActualObject != null)
                    {
                        Console.WriteLine("Clicked");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.ActualObject">
            <summary>
            Gets the object to be clicked on. It returns null when there is no object present in the clicked position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Count">
            <summary>
            Gets the number of times the object or diagram has to be clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Element">
            <summary>
            Gets the object if the clicked position has an object or returns the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Button">
            <summary>
            Gets the mouse button that has to be clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Position">
            <summary>
            Gets the clicked position in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramElementMouseEventArgs">
            <summary>
            Notifies when the mouse events such as mouse enter, mouse leave, and mouseover are detected.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" Nodes="@nodes" Connectors="@connectors" MouseEnter="@MouseEnter">
            </SfDiagramComponent>
            @code
            {
              private void MouseEnter(DiagramElementMouseEventArgs args)
              {
                if ((args != null) && (args.ActualObject != null))
                {
                    Console.WriteLine("Mouse Entered");
                }
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramElementMouseEventArgs.ActualObject">
            <summary>
            Gets the object such as a node or connector when it is dragged from the symbol palette into the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramElementMouseEventArgs.Element">
            <summary>
            Gets the helper element from the symbol palette into the diagram while dragging
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramElementMouseEventArgs.Targets">
            <summary>
            Gets the collection of objects over which the selected items are dragged
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollChangedEventArgs">
            <summary>
            ScrollChangedEventArgs notifies when the scroller has changed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangedEventArgs.ZoomFactor">
            <summary>
            gets the current close-up view of the diagram. By default, ZoomFactor is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangedEventArgs.ScrollX">
            <summary>
            Gets the value of the horizontal scroll offset. By default, the ScrollX is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangedEventArgs.ScrollY">
            <summary>
            Gets the value of the vertical scroll offset. By default, the ScrollY is set to 0.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs">
            <summary>
            SegmentCollectionChangeEventArgs notifies while the segment of the connectors changes
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.AddedSegments">
            <summary>
            Gets the action of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Element">
            <summary>
            Gets the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.RemovedSegments">
            <summary>
            Gets the removed segment collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Type">
            <summary>
            Gets the type of the collection change.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryAddingEventArgs.Entry">
            <summary>
            Gets the history object that has been added to the history list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryAddingEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the added or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Copy">
            <summary>
            Copy method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CopyObjects">
            <summary>
            copyObjects method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Cut">
            <summary>
            Cut method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.IsGroupObjects(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},System.String)">
             <summary>
            When select group children as rubber band selection, check the node is in selected item.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetSelectionItems(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
             <summary>
            Get selected item, when select item as rubber band selection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SnappingInstance">
              @private  
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.TranslateBezierPoints(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Actions,System.Double,System.Double,Syncfusion.Blazor.Diagram.BezierSegment,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Boolean})">
            <summary>
             Translate the bezier points during the interaction
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ScalePreviewObject(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Apply scaling value for the preview item.
            </summary>
            <param name="sw"></param>
            <param name="sh"></param>
            <param name="pivot"></param>
            <param name="refObject"></param>
            <param name="uWidth"></param>
            <param name="uHeight"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandle">
            <summary>
            Represents the behavior of fixeduserhandle. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.FixedUserHandle)">
            <summary>
            Creates a new instance of the FixedUserHandle from the given FixedUserHandle. 
            </summary>
            <param name="src">FixedUserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.FixedUserHandle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.ID">
            <summary>
            Gets or sets the unique id of the diagram object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.PathData">
            <summary>
            Gets or sets the shape information of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Fill">
            <summary>
            Gets or sets the fill color of the fixed user handle. By default, it is transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Stroke">
            <summary>
            Gets or sets the stroke color of the fixed user handle container. By default, it is transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.IconStrokeThickness">
            <summary>
            Gets or sets the stroke width of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Height">
            <summary>
            Gets or sets the height of the fixed user handle. By default, it is 10px.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Width">
            <summary>
            Gets or sets the width of the fixed user handle. By default, it is 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.CornerRadius">
            <summary>
            Gets or sets the corner radius of the fixed user handle container. By default, it is 0. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.IconStroke">
            <summary>
            Gets or sets the stroke color of the fixed user handle. By default, it is black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.StrokeThickness">
            <summary>
            Gets or sets the stroke width of the fixed user handle container. By default, it is 1px.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Padding">
            <summary>
            Gets or sets the space between the fixed user handle and the container. By default, it is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Visibility">
            <summary>
            Gets or sets the visibility of the fixed user handle. By default, it is True.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.Clone">
            <summary>
            Creates a new object that is a copy of the current FixedUserHandle.
            </summary>
            <returns>FixedUserHandle</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle">
            <summary>
            Represents the node’s fixed user handle. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.NodeFixedUserHandle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle"/> from the given NodeFixedUserHandle.
            </summary>
            <param name="src">NodeFixedUserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Offset">
            <summary>
            Gets or sets the position of the node fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Margin">
            <summary>
            Gets or sets the extra space around the outer boundaries of the fixed user handle. By default, it is 0 from all the sides.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Clone">
            <summary>
            Creates a new object that is a copy of the current NodeFixedUserHandle.
            </summary>
            <returns>NodeFixedUserHandle</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle">
            <summary>
            Represents the connector fixed user handle.
            </summary>
            <remarks>
            The fixed user handles are used to add some frequently used commands around the node and connector even without selecting it.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                Type = ConnectorSegmentType.Orthogonal,
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                // A fixed user handle is created and stored in the fixed user handle collection of the Connector.
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25,
                        Width = 25,
                        Offset = 0.5,
                        Alignment = FixedUserHandleAlignment.After,
                        Displacement = new DiagramPoint { Y = 10 },
                        Visibility = true,Padding = new Margin() { Bottom = 1, Left = 1, Right = 1, Top = 1 },
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/>.
            </summary>
            <param name="src">ConnectorFixedUserHandle.</param>
            
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Offset">
            <summary>
            Gets or sets the position of the connector fixed user handle. By default, it is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Alignment">
            <summary>
            Gets or sets the alignment of the fixed user handle. By default, it is aligned at the center.
            </summary>
            <remarks>
            The below list explains the alignment options.
            <table style = "border: none">
            <tr>
            <td style = "border:none">1. Center, aligns the fixedUserHandle on the connector segment.</td>
            </tr>
            <tr>
            <td style = "border:none">2. Before, aligns the fixedUserHandle on top of a connector segment.</td>
            </tr>
            <tr>
            <td style = "border:none">3. After, aligns the fixedUserHandle at the bottom of a connector segment.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Displacement">
            <summary>
            Gets or sets the displacement(margin) of the fixed user handle. Applicable only if the parent is a connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Clone">
            <summary>
            Creates a new object that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/>.
            </summary>
             <returns>ConnectorFixedUserHandle</returns>        
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ICommonController">
            <summary>
            Represents the class for all common tools.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram element and a mouse button is pressed.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram element and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the diagram element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.InteractionControllerBase">
            <summary>
            Represents the interactive tools.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.InAction">
            <summary>
            Allows to decide whether an element in action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.CurrentPosition">
            <summary>
            Gets or sets the current position of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.PreviousPosition">
            <summary>
            Gets or sets the previous position of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.StartPosition">
            <summary>
            Gets or sets the starting point of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.CurrentElement">
            <summary>
            Gets or sets the current selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.MouseDownElement">
            <summary>
            Gets or sets the element on which mouse is clicked.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Creates a new instance of the toolbase from the given toolbase.
            </summary>
            <param name="diagram">SfDiagramComponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.StartAction(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method triggers when an action is going to start.
            </summary>
            <param name="currentElement"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is released.  
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.UpdateSize(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Actions,Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            This method invokes when the size of the rect is updated.
            </summary>
            <param name="shape">Selector</param>
            <param name="startPoint">Point</param>
            <param name="endPoint">Point</param>
            <param name="corner">Actions</param>
            <param name="initialBounds">DiagramRect</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ResizeController">
            <summary>
            Represents the class that helps to scale the selected objects. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ResizeController.prevPosition">
            <summary>
            Sets/Gets the previous mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.Actions)">
            <summary>
            Creates a new instance of the ResizeTool from the given ResizeTool.
            </summary>
            <param name="diagram">SfDiagramComponent</param>
            <param name="corner">Actions</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event that occurs while the user down`s the cursor over a selector resize handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event that occurs while the use’sr mouse moves over a selector resize handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when an mouse up event that occurs while the user releases over a selector resize handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse leave event that occurs while the user leaves a selector resize handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.ScaleObjects(System.Double,System.Double,Syncfusion.Blazor.Diagram.Actions,Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
            Updates the size with delta width and delta height using scaling.
            </summary>
            <param name="deltaWidth"></param>
            <param name="deltaHeight"></param>
            <param name="corner"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectionController">
            <summary>
            Represents the class that helps to select the objects.  
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse clicks on the element. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse clicks and drags the selected element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse clicks on the selected element. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the selected element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PolylineDrawingController">
            <summary>
            Represents the class that is used to draw a polyline connector dynamically using the PolyLine Drawing Tool. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event occurs with a drawing tool and PolyLine type in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event occurs with a drawing tool and PolyLine type in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse-up event occurs with a drawing tool and PolyLine type in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse leave event occurs with a drawing tool and PolyLine type in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorDrawingController">
            <summary>
            Represents the class that is used to draw a connector. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram and a mouse button is pressed.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse button is clicked on the connector end thumb and the thumb is moved over the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the connector and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeDrawingController">
            <summary>
            Represents the class that is used to draw a node that is defined by the user. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeDrawingController.prevPosition">
            <summary>
            the previous mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram and a mouse button is pressed.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse button is pressed and a mouse pointer is moved over the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the node and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PolygonDrawingController">
            <summary>
            Represents the class that is used to draw a polygon shape node dynamically using the polygon Tool. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolygonDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event occurs with a drawing tool and polygon shapes in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolygonDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event occurs with a drawing tool and polygon shapes in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolygonDrawingController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse leave event occurs with a drawing tool and polygon shapes in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RotationController">
            <summary>
            Represents the class that helps to rotate the selected objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event that occurs while the user down`s the cursor over a selector rotate handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event that occurs while the user’s mouse moves over a selector rotating handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when an mouse up event that occurs while the user releases over a selector rotating handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse leave event that occurs while the user leaves a selector’s rotating handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleController">
            <summary>
            Represents the class that is used to handle the fixed userhandle events. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandleController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse clicks on the fixed user handle.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ZoomPanController">
            <summary>
             Represents the class that is used to pan the diagram control on drag.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram and a mouse button is clicked.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is released. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragController">
            <summary>
            Represents the class that helps to move (drag) the selected objects.  
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Creates a new instance of the MoveTool from the given MoveTool.
            </summary>
            <param name="diagram"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is clicked.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is released. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LabelController">
            <summary>
             Represents the class that is used to open the hyperlink from the node’s annotation at mouse up. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LabelController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse pointer is moved over the annotation hyperlink and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionController">
            <summary>
            Represents the class that helps to connect the connector with the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event occurs in a connector target point or source point.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event occurs in a connector target point or source point.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>IsConnected</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse-up event occurs in at a connector target point or source point.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse leave event occurs in a connector target point or source point.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.UserHandle">
            <summary>
            Represents how to execute the commonly or frequently used commands around the nodes, connectors and groups. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.UserHandle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Name">
            <summary>
            Gets or sets the name of the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.ID">
            <summary>
            Gets or sets the unique id of the diagram object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.PathData">
            <summary>
            Represents the custom geometry(shape) of the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Source">
            <summary>
            Gets or sets the image source of the user handle. Applicable only if it is an image. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BackgroundColor">
            <summary>
            Gets or sets the background color of the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Side">
            <summary>
            Gets or sets the position of user Handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BorderColor">
            <summary>
            Gets or sets the border color of the user handle. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BorderWidth">
            <summary>
            Gets or sets the border width of the user handle. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Size">
            <summary>
            Gets or sets the size of the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.PathColor">
            <summary>
            Gets or sets the stroke color of the shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Displacement">
            <summary>
            Gets or sets the displacement(margin) of the user handle. Applicable only if the parent is a connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Visible">
            <summary>
            Gets or sets the visibility of the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Offset">
            <summary>
            Gets or sets the X and Y coordinates of the user handle, by default it is 0,0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Margin">
            <summary>
            Gets or sets the extra space around the outer boundaries of the user handle. Applicable only if the parent is a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the user handle. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Template">
            <summary>
            Gets or sets the geometry of the html element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.#ctor(Syncfusion.Blazor.Diagram.UserHandle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.UserHandle"/> from the given UserHandle.
            </summary>
            <param name="src">UserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.Clone">
            <summary>
            Creates a new user handle that is a copy of the current user handle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramContent">
            <summary>
            Represents how the diagram objects are rendered in the diagram. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramContent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramHtmlContainer">
            <summary>
            Represents how the basic HTML building blocks are rendered in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramHtmlContainer.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent">
            <summary>
            Represents the objects that are rendered in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramSelectorContent">
            <summary>
            Represents the selector objects that are rendered in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramSelectorContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramUserHandleContent">
            <summary>
            Represents the frequently used commands that are rendered around the selector objects in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUserHandleContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs">
            <summary>
            Notifies the mouse events, keyboard and scrolling action in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.EventInvokeValue">
            <summary>
             Represents the scroller related actions to conform whether the scroller is updated or not in UI level. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.AltKey">
            <summary>
            Returns whether the alt key has been pressed or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ClientX">
            <summary>
            Represents the horizontal coordinate of a touch point relative to the  viewport. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ClientY">
            <summary>
            Represents the vertical coordinate of a touch point relative to the viewport.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.OffsetX">
            <summary>
            Represents the x coordinate in the diagram where the mouse events happened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.OffsetY">
            <summary>
            Represents the y coordinate in the diagram where the mouse events happened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.CtrlKey">
            <summary>
            Returns whether the ctrl key has been pressed or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Detail">
            <summary>
            Represents the title of the symbol group. By default, it is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.MetaKey">
            <summary>
            Represents whether the mac meta key is pressed inside the diagram or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ScreenX">
            <summary>
             Represents the horizontal distance between the left side of the screen. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ScreenY">
            <summary>
            Represents the vertical distance between the top side of the screen. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ShiftKey">
            <summary>
            Returns whether the shift key has been pressed or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Type">
            <summary>
            Represents the type of action like mouse movement, down or up in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.WheelDelta">
            <summary>
            Return the mouse scroll bar wheel data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.DiagramGetBoundingClientRect">
            <summary>
            Represents the position of the diagram where it is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.DiagramCanvasScrollBounds">
            <summary>
            Represents the scroller’s left, top, width and height of the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Key">
            <summary>
            Represents the key which is pressed inside the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.KeyCode">
            <summary>
            Represents the key code which is pressed inside the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Button">
            <summary>
            Represents the button that has been clicked in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.TransformFactor">
            <summary>
            Represents the transformation factor of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TransformFactor.TX">
            <summary>
            Returns the distance between X old coordinates has to be moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TransformFactor.TY">
            <summary>
            Returns the distance between Y old coordinates has to be moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TransformFactor.Scale">
            <summary>
            Returns how the text element fits inside the text element. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ConnectorSegmentJsonConverter">
            <summary>
            Represents the serialization and deserialization of the ConnectorSegment. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorSegmentJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the specified type can be converted. 
            </summary>
            <param name="typeToConvert">Type</param>
            <returns>IsAssignableFrom</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorSegmentJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type T. 
            </summary>
            <param name="reader">Utf8JsonReader</param>
            <param name="typeToConvert">Type</param>
            <param name="options">JsonSerializerOptions</param>
            <returns>ConnectorSegment</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorSegmentJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.ConnectorSegment,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON. 
            </summary>
            <param name="writer">Utf8JsonWriter</param>
            <param name="value">ConnectorSegment</param>
            <param name="options">JsonSerializerOptions</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter">
            <summary>
             Represents the serialization and deserialization of the Gradient. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the specified type can be converted. 
            </summary>
            <param name="typeToConvert">Type</param>
            <returns>IsAssignableFrom</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type Gradient.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.GradientBrush,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.NodeJsonConverter">
            <summary>
            Represents the serialization and deserialization of the Node. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.NodeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the specified type can be converted. 
            </summary>
            <param name="typeToConvert">Type</param>
            <returns>IsAssignableFrom</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.NodeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type T. 
            </summary>
            <param name="reader">Utf8JsonReader</param>
            <param name="typeToConvert">Type</param>
            <param name="options">JsonSerializerOptions</param>
            <returns>Node</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.NodeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.Node,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON. 
            </summary>
            <param name="writer">Utf8JsonWriter</param>
            <param name="value">Node</param>
            <param name="options">JsonSerializerOptions></param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ShapeJsonConverter">
            <summary>
            Represents the serialization and deserialization of the shape. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ShapeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the specified type can be converted. 
            </summary>
            <param name="typeToConvert">Type</param>
            <returns>IsAssignableFrom</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ShapeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type T. 
            </summary>
            <param name="reader">Utf8JsonReader</param>
            <param name="typeToConvert">Type</param>
            <param name="options">JsonSerializerOptions</param>
            <returns>Shape</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ShapeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.Shape,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON. 
            </summary>
            <param name="writer">Utf8JsonWriter</param>
            <param name="value">Shape</param>
            <param name="options">JsonSerializerOptions</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.LayoutInfo">
            <summary>
            Represents the necessary information about a node's children and the way to arrange them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Type">
            <summary>
            Specifies the collection of subtree alignments in a layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Orientation">
            <summary>
            Arranges the child nodes with the parent based on its type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Offset">
            <summary>
            Specifies the position of the node to be arranged. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.HasSubTree">
            <summary>
            Specifies whether the layout contains a subtree or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.SubTreeTranslation">
            <summary>
            Represents the value to be moved in the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Tree">
            <summary>
            Represents the arrangement of the nodes in the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.CanMoveBy">
            <summary>
            Represents the breadth space for assistants.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Translate">
            <summary>
            Represents the same positions to be arranged for the leaf in the tree. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.X">
            <summary>
            Represents the value of the X coordinate in a layout .
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Y">
            <summary>
            Represents the value of the Y coordinate in a layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Intersect">
            <summary>
            Represents the collection of values where the subtree has been positioned.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Mid">
            <summary>
            Represents the mid value of the layout in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.MaxLevel">
            <summary>
            Represents the highest number of levels in the layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Translated">
            <summary>
            Represents whether the translate has been completed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Diff">
            <summary>
            Represents the space to be left from the previous sub tree. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.ActualLevel">
            <summary>
            Represents the exact level of the tree in the layout. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.IConnector">
            <summary>
            Defines the properties of the connector
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnShapes">
            <summary>
            Defines the BpmnShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnTriggerShapes">
            <summary>
            Defines the BpmnTriggerShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnGatewayShapes">
            <summary>
            Defines the BpmnGatewayShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnLoopShapes">
            <summary>
            Defines the BpmnLoopShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnTaskShapes">
            <summary>
            Defines the BpmnTaskShapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnTriggerShapePathData(System.String)">
            <summary>
            The GetBpmnTriggerShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnGatewayShapePathData(System.String)">
            <summary>
            The GetBpmnGatewayShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnTaskShapePathData(System.String)">
            <summary>
            The GetBpmnTaskShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnLoopShapePathData(System.String)">
            <summary>
            The GetBpmnLoopShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnShapePathData(System.String)">
            <summary>
            The GetBpmnShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetPathPointsCollection(System.String)">
            <summary>
            The GetPathPointsCollection.
            </summary>
            <param name="data">The data<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetCustomPathPointsCollection(System.String)">
            <summary>
            The GetPathPointsCollection.
            </summary>
            <param name="data">The data<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer">
            <summary>
            Represents the object to be rendered in the diagram once the data has been processed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.FragmentParameter">
            <summary> 
            RenderingParameters class is used to pass the parameter collection in render fragment
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.SubTextElement">
            <summary>
            Represents the properties of a sub text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Text">
            <summary>
            Returns the text from the sub text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.X">
            <summary>
            Returns the start position where the text element is to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Dy">
            <summary>
            Returns the left position where the text is to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Width">
            <summary>
            Returns the width of the sub text element. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.TextBounds">
            <summary>
            Represents the properties of text bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextBounds.X">
            <summary>
            Returns the width of the sub text element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextBounds.Width">
            <summary>
            Returns the start position where the text element is to be rendered.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.PathInformation">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.Diagram.Internal.PathInformation" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.Path">
            <summary>
            Gets or sets the Path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.Points">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.StartPoint">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.TargetPoint">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramUtil">
            <summary>
            Represents how to handle constraint related validation/checking to render objects in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.BezierPoints(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Int32,System.Double)">
            <summary>
             Get the intermediate bezier curve for point over connector
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.GetString(Syncfusion.Blazor.Diagram.Internal.PathSegment)">
            @private 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding">
            <summary>
            Represents the data sources that are bound together with the objects in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.PaletteContent">
            <summary>
            Represents the content of the palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PaletteContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PaletteContent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1">
            <summary>
            Represents a dynamic data collection that provides notifications when nodes or connectors or annotations or ports are added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">T</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.AddAsync(`0)">
            <summary>
            Add the objects to the diagram object collection asynchronously. It is applicable only to ports and annotations.
            </summary>
            <param name="item">Item</param>
            <returns>Diagram Object</returns>
            <example>
            <code>
            <![CDATA[
            //Method for adding labels at runtime
            public async void AddLabel()
            {
               ShapeAnnotation annotation = new ShapeAnnotation { Content = "Annotation" };
               await (diagram.Nodes[0].Annotations as DiagramObjectCollection<ShapeAnnotation>).AddAsync(annotation);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.#ctor">
            <summary>
            Initializes a new instance of the DiagramObjectCollection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of the DiagramObjectCollection from the given DiagramObjectCollection.
            </summary>
            <param name="collection">DiagramObjectCollection</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.ClearItems">
            <summary>
            Removes all the elements from the diagram object collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramHistoryManager">
            <summary>
            Notifies when changes are reverted or restored.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.ChildContent">
            <summary>
            Sets the child content for the scroll settings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.CanUndo">
            <summary>
            Decides whether the history entry can be undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.CanRedo">
            <summary>
            Decides whether the history entry can be redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.CurrentEntry">
            <summary>
            Specifies the current entry object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Push(Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            Stores a history entry on the history list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Undo">
            <summary>
             The method will be called when the custom entry is in undo stage.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent Width="800px" Height="800px">
                 <DiagramHistoryManager Undo="onCustomUndo"></DiagramHistoryManager>
             </SfDiagramComponent >
             @code
             {
                 private void onCustomUndo(HistoryEntryBase entry)
                 {
                     (entry.RedoObject) = entry.UndoObject.Clone() as Node;
                     (entry.UndoObject as Node).AdditionalInfo[(entry.UndoObject as Node).ID] = "Start";
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Redo">
            <summary>
            The method will be called when the custom entry is in the redo stage.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width="800px" Height="800px">
                <DiagramHistoryManager Redo="onCustomRedo"></DiagramHistoryManager>
            </SfDiagramComponent>
            @code
            {
                private void onCustomRedo(HistoryEntryBase entry)
                {
                    Node current = entry.UndoObject.Clone() as Node;
                    (entry.UndoObject as Node).AdditionalInfo[(entry.UndoObject as Node).ID] = "Description";
                    entry.RedoObject = current;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.StartGroupAction">
            <summary>
            History allows you to revert or restore multiple changes through a single undo/redo command. It is used to start the grouping of changes.
            </summary>
            <example>
            <code>
            <![CDATA[
            //Start the grouping of changes 
            diagram.StartGroupAction();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.EndGroupAction">
            <summary>
             Used to intimate the group action is end
             </summary>
             <example>
             <code>
             <![CDATA[
             //End the grouping of changes
             diagram.EndGroupAction();
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.HistoryAdding">
            <summary>
             Decides whether the changes are stored in the history or not.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent Width="800px" Height="800px">
                 <DiagramHistoryManager HistoryAdding="OnHistoryAdding"></DiagramHistoryManager>
             </SfDiagramComponent>
             @code
             {
                 private void OnHistoryAdding(HistoryAddingEventArgs args)
                 {
                     args.Cancel = true;
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.UndoStack">
            <summary>
            Used to store the list of entries in the undo list.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void onundostackcount()
            {
                var undostackcount = diagram.HistoryManager.UndoStack.Count();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.RedoStack">
            <summary>
            Used to store the list of entries in the redo list.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void onredostackcount()
            {
                var Redostackcount = diagram.HistoryManager.RedoStack.Count();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.StackLimit">
            <summary>
             Used to restrict or limits the number of history entry will be stored on the history list
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryEntryBase">
            <summary>
            Represents the entry of the changed history of an object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.Type">
            <summary>
            Sets the type of  entry to be stored. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.ChangeType">
            <summary>
            Gets or sets the type of object beingadded or removed. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.RedoObject">
            <summary>
            Stores the changed values. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.UndoObject">
            <summary>
            Stores the changed values. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.Category">
            <summary>
            Sets the category of the history entry like internal or external. Category should be external for custom action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.Next">
            <summary>
            Sets the next of the current undoing object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.Previous">
            <summary>
            Sets the previous of the current undoing object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.IsUndo">
            <summary>
             Gets or sets the value for undo action is activated. A user needs to set this property to true in order to record the changes that performs undo/redo actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InternalHistoryEntry.ChildTable">
            <summary>
             Used to stored the entry or not
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryEntry">
            <summary>
            Represents the entry of the changed history of an object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HistoryEntry.#ctor">
            <summary>
            To initialize custom entry of the an object. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.IDiagramObject">
            <summary>
            Represents the class that is the base class for all the diagram objects, and it is used to handle common actions like property changes in any diagram object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.IDiagramObject.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked whenever the effective value of any property on this diagram objects has been updated.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeBase">
            <summary>
            Represents the common behavior of nodes, connectors, and groups. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.#ctor(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeBase"/> from the given NodeBase.
            </summary>
            <param name="src">NodeBase</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeBase"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.ID">
            <summary>
            Gets or sets the unique id of the diagram object.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">1. ID needs to be unique to use. While creating a node, the user should not provide the same id to other nodes.</td>
            </tr>
            <tr>
            <td style = "border: none">2. When drag and drop a new node from symbolpalette, ID will be generated automatically.</td>
            </tr>
            <tr>
            <td style = "border: none">3. If multiple nodes having same ID, then unexpected behaviour might happen. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Wrapper">
            <summary>
            Gets or sets the UI of a node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.ZIndex">
            <summary>
            Gets or sets the visual order of the node/connector.
            </summary>
            <remarks>
            The property specifies the stack order of the node. A node with greater stack order is always in front of a node with a lower stack order.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Margin">
            <summary>
            The margin adds extra space around an element's outside boundaries. The default values for the margin are 0 from all the sides.
            </summary>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Left , represents the value of the left margin.</td>
            </tr>
            <tr>
            <td style = "border: none">Top , represents the top margin of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">Right , represents the right margin of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">Bottom , represents the bottom margin of the node. </td>
            </tr>
            </table>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.IsVisible">
            <summary>
            Gets or sets the visibility of the node/connector, by default it is true(visible).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.CanAutoLayout">
            <summary>
            Gets or sets the value indicates whether the node should be automatically positioned or not. Applicable, if layout option is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.AdditionalInfo">
            <summary>
            Gets or sets the custom properties of a node/connector.
            </summary>
            <remarks>
            Enables the user to store data of any datatype. It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Dictionary<string, object> NodeInfo = new Dictionary<string, object>();
            NodeInfo.Add("nodeInfo", "Central Node");
            // A node is created and stored in nodes collection.
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                AdditionalInfo = NodeInfo
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Flip">
            <summary>
            Gets or sets a value to flip the element in Horizontal/Vertical directions.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.Clone">
            <summary>
            Creates a new diagram element that is the copy of the current diagram element.
            </summary>
            <returns>A new diagram element that is the copy of this diagram element</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramObject">
            <summary>
            Represents the class that acts as the base class for the diagram object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramObject"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.#ctor(Syncfusion.Blazor.Diagram.DiagramObject)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramObject"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.DiagramObject"/>.
            </summary>
            <param name="src">DiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this diagram objects has been updated.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.GetParent">
            <summary>
            Gets the parent of an object when the method is invoked.
            </summary>
            <returns>returns a parent of an object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.Clone">
            <summary>
            Creates a new diagram object that is a copy of the current diagram object.
            </summary>
            <returns>DiagramObject</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Connector">
            <summary>
            A line which represents the relationship between two points, nodes, or ports. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.#ctor(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            Creates a new instance of the Connector from the given Connector.
            </summary>
            <param name="src">Connector</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.#ctor">
            <summary>
            Initializes a new instance of the Connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Constraints">
            <summary>
            Enables or disables certain features of the connector. By default, all the interactive functionalities are enabled. 
            </summary>
            <remarks>
            Features like dragging, selection can be disabled. Refer <see href="https://blazor.syncfusion.com/documentation/diagram-component/constraints#connector-constraints"> ConnectorConstraints </see> for better understanding.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                //set the ConnectorConstraints...
                Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePoint">
            <summary>
            Gets or sets the beginning point of the connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPoint">
            <summary>
            Gets or sets the endpoint of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Shape">
            <summary>
            Represents the shape of the connector. It is applicable only if it is a Bpmn connector.
            </summary>
            <remarks>
            For more information, refer to <see href="https://blazor.syncfusion.com/documentation/diagram-component/bpmn-shapes/bpmn-connectors">Bpmn Connector</see>. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                // Unique Id of the connector
                ID = "connector1",
                // Start and end points of the connector
                SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                // Set the type to Bpmn, flow to Association and association to bidirectional
                Shape = new BpmnFlow()
                {
                    Type = ConnectionShapes.Bpmn,
                    Flow = BpmnFlows.Association,
                    Association = BpmnAssociationFlows.BiDirectional
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.FixedUserHandles">
            <summary>
            Gets or sets the collection of the fixed user handle of the connector.
            </summary>
            <remarks>
            The fixed user handles are used to add some frequently used commands around the node and connector. It is visible even without selecting the nodes or connectors. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                Type = ConnectorSegmentType.Orthogonal,
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                // A fixed user handle is created and stored in the fixed user handle collection of the Connector.
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25, 
                        Width = 25,
                        Offset = 0.5,
                        Alignment = FixedUserHandleAlignment.After,
                        Displacement = new DiagramPoint { Y = 10 },
                        Visibility = true,Padding = new Margin() { Bottom = 1, Left = 1, Right = 1, Top = 1 },
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourceID">
            <summary>
            Gets or sets the unique id of the source node of the connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetID">
            <summary>
            Gets or sets the unique id of the target node of the connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePortID">
            <summary>
            Gets or sets the unique id of the source port of the connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPortID">
            <summary>
            Gets or sets the unique id of the target port of the connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.CornerRadius">
            <summary>
            Gets or sets the corner radius of the connector. By default, it is 0. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.HitPadding">
            <summary>
            Gets or sets the hit padding value of the connector. Hit padding value represents the range of the connector selection. By default, it is 10px. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePadding">
            <summary>
            Gets or sets the space to be left between the source node and the source point of a connector. By default, it is 0. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPadding">
            <summary>
            Gets or sets the space to be left between the target node and the target point of a connector. By default, it is 0. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.ConnectionPadding">
            <summary>
            Gets or sets the connection padding value of the connector. By default, it is 0. 
            </summary>
            <remarks>
            The connector connects with the node or port while dragging its source/target thumb towards the padding region. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.BridgeSpace">
            <summary>
            Gets or sets the width of the line bridges. By default, the width is 10px. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Type">
            <summary>
            Represents the type of the connector. By default, it is straight.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Segments">
            <summary>
            Represents the collection of connector segments. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Annotations">
            <summary>
            Represents the collection of textual information contained in the connector.
            </summary>
            <remarks>
            The text found in the connector can be edited at runtime. Users can modify the   Style, Visibility, Width, Height, and content of the annotation. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {        
                SourcePoint = new DiagramPoint() { X = 300, Y = 40 },
                TargetPoint = new DiagramPoint() { X = 400, Y = 160 },
                Type = ConnectorSegmentType.Orthogonal,
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                // Initialize the annotation collection
                Annotations = new DiagramObjectCollection<PathAnnotation>() 
                { 
                    new PathAnnotation { Content = "Annotation" }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Style">
            <summary>
            Represents the appearance of the connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourceDecorator">
            <summary>
            Gets or sets the source decorator (sourcePoint's shape) of the connector. By default, its shape is none.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetDecorator">
            <summary>
            Gets or sets the target decorator (target points shape) of the connector. By default, its shape is an arrow. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.Clone">
            <summary>
            Creates a new connector that is a copy of the current connector.
            </summary>
            <returns>Connector</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorSegment">
            <summary>
            Represents the segment of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
              public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
              protected override void OnInitialized()
              {
                Connector connector = new Connector()
                {
                   ID="straight",
                   SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                   TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                   Segments = new DiagramObjectCollection<ConnectorSegment>()
                   {
                       //Create a new straight segment 
                       new StraightSegment(){Point=new DiagramPoint(420,300)},
                    }
                };
               connectors.Add(connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorSegment.#ctor(Syncfusion.Blazor.Diagram.ConnectorSegment)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorSegment"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.ConnectorSegment"/>.
            </summary>
            <param name="src">ConnectorSegment</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorSegment"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorSegment.Type">
            <summary>
            Defines the type of the segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorSegment.AllowDrag">
            <summary>
            Defines whether the segment can be dragged or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorSegment.Clone">
            <summary>
            Creates a new segment that is a copy of the current segment.
            </summary>
            <returns>ConnectorSegment</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.StraightSegment">
            <summary>
            Represents how a straight segment can be created for a connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
              public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
              protected override void OnInitialized()
              {
                Connector connector = new Connector()
                {
                   ID="straight",
                   SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                   TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                   Segments = new DiagramObjectCollection<ConnectorSegment>()
                   {
                       //Create a new straight segment 
                       new StraightSegment(){Point=new DiagramPoint(420,300)},
                    }
                };
               connectors.Add(connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StraightSegment.#ctor(Syncfusion.Blazor.Diagram.StraightSegment)">
            <summary>
            Creates a new instance of the StraightSegment from the given StraightSegment.
            </summary>
            <param name="src">StraightSegment</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StraightSegment.#ctor">
            <summary>
            Initializes a new instance of the StraightSegment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.StraightSegment.Point">
            <summary>
            Gets or sets the endpoint of the connector segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StraightSegment.Clone">
            <summary>
            Creates a new segment that is a copy of the current straight segment.
            </summary>
            <returns>StraightSegment</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BezierSegment">
            <summary>
            Represents the bezier segment of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BezierSegment.#ctor">
            <summary>
            Initializes a new instance of the BezierSegment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BezierSegment.#ctor(Syncfusion.Blazor.Diagram.BezierSegment)">
            <summary>
            Creates a new instance of the BezierSegment from the given BezierSegment.
            </summary>
            <param name="src">BezierSegment</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Point1">
            <summary>
            Gets or sets the first control point of the bezier connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Point2">
            <summary>
            Gets or sets the second control point of the bezier connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Vector1">
            <summary>
            Defines the length and angle between the source point and the first control point of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Vector2">
            <summary>
            Defines the length and angle between the target point and the second control point of the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BezierSegment.Clone">
            <summary>
            Creates a new bezier segment that is a copy of the current segment.
            </summary>
            <returns>BezierSegment</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Vector">
            <summary>
            Describes the length and angle between the control point and the start point of the bezier segment. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Vector.#ctor(Syncfusion.Blazor.Diagram.Vector)">
            <summary>
            Creates a new instance of the Vector from the given Vector.
            </summary>
            <param name="src">Vector</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Vector.#ctor">
            <summary>
            Initializes a new instance of the Vector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Vector.Angle">
            <summary>
            Defines the angle between the connector endpoint and control point of the bezier segment. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Vector.Distance">
            <summary>
            Defines the distance between the connector endpoint and control point of the bezier segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Vector.Clone">
            <summary>
            Creates a new vector that is the copy of the current vector.
            </summary>
            <returns>Vector</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.OrthogonalSegment">
            <summary>
            Represents how an orthogonal segment can be created with length and direction.
            </summary>
            <example>
            <code>
            <![CDATA[
            Segments = new DiagramObjectCollection<ConnectorSegment>()
            {
                new OrthogonalSegment 
                {
                    Length = 100,
                    Type = ConnectorSegmentType.Orthogonal,
                    Direction = Direction.Right, 
                 },
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.OrthogonalSegment.#ctor(Syncfusion.Blazor.Diagram.OrthogonalSegment)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.OrthogonalSegment"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.OrthogonalSegment"/>.
            </summary>
            <param name="src">OrthogonalSegment</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.OrthogonalSegment.#ctor">
            <summary>
            Initializes a new instance of the OrthogonalSegment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.OrthogonalSegment.Length">
            <summary>
            Gets or sets the length of orthogonal segment , by default it is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.OrthogonalSegment.Direction">
            <summary>
            Gets or sets the direction of the orthogonal segment.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">1.Left, Sets the connector segment direction as left.</td>
            </tr>
            <tr>
            <td style = "border: none">2.Right, Sets the connector segment direction as right. </td>
            </tr>
            <tr>
            <td style = "border: none">3.Top, Sets the connector segment direction as top. </td>
            </tr>
            <tr>
            <td style = "border: none">4.Bottom, Sets the connector segment direction as bottom. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.OrthogonalSegment.Clone">
            <summary>
            Creates a new orthogonal segment that is a copy of the current segment.
            </summary>
            <returns>OrthogonalSegment</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DecoratorSettings">
            <summary>
            Represents the shape of the end points of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DecoratorSettings.#ctor(Syncfusion.Blazor.Diagram.DecoratorSettings)">
            <summary>
            Creates a new instance of the Decorator from the given Decorator.
            </summary>
            <param name="src">Decorator</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DecoratorSettings.#ctor">
            <summary>
            Initializes a new instance of the Decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Width">
            <summary>
            Gets or sets the width of the decorator. By default, it is 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Height">
            <summary>
            Gets or sets the height of the decorator. By default, it is 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Shape">
            <summary>
            Gets or sets the shape of the decorator. By default, it is an arrow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.PathData">
            <summary>
            Allows setting a custom shape of the decorator.
            </summary>
            <example>
            <code>
            <![CDATA[
            TargetDecorator = new DecoratorSettings()
            {
                Shape = DecoratorShape.Custom,
                PathData = "M80.5,12.5 C80.5,19.127417 62.59139,24.5 40.5,24.5 C18.40861,24.5 0.5,19.127417 0.5,12.5 C0.5,5.872583 18.40861,0.5 40.5,0.5 C62.59139,0.5 80.5,5.872583 80.5,12.5 z",
                Style = new ShapeStyle()
                {
                    StrokeColor = "#37909A",
                    Fill = "#37909A",
                    StrokeWidth = 1,
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Pivot">
            <summary>
            The decorator angle will be based on the pivot values, which range from 0 to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Style">
            <summary>
            Represents the appearance of the decorator.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DecoratorSettings.Clone">
            <summary>
            Creates a new decorator that is a copy of the current decorator.
            </summary>
            <returns>Decorator</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DataSourceSettings">
            <summary>
            DataSourceSettings is used to specify the data source and defines how the parent and child relationship will be generated in the layout. It is applicable only when the layout is used. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px">
            <DataSourceSettings @bind-DataSource="@data" ID="@Id" ParentID="@ParentId" SymbolMapping="@doBinding"></DataSourceSettings>
            <Layout Type = "LayoutType" >
            </ Layout >
            </ SfDiagramComponent >
            @code {
            public object data { get; set; }
            public string Id;
            public string ParentId;
            public LayoutType LayoutType = LayoutType.HierarchicalTree;
            protected override void OnInitialized()
            {
             Id = "Name";
             ParentId = "Category";
             data = Data1;
            }
            //bind the external data with the node
            private Node doBinding(Node node, object data)
            {
             HierarchicalDetails hierarchicalData = data as HierarchicalDetails;
             node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
             new ShapeAnnotation()
            {
             ID = "annotation"+node.ID,
             Content = hierarchicalData.Name,
            },
            };
            return node;
            }
            public List<HierarchicalDetails> Data1 = new List<HierarchicalDetails>()
            {
             new HierarchicalDetails(){ Name ="Diagram",FillColor="#916DAF"},
             new HierarchicalDetails(){ Name ="Layout", Category="Diagram"},
             new HierarchicalDetails(){ Name ="Tree Layout",Category="Layout"},
             new HierarchicalDetails(){ Name ="Organizational Chart", Category="Layout"}
            };
            public class HierarchicalDetails
            {
             public string Name { get; set; }
             public string Category { get; set; }
             public string FillColor { get; set; }
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.ChildContent">
            <summary>
            Gets or sets the child content that the layout is displayed for.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.DataSourceChanged">
            <summary>
            Specifies the callback to trigger when the data source changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.DataSource">
            <summary>
            Gets or sets the data source that the layout is displayed for.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.ID">
            <summary>
            Defines the property name that will be mapped to each node id from the data source record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.ParentID">
            <summary>
            Defines the property name that will be used to find the parent and child relationship between the nodes from the data source record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.Root">
            <summary>
            Gets or sets the root (primary) node of the layout populated from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.IDChanged">
            <summary>
            Specifies the callback to trigger when the id value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.ParentIDChanged">
            <summary>
            Specifies the callback to trigger when the parent id value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.RootChanged">
            <summary>
            Specifies the callback to trigger when the root value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.SymbolBinding">
            <summary>
            Returns the customized node information. It is a call-back method which is triggered for each node when initializing the layout.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">For more details, refer <see href="https://blazor.syncfusion.com/documentation/diagram-component/layout/organizational-chart">Organizational Chart</see></td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.Query">
            <summary>
            Gets or sets the query that is displayed for.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering, otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandManager">
            <summary>
            Defines the collection of commands and the corresponding key gestures. It is responsible for managing routed commands.
            </summary>
            <remarks>
            CommandManager provides the support to define custom commands. The custom commands are executed when the specified key gesture is recognized.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="@diagram" Height="600px" Nodes="@nodes">
            @* Initializing the custom commands*@
                <CommandManager Commands = "@command" Execute="@CommandExecute" CanExecute="@canexe">
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                // Reference to the diagram
                SfDiagramComponent diagram;
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new Command()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = Keys.G, KeyModifiers = KeyModifiers.Control }
                    },
                    new Command()
                    {
                        Name = "CustomUnGroup",
                        Gesture = new KeyGesture() { Key = Keys.U, KeyModifiers = KeyModifiers.Control }
                    },
                };
                // Define the diagram's nodes collection
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                public void canexe(CommandKeyArgs args)
                {
                    args.CanExecute = true;
                }
                public void CommandExecute(CommandKeyArgs args)
                {
                    if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.G)
                    {
                        //Custom command to group the selected nodes
                        diagram.Group();
                    }
                    if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.U)
                    {
                        Selector selector = diagram.SelectedItems;
                        //Custom command to ungroup the selected items
                        if (selector.Nodes.Count > 0 && selector.Nodes[0] is Group)
                        {
                            if ((selector.Nodes[0] as Group).Children.Length > 0)
                            {
                                diagram.UnGroup();
                            }
                        }
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.ChildContent">
            <summary>
            Gets or sets the child content of the Command Manager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.Commands">
            <summary>
            Represents storing multiple command names with the corresponding command object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.CanExecute">
            <summary>
            Determines whether this command can execute in its current state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.Execute">
            <summary>
            Executes the command on the current command target.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandManager.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandManager.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyGesture">
            <summary>
            Defines a keyboard combination that can be used to invoke a command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyGesture.Key">
            <summary>
            Gets the key associated with this KeyGesture. The default value is None.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyGesture.Modifiers">
            <summary>
            Gets the modifier keys associated with this KeyGesture. The default value is None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyboardCommand">
            <summary>
            Specifies a command and a key gesture to define when the command should be executed.
            </summary>
            <example>
            <remarks>
            The below code example illustrates how to call a group command. 
            </remarks>
            <code>
            <![CDATA[
            private void OnGroup()
            {
                diagram.Group();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyboardCommand.Name">
            <summary>
            Specifies the name of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyboardCommand.Gesture">
            <summary>
             Specifies a combination of keys and key modifiers, on the recognition of which the command should be executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyboardCommand.Parameter">
            <summary>
            Specifies all additional parameters that are required at runtime.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Layout">
            <summary>
            Represents the class for arranging the nodes and connectors in a tree structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.FixedNode">
            <summary>
            Sets the name of the node concerning which all the other nodes will be translated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.ChildContent">
            <summary>
            Gets or sets the child content of the layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.FixedNodeChanged">
            <summary>
            Specifies the callback to trigger when the fixed node changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalSpacingChanged">
            <summary>
            Specifies the callback to trigger when the vertical spacing changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.TypeChanged">
            <summary>
            Specifies the callback to trigger when the type changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalAlignmentChanged">
            <summary>
            Specifies the callback to trigger when the horizontal alignment changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalAlignmentChanged">
            <summary>
            Specifies the callback to trigger when the vertical alignment changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalSpacingChanged">
            <summary>
            Specifies the callback to trigger when the horizontal spacing changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.BoundsChanged">
            <summary>
            Specifies the callback to trigger when the bounds changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.OrientationChanged">
            <summary>
            Specifies the callback to trigger when the orientation changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.MarginChanged">
            <summary>
            Specifies the callback to trigger when the margin changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.GetLayoutInfo">
            <summary>
            GetLayoutInfo is used to configure every subtree of the organizational chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.GetBranch">
            <summary>
            Returns the branch type of the layout. Applicable only if it is a mindmap layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalSpacing">
            <summary>
            Specifies the space that must be Vertically left between the nodes. It is 30, by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Bounds">
            <summary>
            Aligns the layout within the given bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalSpacing">
            <summary>
            Specifies the space that must be horizontally left between the nodes. It is 30, by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Root">
            <summary>
            Specifies the parent node of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Orientation">
            <summary>
            Specifies the orientation of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalAlignment">
            <summary>
            Describes how the layout should be positioned or stretched in the HorizontalAlignment..
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalAlignment">
            <summary>
            Describes how the layout should be positioned or stretched in the VerticalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Type">
            <summary>
            Defines the type of layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Margin">
            <summary>
            Specifies the space between the viewport and the layout. By default {left:50, top:50, right:0, bottom:0}.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TreeInfo">
            <summary>
            Represents the behavior and appearance of the tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Orientation">
            <summary>
            Arranges the child nodes with the parent based on its type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.AlignmentType">
            <summary>
            Specifies the type of subtree alignments in a layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Offset">
            <summary>
            Specifies the position of the node to be arranged. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.EnableRouting">
            <summary>
            Specifies whether the route has to be enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Children">
            <summary>
            Represents the children in the tree . 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Assistants">
            <summary>
            Represents the tree assistants.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Level">
            <summary>
            Sets the level of the tree. It is a double-type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.HasSubTree">
            <summary>
            Represents the type that enables or disables the sub tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Rows">
            <summary>
            Represents the rows of a tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.EnableSubTree">
            <summary>
            Enables or disables the sub tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.IsRootInverse">
            <summary>
            Represents the type that enables or disables the root inverse.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutMargin">
            <summary>
            Defines the space between the viewport and the automatic layout. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LayoutMargin"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HyperlinkSettings">
            <summary>
            Represents a control for creating a link to another Web page.
            </summary>
            <remarks>
            The hyperlink can be customized by adding text and color. The Hyperlink can be set to the Annotations of the node/connector.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    // Add text as hyperlink.
                       new ShapeAnnotation { Hyperlink = new Hyperlink{ Content = "Syncfusion", Link = "https://www.syncfusion.com" } }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HyperlinkSettings.#ctor(Syncfusion.Blazor.Diagram.HyperlinkSettings)">
            <summary>
            Creates a new instance of the Hyperlink from the given Hyperlink.
            </summary>
            <param name="src">Hyperlink</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HyperlinkSettings.#ctor">
            <summary>
            Initializes a new instance of the Hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HyperlinkSettings.Color">
            <summary>
            Gets or sets the fill color of the hyperlink. Color is string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HyperlinkSettings.Content">
            <summary>
            Gets or sets the content of the hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HyperlinkSettings.Url">
            <summary>
            Defines the link to be set for the hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HyperlinkSettings.TextDecoration">
            <summary>
            Defines the text-decoration for the content of the hyperlink.
            </summary>
            <remarks>
            The types of text decorations are underline, overline, linethrough and none. By default, TextDecoration is set to None.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HyperlinkSettings.Clone">
            <summary>
            Creates a new hyperlink that is a copy of the current hyperlink.
            </summary>
            <returns>Hyperlink</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Annotation">
            <summary>
            Defines the textual content of nodes/connectors. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Annotation.#ctor(Syncfusion.Blazor.Diagram.Annotation)">
            <summary>
            Creates a new instance of an Annotation from the given Annotation.
            </summary>
            <param name="src">Annotation</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Annotation.#ctor">
            <summary>
            Initializes a new instance of an Annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.ID">
            <summary>
            Gets or sets the unique id of the node's or connector's annotation. 
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none"> 1. The ID needs to be unique. While creating a label, the user should not use the same id for other labels</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. If multiple labels have the same ID, then unexpected behavior could occur.</td>
            </tr>        
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Content">
            <summary>
            Gets or sets the textual information of the node/connector.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation { Content = "Node" }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Visibility">
            <summary>
            Gets or sets the visibility of the annotation. By default, it is visible (True). 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Constraints">
            <summary>
            Enable or disable certain behaviors of the label. All the interactive functionalities are enabled by default.
            </summary>
            <remarks>
            For instance, the user can disable annotation editing and be able to make it read-only. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        Constraints=AnnotationConstraints.ReadOnly,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Hyperlink">
            <summary>
            Gets or sets the hyperlink of the annotation. 
            </summary>
            <remarks>
            Users can be able to show hyperlinks as annotation content.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Width">
            <summary>
            Gets or sets the width of the annotation. If width is not specified, it displays based on the content's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Height">
            <summary>
            Gets or sets the height of the annotation. If the height is not specified, it renders based on the content's height. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.RotationAngle">
            <summary>
            Gets or sets the rotation angle of the annotation. It is 0 by default. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Style">
            <summary>
            Represents the appearance of an annotation. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",
                Width = 100,
                Height = 100,
                OffsetX = 100,
                OffsetY = 100,
                // Set the textAlign as left for the content
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation 
                    { 
                        Content = "Text align is set as Left",
                        Style = new TextStyle() { TextAlign = TextAlign.Left}
                    }
                },
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text to the parent node/connector.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the Horizontal Alignment of the annotation. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Stretch - Stretches the diagram element throughout the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Left - Aligns the diagram element at the left of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text to the parent node/connector. 
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the Vertical Alignment of the annotation. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Stretch  - Stretches the diagram element throughout the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Top - Aligns the diagram element at the top of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Bottom - Aligns the diagram element at the bottom of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Margin">
            <summary>
            Gets or sets the extra space around an annotation present in the node/connector.
            </summary>
            <example>
            <code>
            <![CDATA[
            Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation 
                { 
                    Content = "Task1",
                    Margin = new Margin() { Top = 10},
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.DragLimit">
            <summary>
            Sets the space to be left between an annotation and its parent node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.AdditionalInfo">
            <summary>
            Gets or sets the custom properties of an annotation.
            </summary>
            <remarks>
            Enables the user to store data of any data type. It will be serialized and deserialized automatically while saving and opening the diagram. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Dictionary<string, object> dict = new Dictionary<string, object>();
            dict.Add("node", "Annotation1");
            Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                   Content = "Annotation",
                   AdditionalInfo = dict
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Annotation.Clone">
            <summary>
            Creates a new object that is a copy of the current annotation. 
            </summary>
            <returns>A new object that is a copy of this annotation</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ShapeAnnotation">
            <summary>
            Defines the textual description of nodes/connectors with respect to bounds
            Represents the block of text displayed over the node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize the annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation { Content = "Node" }, Offset = new DiagramPoint() { X = 0, Y = 0 } },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeAnnotation"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeAnnotation.#ctor(Syncfusion.Blazor.Diagram.ShapeAnnotation)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeAnnotation"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.ShapeAnnotation"/>.
            </summary>
            <param name="src">ShapeAnnotation</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeAnnotation.Offset">
            <summary>
            Gets or sets the position of the annotation to its parent bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeAnnotation.Clone">
            <summary>
            Creates a new annotation that is a copy of the current annotation.
            </summary>
            <returns>ShapeAnnotation</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PathAnnotation">
            <summary>
            Represents the block of text displayed over the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathAnnotation.#ctor(Syncfusion.Blazor.Diagram.PathAnnotation)">
            <summary>
            Creates a new instance of the PathAnnotation from the given PathAnnotation.
            </summary>
            <param name="src">PathAnnotation</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathAnnotation.#ctor">
            <summary>
            Initializes a new instance of the PathAnnotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Offset">
            <summary>
            Gets or sets the offset of an annotation in a connector. By default, it is 0.5 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Displacement">
            <summary>
            Gets or sets the displacement (margin) of an annotation from its actual position. Applicable only for connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Alignment">
            <summary>
            Gets or sets the alignment of an annotation in a connector. By default, it is aligned at the center. 
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none"> Below are the available alignment options</td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Center, Annotation placed on the connector segment.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Before,Annotation is placed at the top of the connector segment.</td>
            </tr>   
            <tr>
            <td style = "border: none"> 3. After, Annotation is placed at the bottom of the connector segment.</td>
            </tr> 
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.SegmentAngle">
            <summary>
            Gets or sets the segment angle of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathAnnotation.Clone">
            <summary>
            Creates a new PathAnnotation that is a copy of the current annotation.
            </summary>
            <returns>PathAnnotation</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDiagrams">
            <summary>
            Represents the modeling language for creating process workflows or business process flowcharts in the diagram. 
            </summary>
            <remarks>
             BPMN diagram helps people to communicate process workflow design ideas effectively.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.DataObject, 
                    DataObject = new BpmnDataObject() 
                    { 
                        Collection = true, 
                        Type = BpmnDataObjects.Output 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.#ctor(Syncfusion.Blazor.Diagram.BpmnDiagrams)">
            <summary>
            Creates a new instance of the BpmnDiagrams from the given BpmnDiagrams.
            </summary>
            <param name="src">BpmnDiagrams</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.#ctor">
            <summary>
            Initializes a new instance of the BpmnDiagrams.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.CheckAndRemoveAnnotations(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to remove annotation.
            </summary>
            <param name="node">Node</param>
            <param name="diagram">SfDiagramComponent</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.Clone">
            <summary>
            Creates a new BPMN diagram that is a copy of the current BPMN diagram. 
            </summary>
            <returns>BpmnDiagrams</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Node">
            <summary>
            Represents the shape that is used to visualize geometrical information. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.OutEdges">
            <summary>
            Gets information about the outgoing connectors of the node. 
            </summary>
            <remarks>
            It returns the ID of the outgoing connectors.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.InEdges">
            <summary>
            Gets information about the incoming connectors of the node. 
            </summary>
            <remarks>
            It returns the ID of the incoming connectors.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.#ctor">
            <summary>
            Initializes a new instance of the Node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.#ctor(Syncfusion.Blazor.Diagram.Node)">
            <summary>
            Creates a new instance of the Node from the given Node.
            </summary>
            <param name="src">Node</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.OffsetX">
            <summary>
            Gets or sets the X-coordinate of the node. By default, it is 0. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.OffsetY">
            <summary>
            Gets or sets the y-coordinate of the node. By default, it is 0. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Ports">
            <summary>
            Gets or sets a collection of PointPort (connection points). 
            </summary>
            <remarks>
            Ports act as the connection points between nodes and allow them to create connections with only those specific points. There may be any number of ports in a node. You can   modify the ports' appearance, visibility, positioning and can add custom shapes to them. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
               // Position of the node
               OffsetX = 250,
               OffsetY = 250,
               // Size of the node
               Width = 100,
               Height = 100,
               Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
               // Initialize port collection
               Ports = new DiagramObjectCollection<PointPort>()
               {
                   // Set the position for the port
                   new PointPort()
                   {
                       Style = new ShapeStyle() { Fill = "gray" }, 
                       Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                       Visibility = PortVisibility.Visible
                   }
               }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Annotations">
            <summary>
            Represents the collection of textual information contained in the node.
            </summary>
            <remarks>
            The text found in the node can be edited at runtime. Users are able to modify the   style, visibility, width, height, and content of the annotation. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
               // Position of the node
               OffsetX = 250,
               OffsetY = 250,
               // Size of the node
               Width = 100,
               Height = 100,
               Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
               // Initialize annotation collection
               Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
               { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node" 
                    }
               },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.FixedUserHandles">
            <summary>
            Gets or sets the collection of the fixed user handle of the node. 
            </summary>
            <remarks>
            The fixed user handles are used to add some frequently used commands around the node and connector even without selecting it. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // A fixed user handle is created and stored in fixed user handle collection of Node.
                FixedUserHandles = new DiagramObjectCollection<NodeFixedUserHandle>()
                {
                    new NodeFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 20, 
                        Width = 20, 
                        Visibility = true,
                        Padding = new Margin() { Bottom = 1, Left = 1, Right = 1, Top = 1 }, 
                        Margin = new Margin() { Right = 20 },Offset = new DiagramPoint() { X = 0, Y = 0 }, 
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    },
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Pivot">
            <summary>
            Node rotation angle will be based on pivot values which range from 0 to 1 like offset values. By default, the Pivot values are set to X= 0.5 and Y=0.5.
            </summary>
            <remarks>
            The below list explains the pivot values.  
            <table style = "border: none">
            <tr>
            <td style = "border: none"> 1. When X= 0 and Y= 0, OffsetX and OffsetY values are considered to be at the top-left corner of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. When X= 0.5 and Y= 0.5, OffsetX and OffsetY values are considered to be at the node’s center point.</td>
            </tr>      
            <tr>
            <td style = "border: none"> 3. When X= 1 and Y= 1, OffsetX and OffsetY values are considered to be at the bottom-right corner of the node.</td>
            </tr>      
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Width">
            <summary>
            Gets or sets the width of the node. If it is not specified, the node renders based on the content's width. 
            </summary>
            <remarks>
            The width of a node does not include borders or margins.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Height">
            <summary>
            Gets or sets the height of the node. If it is not specified, the node renders based on the content's height.
            </summary>
            <remarks>
            The height of a node does not include borders or margins. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MinWidth">
            <summary>
            Gets or sets the minimum width of the node. By default, it is undefined. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MinHeight">
            <summary>
            Gets or sets the minimum height of the node. By default, it is undefined. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MaxWidth">
            <summary>
            Gets or sets the maximum width of the node. By default, it is undefined. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MaxHeight">
            <summary>
            Gets or sets the maximum height of the node. By default, it is undefined. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.RotationAngle">
            <summary>
            Gets or sets the rotation angle of the node. The default value is 0. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Style">
            <summary>
            Represents the appearance of the node. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        //Set the type of shape as flow
                        Style = new ShapeStyle() 
                        {
                            Fill = "#6BA5D7", 
                            StrokeDashArray = "5,5", 
                            StrokeColor = "red", 
                            StrokeWidth = 2 
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Shadow">
            <summary>
            Gets or sets the shadow appearance of a node. 
            </summary>
            <remarks>
            The Shadow effect on a node is disabled by default. It can be enabled with the constraint property of the node. The Angle, Distance, and Opacity of the shadow can be customized. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                Constraints = NodeConstraints.Default | NodeConstraints.Shadow,
                Shadow = new Shadow()
                {
                    Angle = 50,
                    Color = "Blue",
                    Opacity = 0.8,
                    Distance = 20
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BackgroundColor">
            <summary>
            Gets or sets the node's background color. By default, it is transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BorderColor">
            <summary>
            Gets or sets the border color of the node. By default, it is black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BorderWidth">
            <summary>
            Gets or sets the border width of the node. By default, it is 1px.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Data">
            <summary>
            Returns the record of the data source as data. Each record on the data source represents a node in an automatic layout.
            </summary>
            <remarks>
            Nodes can be generated automatically with the information provided through the data. This is applicable only while using an automatic layout. You can get the datasource details in a node through the data. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px" NodeCreating="@OnNodeCreating" ConnectorCreating="@OnConnectorCreating">
                <DataSourceSettings Id = "Id" ParentId="ParentId" DataSource="@DataSource"/>
                    <Layout Type = "LayoutType.MindMap" >
                        < LayoutMargin Top="20" Left="20"/>
                    </Layout>
            </SfDiagramComponent>
            
            @code
            {
                private void OnNodeCreating(IDiagramObject obj)
                {
                    Node node = obj as Node;
                    node.Height = 100;
                    node.Width = 100;
                    node.BackgroundColor = "#6BA5D7";
                    node.Style = new ShapeStyle() { Fill = "#6495ED", StrokeWidth = 1, StrokeColor = "white" };
                    node.Shape = new BasicShape() { Type = Shapes.Basic };
                    MindMapDetails mindmapData = node.Data as MindMapDetails;
                    node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                    {
                        new ShapeAnnotation()
                        {
                            Content = mindmapData.Label
                        }
                    };
                }
                private void OnConnectorCreating(IDiagramObject connector)
                {
                    (connector as Connector).Type = ConnectorSegmentType.Orthogonal;
                    (connector as Connector).TargetDecorator.Shape = DecoratorShape.Arrow;
                    (connector as Connector).Style = new ShapeStyle() { StrokeColor = "#6d6d6d" };
                    (connector as Connector).CornerRadius = 5;
                }
                //Business class
                public class MindMapDetails
                {
                    public string Id { get; set; }
                    public string Label { get; set; }
                    public string ParentId { get; set; }
                    public string Branch { get; set; }
                    public string Fill { get; set; }
                }
                public object DataSource = new List<object>()
                {
                    new MindMapDetails() { Id = "1",Label = "Creativity", ParentId = "", Branch = "Root"},
                    new MindMapDetails() { Id = "2",  Label = "Brainstorming", ParentId = "1", Branch = "Right" },
                    new MindMapDetails() { Id = "3",  Label = "Complementing", ParentId = "1", Branch = "Left" },
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Shape">
            <summary>
            Gets or sets the geometrical representation of a node. 
            </summary>
            <remarks>
             The Diagram provides some built-in shapes, such as BasicShape, FlowShape, Path, etc. You can also add custom shapes to the node.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        //Set the type of shape as flow
                        Shape = new FlowShape()
                        {
                            Type = Shapes.Flow,
                            Shape = FlowShapesType.DirectData
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Constraints">
            <summary>
            Enables or disables certain features of the node. By default, all the interactive functionalities are enabled. 
            </summary>
            <remarks>
            Features like dragging, resizing, and rotation of the node can be disabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
               ID = "node1",
               Height = 100,
               Width = 100,
               OffsetX = 100,
               OffsetY = 100,
               Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "White" },
               //set the NodeConstraints constraints...
               Constraints = NodeConstraints.Default & ~NodeConstraints.Rotate
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the node. 
            </summary>
            <remarks>
            Describes how a node should be positioned or stretched in HorizontalAlignment. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the node. 
            </summary>
            <remarks>
            Describes how a node should be positioned or stretched in VerticalAlignment. 
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.Init">
            <summary>
            Allows to initialize the UI of a node
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitContainer">
            <summary>
            Initialize the container for the node
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.Clone">
            <summary>
            Creates a new object that is a copy of the current node. 
            </summary>
            <returns>Node</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeGroup">
            <summary>
            Represents a cluster of multiple nodes and connectors into a single element. It acts like a container for its children (nodes, groups, and connectors).
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "500px" @ref="diagram" Nodes="@nodes">
            </SfDiagramComponent>
            @code
            {
                SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = createNode("node1", 100, 100);
                    Node node2 = createNode("node2", 300, 100);
                    NodeGroup groupnode = new NodeGroup();
                    // Grouping node 1 and node 2 into a single group
                    groupnode.Children = new string[] { "node1", "node2" };
                    nodes.Add(node1);
                    nodes.Add(node2);
                    nodes.Add(groupnode);
                }
                public Node createNode(string id, double offx, double offy)
                {
                    Node node = new Node()
                    {
                        ID = id,
                        OffsetX = offx,
                        OffsetY = offy,
                        Height = 100,
                        Width = 100,
                        Style = new ShapeStyle() { Fill = "#6495ED" }
                    };
                    return node;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeGroup"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeGroup.#ctor(Syncfusion.Blazor.Diagram.NodeGroup)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeGroup"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.NodeGroup"/>.
            </summary>
            <param name="src"></param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeGroup.Children">
            <summary>
            Gets or sets the children of the group element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeGroup.Clone">
            <summary>
            Creates a new object that is a copy of the current group.
            </summary>
            <returns>Group</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Port">
            <summary>
            Represents a port or connection point of the node. 
            </summary>
            <remarks>
            Ports act as the connection points of node and allow them to create connections with only those specific points. There may be any number of ports in a node. You can able to modify the ports appearance, visibility, positioning, and can add custom shapes to it.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize port collection
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        Style = new ShapeStyle() { Fill = "gray" }, 
                        Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                        Visibility = PortVisibility.Visible
                    }
                }
            };
            ]]>
            </code>
            </example>
            <seealso cref="T:Syncfusion.Blazor.Diagram.PointPort"/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Port.#ctor(Syncfusion.Blazor.Diagram.Port)">
            <summary>
            Creates a new instance of the Port from the given Port.
            </summary>
            <param name="src">Port</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Port.#ctor">
            <summary>
            Initializes a new instance of the Port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.ID">
            <summary>
            Represents the unique id of the diagram object. 
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">1. The ID needs to be unique. While creating a port, the user should not use the same id to other ports.</td>
            </tr>
            <tr>
            <td style = "border: none">2. The ID needs to be unique. While creating a port, the user should not use the same id to other ports.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.HorizontalAlignment">
            <summary>
            Sets the horizontal alignment of the port with respect to its immediate parent(node/connector)
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the port to its immediate parent(node/connector). 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Margin">
            <summary>
            Defines the space from the actual offset values of the port. The default values for the Margin are 0 on all sides. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Width">
            <summary>
            Gets or sets the width of the port. By default, it is 12px. 
            </summary>
            <remarks>
            The width of a port does not include borders or margins.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Height">
            <summary>
             Sets the height of the port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Style">
            <summary>
            Represents the appearance of the port. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Shape">
            <summary>
            Represents the shape (built-in shape) of the port. By default, it appears in Square shape.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The below list of shape types is used to define the port shape.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   X - Sets the shape to X.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Circle - Sets the shape to Circle. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Square - Sets the shape to Square. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Custom - Sets the shape to Custom..</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Visibility">
            <summary>
            Represents the visibility of the port. By default, the port becomes visible when the mouse hovers over the node. 
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">  The below list of options is used to control the visibility of the ports. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Visible - Default value. The port is visible</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Hidden - The port is hidden.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Hover - Shows the port when the mouse hovers a node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Connect - Shows the port when a connection endpoint is dragged over a node.  </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.PathData">
            <summary>
            Represents the custom geometry(shape) of the port. 
            </summary>
            <remarks>
            To create a custom-shaped port, the user must set the shape to ‘custom’ and then the PathData. (A custom graphics path is a set of connected lines, curves, and other simple graphics objects, including rectangles, ellipses, and text. A path works as a single graphics object, so any effect applied to the graphic path will also be applied to the port..) 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Constraints">
            <summary>
            Defines the constraints of port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.AdditionalInfo">
            <summary>
            Gets or sets the custom properties of a port.
            </summary>
            <remarks>
            Enables the user to store data of any data type. It will be serialized and deserialized automatically while saving and opening the diagram. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.OutEdges">
            <summary>
            Defines the collection of connectors that are connected to the port. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.InEdges">
            <summary>
            Defines the collection of connectors that are connected to the port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Port.Clone">
            <summary>
            Creates a new port that is a copy of the current port.
            </summary>
            <returns>Port</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PointPort">
            <summary>
            Defines the behavior of a port (connection point) that sticks to a point. 
            </summary>
            <remarks>
            Ports act as the connection points of node and allow them to create connections with only those specific points. There may be any number of ports in a node. You can able to modify the Ports appearance, visibility, positioning, and can add custom shapes to it.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize port collection
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                    Style = new ShapeStyle() { Fill = "gray" }, 
                    Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                    Visibility = PortVisibility.Visible
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PointPort.#ctor(Syncfusion.Blazor.Diagram.PointPort)">
            <summary>
            Creates a new instance of the PointPort from the given PointPort.
            </summary>
            <param name="src">PointPort</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PointPort.#ctor">
            <summary>
            Initializes a new instance of the PointPort.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PointPort.Offset">
            <summary>
            Defines the position of the port with respect to the boundaries of node.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize port collection
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        Style = new ShapeStyle() { Fill = "gray" }, 
                        Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                        Visibility = PortVisibility.Visible
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PointPort.Clone">
            <summary>
            Creates a new object that is a copy of the current port. 
            </summary>
            <returns>PointPort</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Shape">
            <summary>
            Defines the behavior of shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shape.#ctor(Syncfusion.Blazor.Diagram.Shape)">
            <summary>
            Creates a new instance of the Shape from the given Shape.
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shape.#ctor">
            <summary>
            Initializes a new instance of the Shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shape.Type">
            <summary>
            Gets or sets the type of node shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shape.Clone">
            <summary>
            Creates a new Shape that is a copy of the current Shape. 
            </summary>
            <returns>Shape</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorShape">
            <summary>
            Represents the shape of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorShape.#ctor(Syncfusion.Blazor.Diagram.ConnectorShape)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorShape"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.ConnectorShape"/>.
            </summary>
            <param name="src">ConnectorShape</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorShape"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorShape.Type">
            <summary>
            Defines the type of connector shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorShape.Clone">
            <summary>
            Creates a new connector shape that is a copy of the current shape.
            </summary>
            <returns>ConnectorShape</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnFlow">
            <summary>
            Represents the elements that are connected together to form a complete process flow in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector4 = new Connector() 
            {
                ID = "connector4",
                SourcePoint = new DiagramPoint() { X = 100, Y = 300 },
                TargetPoint = new DiagramPoint() { X = 300, Y = 400 },
                Type = ConnectorSegmentType.Straight,
                Shape = new BpmnFlow() { Type = ConnectionShapes.Bpmn, Flow = BpmnFlows.Association, Association = BpmnAssociationFlows.Default }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnFlow.#ctor(Syncfusion.Blazor.Diagram.BpmnFlow)">
            <summary>
            Creates a new instance of the BpmnFlow from the given BpmnFlow.
            </summary>
            <param name="src">BpmnFlow</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnFlow.#ctor">
            <summary>
            Initializes a new instance of the BpmnFlow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Flow">
            <summary>
             Sets the type of the Bpmn flows. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Sequence">
            <summary>
            Sets the type of the Bpmn Sequence flows. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Message">
            <summary>
            Sets the type of the Bpmn Message flows. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Association">
            <summary>
            Represents the type of data movement between the data objects, inputs, and outputs of the activities using nodes in the diagram. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnFlow.Clone">
            <summary>
            Creates a new BpmnFlow that is a copy of the current BpmnFlow. 
            </summary>
            <returns>BpmnFlow</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PathShape">
            <summary>
            Draws a series of connected lines and curves.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathShape.#ctor(Syncfusion.Blazor.Diagram.PathShape)">
            <summary>
            Creates a new instance of the Path from the given Path.
            </summary>
            <param name="src">Path</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathShape.#ctor">
            <summary>
            Initializes a new instance of the Path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathShape.Data">
            <summary>
            Gets or sets a Geometry that specifies the shape to be drawn.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathShape.Clone">
            <summary>
            Creates a new path data that is a copy of the current path data.
            </summary>
            <returns>Path</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ImageShape">
            <summary>
            Represents the behavior of the image shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageShape.#ctor">
            <summary>
            Initializes a new instance of the Image.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageShape.#ctor(Syncfusion.Blazor.Diagram.ImageShape)">
            <summary>
            Creates a new instance of the Image from the given Image.
            </summary>
            <param name="src">Image</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageShape.Source">
            <summary>
            Gets or sets the ImageSource of the image. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageShape.ImageAlign">
            <summary>
            Sets the alignment of the image within the node boundary.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageShape.Scale">
            <summary>
            Allows you to stretch the image as you desire (either to maintain the proportion or to stretch).
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageShape.Clone">
            <summary>
            Creates a new image that is a copy of the current image.
            </summary>
            <returns>Image</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BasicShape">
            <summary>
            Gets or sets the behavior of the basic shape.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node builtInNode = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Shape = new FlowShape()
                {
                    Type = Shapes.Flow,Shape = FlowShapesType.DirectData
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BasicShape.#ctor">
            <summary>
            Initializes a new instance of the BasicShape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BasicShape.#ctor(Syncfusion.Blazor.Diagram.BasicShape)">
            <summary>
            Creates a new instance of the BasicShape from the given BasicShape.
            </summary>
            <param name="src">BasicShape</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.Shape">
            <summary>
            Defines the available built-in basic shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.CornerRadius">
            <summary>
            Gets or sets the corner radius of the node shape. It is applicable only to a rectangle shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.Points">
            <summary>
            Defines the collection of points to draw a polygon. It is applicable only to a polygon shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BasicShape.Clone">
            <summary>
            Creates a new shape that is a copy of the current basic shape.
            </summary>
            <returns>BasicShape</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FlowShape">
            <summary>
            Specifies the behavior of the flow shape.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        //Set the type of shape as flow
                        Shape = new FlowShape()
                        {
                            Type = Shapes.Flow,
                            Shape = FlowShapesType.DirectData
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FlowShape.#ctor">
            <summary>
            Initializes a new instance of the FlowShape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FlowShape.#ctor(Syncfusion.Blazor.Diagram.FlowShape)">
            <summary>
            Creates a new instance of the FlowShape from the given FlowShape.
            </summary>
            <param name="src">FlowShape</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FlowShape.Shape">
            <summary>
            Defines the available built-in flow shapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FlowShape.Clone">
            <summary>
            Creates a new shape that is a copy of the current FlowShape.
            </summary>
            <returns>FlowShape</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnShape">
            <summary>
            Represents the behaviour of the BPMN shapes in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Gateway, 
                    Gateway = new BpmnGateway() 
                    {              
                        Type = BpmnGateways.None
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShape.annotationId">
            <summary>
            Sets whether the task is global or not
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnShape.#ctor">
            <summary>
            Initializes a new instance of the BpmnShape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnShape.#ctor(Syncfusion.Blazor.Diagram.BpmnShape)">
            <summary>
            Creates a new instance of the BpmnShape from the given BpmnShape.
            </summary>
            <param name="src">BpmnShape</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Shape">
            <summary>
            Represents the type of the BPMN shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Annotation">
            <summary>
            Represents a note to a process element or to the business process itself using a node in the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Annotations">
            <summary>
            Represents the collection of annotations to be displayed over the bpmn nodes. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Events">
            <summary>
             Represents the actions that are to be performed and are expressed as circles in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Gateway">
            <summary>
              It allows to control as well as merge and split the process flow in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Activity">
            <summary>
             Represents the work that a company or organization performs in a business process using a node in the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.DataObject">
            <summary>
            Represents the transferring of data into or out of an activity in the diagram. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnShape.Clone">
            <summary>
            Creates a new BpmnShape that is a copy of the current BpmnShape. 
            </summary>
            <returns>BpmnShape</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSubProcess">
            <summary>
            Represents a set of additional tasks categorized together in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity, 
                    Activity = new BpmnActivity() 
                    { 
                        Activity = BpmnActivities.SubProcess, 
                        SubProcess = new BpmnSubProcess() { Collapsed = false, Type = BpmnSubProcessTypes.Transaction, Processes = new DiagramObjectCollection<string>() { "new" } } 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcess.processesID">
            <summary>
            Defines the ID of the sub process
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnSubProcess.#ctor">
            <summary>
            Initializes a new instance of the BpmnSubProcess.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnSubProcess.#ctor(Syncfusion.Blazor.Diagram.BpmnSubProcess)">
            <summary>
            Creates a new instance of the BpmnSubProcess from the given BpmnSubProcess.
            </summary>
            <param name="src">BpmnSubProcess</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Type">
            <summary>
            Sets the specific type of the subprocess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Adhoc">
            <summary>
            Defines whether the sub process is without any prescribed order or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Boundary">
            <summary>
            Represents the type of the BPMN boundary. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Compensation">
            <summary>
            Represents a collection of tasks that describe some parts of the compensation method. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Loop">
            <summary>
            Represents that the sub-process repeats itself in sequence.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Collapsed">
            <summary>
             Represents whether the task is global or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Events">
            <summary>
            Represents when an event occurs at the start, finish, or middle of a process, it is referred to as an event. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Transaction">
            <summary>
            Represents a composed activity that is included in a process. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Processes">
            <summary>
            Represents a set of tasks categorized together in the subprocess.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnSubProcess.Clone">
            <summary>
            Creates a new BpmnSubProcess that is a copy of the current BpmnSubProcess. 
            </summary>
            <returns>BpmnSubProcess</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnAnnotation">
            <summary>
            Interface for a class BpmnAnnotation
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.DataObject, 
                    DataObject = new BpmnDataObject() 
                    { 
                        Collection = false, 
                        Type = BpmnDataObjects.Input 
                    }, 
                    Annotation = new BpmnAnnotation() { ID = "ann1", Text = "Node1" },
                    Annotations = new DiagramObjectCollection<BpmnAnnotation>() 
                    {
                        new BpmnAnnotation() 
                        { 
                            Angle = 170, 
                            Length = 150, 
                            Text = "left", 
                            ID = "left" 
                        },
                    }
                }     
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnAnnotation.#ctor(Syncfusion.Blazor.Diagram.BpmnAnnotation)">
            <summary>
            Creates a new instance of the BpmnAnnotation from the given BpmnAnnotation.
            </summary>
            <param name="src">BpmnAnnotation</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnAnnotation.#ctor">
            <summary>
            Initializes a new instance of the BpmnAnnotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnAnnotation.Text">
            <summary>
            Represents the text to be displayed in the BPMN annotation. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnAnnotation.Angle">
            <summary>
            Sets the angle between the BPMN shape and the annotation. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnAnnotation.Length">
            <summary>
            Sets the distance between the BPMN shape and the annotation. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnAnnotation.NodeId">
            <summary>
            Sets the id of the BPMN annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnAnnotation.Clone">
            <summary>
            Creates a new Bpmn Annotation that is a copy of the current Bpmn Annotation.
            </summary>
            <returns>BpmnAnnotation</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess">
            <summary>
            Represents a composed activity that is included within a process in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity, 
                    Activity = new BpmnActivity() 
                    { 
                        Activity = BpmnActivities.SubProcess, 
                        SubProcess = new BpmnSubProcess() { Collapsed = true, Type = BpmnSubProcessTypes.Transaction, Transaction = new BpmnTransactionSubProcess() { Failure = { Visible = false }, Success = { Visible = false }, Cancel = { Visible = false } } },
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.#ctor(Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess)">
            <summary>
            Creates a new instance of the BpmnTransactionSubProcess from the given BpmnTransactionSubProcess.
            </summary>
            <param name="src">BpmnTransactionSubProcess</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.#ctor">
            <summary>
            Initializes a new instance of the BpmnTransactionSubProcess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.Success">
            <summary>
            Represents the fact that the flow can be terminated by the end node even if it encounters an error.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.Failure">
            <summary>
            Represents if a subprocess finishes with an error event ,then it is not performed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.Cancel">
            <summary>
            Represents a transaction is canceled if the execution reaches the cancelled end event. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.Clone">
            <summary>
            Creates a new BpmnTransactionSubProcess that is a copy of the current BpmnTransactionSubProcess. 
            </summary>
            <returns>BpmnTransactionSubProcess</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnEvent">
            <summary>
            In BPMN, the events are expressed as circles in the diagram. 
            </summary>
            <remarks>
            When an event occurs at the start, finish, or middle of a process, it is referred to as an event.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Event, 
                    Events = new BpmnSubEvent() 
                    { 
                        Event = BpmnEvents.Intermediate, 
                        Trigger = BpmnTriggers.None 
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnEvent.#ctor(Syncfusion.Blazor.Diagram.BpmnEvent)">
            <summary>
            Creates a new instance of the BpmnEvent from the given BpmnEvent.
            </summary>
            <param name="src">BpmnEvent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnEvent.#ctor">
            <summary>
            Initializes a new instance of the BpmnEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnEvent.Shape">
            <summary>
            Represents the type of the event shape. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnEvent.Trigger">
            <summary>
            Represents the type of the trigger. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnEvent.Clone">
            <summary>
            Creates a new BpmnEvent that is a copy of the current BpmnEvent. 
            </summary>
            <returns>BpmnEvent</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnGateway">
            <summary>
            It allows to control as well as merge and split the process flow in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Gateway, 
                    Gateway = new BpmnGateway() 
                    {              
                        Type = BpmnGateways.None
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnGateway.#ctor(Syncfusion.Blazor.Diagram.BpmnGateway)">
            <summary>
            Creates a new instance of the BpmnGateway from the given BpmnGateway.
            </summary>
            <param name="src">BpmnGateway</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnGateway.#ctor">
            <summary>
            Initializes a new instance of the BpmnGateway.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnGateway.Type">
            <summary>
            Represents the type of the BPMN Gateway. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnGateway.Clone">
            <summary>
            Creates a new BpmnGateway that is a copy of the current BpmnGateway. 
            </summary>
            <returns>BpmnGateway</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDataObject">
            <summary>
            Represents the transferring of data into or out of an Activity in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.DataObject, 
                    DataObject = new BpmnDataObject() 
                    { 
                        Collection = true, 
                        Type = BpmnDataObjects.Output 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDataObject.#ctor(Syncfusion.Blazor.Diagram.BpmnDataObject)">
            <summary>
            Creates a new instance of the BpmnDataObject from the given BpmnDataObject.
            </summary>
            <param name="src">BpmnDataObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDataObject.#ctor">
            <summary>
            Initializes a new instance of the BpmnDataObject.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnDataObject.Type">
            <summary>
            Represents the type of the BPMN data object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnDataObject.Collection">
            <summary>
             Represents whether the data object is a collection of information or not. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDataObject.Clone">
            <summary>
            Creates a new BPMN data object that is a copy of the current BPMN data object. 
            </summary>
            <returns>BpmnDataObject</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTask">
            <summary>
            Represents the activity within a process flow in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity, 
                    Activity = new BpmnActivity() 
                    { 
                        Activity = BpmnActivities.Task, 
                        Task = new BpmnTask() { Call = true } 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTask.#ctor(Syncfusion.Blazor.Diagram.BpmnTask)">
            <summary>
            Creates a new instance of the BpmnTask from the given BpmnTask.
            </summary>
            <param name="src">BpmnTask</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTask.#ctor">
            <summary>
            Initializes a new instance of the BpmnTask.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTask.Type">
            <summary>
            Represents the type of the BPMNTask. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTask.Loop">
            <summary>
            Represents that the sub-process repeats itself in sequence. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTask.Call">
            <summary>
            Represents an Activity defined in a process that is external to the current process definition. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTask.Compensation">
            <summary>
            Represents a collection of tasks that describe some parts of the compensation method. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTask.Clone">
            <summary>
            Creates a new BpmnTask that is a copy of the current BpmnTask. 
            </summary>
            <returns>BpmnTask</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnActivity">
            <summary>
            Represents the work that a company or organization performs in a business process using a node in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Activity, 
                    Activity = new BpmnActivity() 
                    { 
                        Activity = BpmnActivities.Task, 
                        Task = new BpmnTask() { Type = BpmnTasks.BusinessRule } 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnActivity.#ctor(Syncfusion.Blazor.Diagram.BpmnActivity)">
            <summary>
            Creates a new instance of the BpmnActivity from the given BpmnActivity.
            </summary>
            <param name="src">BpmnActivity</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnActivity.#ctor">
            <summary>
            Initializes a new instance of the BpmnActivity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.Activity">
            <summary>
            Represents the process that is external to the current process definition. 
            </summary>
            <remarks>
            It allows you to create a reusable process definition that can be reused in multiple other process definitions. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.Task">
            <summary>
            Represents the activity within a process flow. we can create a task when the activity cannot be broken down to a finer level of detail. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.SubProcess">
            <summary>
            Represents the compound activity that represents a collection of other tasks and sub-processes
            </summary>
            <remarks>
            We can split a complex process into multiple levels, which allows you to focus on a particular area in a single process diagram.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnActivity.Clone">
            <summary>
            Creates a new Bpmn Activity that is a copy of the current Bpmn Activity. 
            </summary>
            <returns>BpmnActivity</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSubEvent">
            <summary>
            Represents the behaviour of the BpmnSubEvent in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = Shapes.Bpmn, 
                    Shape = BpmnShapes.Event, 
                    Events = new BpmnSubEvent() 
                    { 
                        Event = BpmnEvents.Start, 
                        Trigger = BpmnTriggers.None 
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnSubEvent.#ctor">
            <summary>
            Initializes a new instance of the BpmnSubEvent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnSubEvent.#ctor(Syncfusion.Blazor.Diagram.BpmnSubEvent)">
            <summary>
            Creates a new instance of the BpmnSubEvent from the given BpmnSubEvent.
            </summary>
            <param name="src">BpmnSubEvent</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.ID">
            <summary>
             Represents the unique id of the diagram object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Wrapper">
            <summary>
            Sets or gets the UI of a node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Event">
            <summary>
            Sets the type of the BPMN Event. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Trigger">
            <summary>
            Defines the type of the trigger.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Offset">
            <summary>
            Defines the position of the sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Width">
            <summary>
            Gets or sets the width of the node. If it is not specified, the node renders based on the content's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Height">
            <summary>
             Gets or sets the height of the node. If it is not specified, the node renders based on the content's height. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Visible">
            <summary>
            Sets the visibility of the sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Ports">
            <summary>
            Gets or sets a collection of PointPort (connection points). 
            </summary>
            <remarks>
            Ports act as the connection points between the nodes and allow them to create connections only with those specific points. There may be any number of ports in a node. You can   modify the port’s appearance, visibility, positioning and can add custom shapes to them. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Annotations">
            <summary>
            Represents the collection of textual information contained in the node. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.HorizontalAlignment">
            <summary>
             Gets or sets the horizontal alignment of the node. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the node. 
            </summary>
            <remarks>
            Describes how a node should be positioned or stretched in VerticalAlignment. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Margin">
            <summary>
            Defines the space to be left between the node and its immediate parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnSubEvent.Clone">
            <summary>
            Creates a new BpmnSubEvent that is a copy of the current BpmnSubEvent. 
            </summary>
            <returns>BpmnSubEvent</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramSelectionSettings">
            <summary>
            Represents a visual representation of the selected elements. It behaves like a container for single or multiple selected elements. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Nodes">
            <summary>
            Specifies the collection of selected nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Connectors">
            <summary>
            Specifies the collection of selected connectors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Width">
            <summary>
            Gets or sets the width of the selection region. Its value differs based on the selected region.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Height">
            <summary>
            Gets or sets the height of the selected region.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.OffsetX">
            <summary>
            Gets or sets the X-coordinate of the selected region. Its value may vary based on the selected region.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.OffsetY">
            <summary>
            Gets or sets the Y-coordinate of the selected region. Its value differs based on the selected region.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.RotationAngle">
            <summary>
            Gets or sets the angle at which the node should be rotated. 
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Pivot">
            <summary>
            Gets or sets the ratio/fractional value relative to the node, based on which the node will be transformed (positioning, scaling, and rotation). 
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.UserHandles">
            <summary>
            Defines the collection of UserHandles.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.RubberBandSelectionMode">
            <summary>
            Specifies whether the diagram objects can be selected when the selection region intersects with the objects or only when the complete object's bounds are within the selection region.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Constraints">
            <summary>
            Enables or disables certain behaviors of the selector.  
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this selector has been updated.
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="container">IDiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramSelectionSettings"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.#ctor(Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
            Creates a new instance of the Selector from the given Selector.
            </summary>
            <param name="src">Selector</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Clone">
            <summary>
            Creates a new selector that is a copy of the current selector.
            </summary>
            <returns>Selector</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramPoint">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.#ctor">
            <summary>
            Initializes a new instance of the DiagramPoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.#ctor(Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Creates a new instance of the DiagramPoint from the given point.
            </summary>
            <param name="src">Point.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPoint.X">
            <summary>
            Gets or sets the x-coordinate of this point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPoint.Y">
            <summary>
            Gets or sets the y-coordinate of this point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the DiagramPoint struct with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.Transform(Syncfusion.Blazor.Diagram.DiagramPoint,System.Double,System.Double)">
            <summary>
            Transform the point based on the rotate angle and length.
            </summary>
            <param name="point"></param>
            <param name="angle"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.FindAngle(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Find the angle between the two points.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.IsEmptyPoint(Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Check whether the points are given 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.Clone">
            <summary>
            Creates a new point that is a copy of the current point. 
            </summary>
            <returns>Point</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramRect">
            <summary>
            Represents the width, height and position of a rectangle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref = "diagram" Width="1000px" Height="1000px" @bind-Nodes="Nodes">
            </SfDiagramComponent>    
            @code
            {
                SfDiagramComponent diagram;
                private async Task PageBounds()
                {
                    Rect bounds = diagram.GetPageBounds();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.TopLeft">
            <summary>
            Gets the position of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.TopRight">
            <summary>
            Gets the position of the top-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.TopCenter">
            <summary>
            Gets or sets the position of the top-Center corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.MiddleLeft">
            <summary>
            Gets or sets the position of the middle-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.MiddleRight">
            <summary>
            Gets or sets the position of the middle-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Center">
            <summary>
            Gets or sets the position of the center of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.BottomLeft">
            <summary>
            Gets or sets the position of the bottom-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.BottomRight">
            <summary>
            Gets or sets the position of the bottom-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.BottomCenter">
            <summary>
            Gets or sets the position of the bottom-center corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.X">
            <summary>
            Gets or sets the x-axis value on the rectangle's left side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Y">
            <summary>
            Gets or sets the y-axis value on the rectangle's top side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Width">
             <summary>
            Gets or sets the rectangle's width.
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Height">
            <summary>
            Gets or sets the rectangle's height.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.#ctor(Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/> from the given Rect.
            </summary>
            <param name="src">Rect.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/> instance with the specified x-coordinate, y-coordinate, width, and height.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Left">
            <summary>
            Gets the x-axis value on the rectangle's left side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Right">
            <summary>
            Gets the x-axis value on the rectangle's right side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Top">
            <summary>
            Gets the y-axis location on the rectangle's top.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Bottom">
            <summary>
            Gets the bottom of the rectangle's y-axis value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.Clone">
            <summary>
            Creates a new rect that is a copy of the current rect.
            </summary>
            <returns>Rect</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramSize">
            <summary>
            Describes the size of an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSize.Width">
            <summary>
            Gets or sets the width of an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSize.Height">
            <summary>
            Gets or sets the height of an object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SfDiagramComponent">
            <summary>
            Renders the diagram. It contains all the properties of the diagram to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.HistoryManager">
            <summary>
            Notifies when a change is reverted or restored. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.BridgeDirection">
            <summary>
            Defines the direction of the bridge that is inserted when the connector segments are intersected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.BridgeDirectionChanged">
            <summary>
            Specifies the callback to trigger when the bridge direction changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DataSourceSettings">
            <summary>
            Configures the data source that is to be bound with the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Width">
            <summary>
            Defines the width of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.WidthChanged">
            <summary>
            Specifies the callback to trigger when the width changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.HeightChanged">
            <summary>
            Specifies the callback to trigger when the height changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ChildContent">
            <summary>
            Sets the child content of the diagram component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Constraints">
            <summary>
            Enables/disables certain behaviors of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConstraintsChanged">
            <summary>
            Specifies the callback to trigger when the constraint changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.InteractionController">
            <summary>
            Defines the precedence of the interactive tools. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.InteractionControllerChanged">
            <summary>
            Specifies the callback to trigger when the tool changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SnapSettings">
            <summary>
            Defines the gridlines and specifies how and when objects must be snapped. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DiagramTemplates">
            <summary>
            Represents the template of the diagram element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PageSettings">
            <summary>
            Page settings enable you to customize the appearance, width, and height of the Diagram page. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status, and view port size of the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Height">
            <summary>
            Defines the height of the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Layout">
            <summary>
            Layout is used to auto-arrange the nodes in the Diagram area. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.CommandManager">
            <summary>
            Defines a set of custom commands and binds them with a set of desired key gestures. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectionSettings">
            <summary>
            Defines the collection of selected items, the size and position of the selector.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DrawingObject">
            <summary>
            Defines the object to be drawn using a drawing tool. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DrawingObjectChanged">
            <summary>
            Specifies the callback to trigger when the drawing object changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Nodes">
            <summary>
            Defines a collection of node objects, used to visualize the geometrical information. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Connectors">
            <summary>
            Defines a collection of connector objects, used to create links between two points, nodes or ports to represent the relationships between them. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.NodesChanged">
            <summary>
            Specifies the callback to trigger when the node changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConnectorsChanged">
            <summary>
            Specifies the callback to trigger when the connector changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PropertyChanged">
            <summary>
            Triggers when the node or connector property changes. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectionChanging">
            <summary>
            Triggers before the selection is change in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectionChanged">
            <summary>
            Triggers when the selection is changed in the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.TextChanged">
            <summary>
            Triggers when the node’s/connector's label is changed in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.HistoryChanged">
            <summary>
            Triggers when a change is reverted or restored(undo/redo). 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Dragging">
            <summary>
            Triggers when an element drags over another diagram element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragStart">
            <summary>
            Triggers when a symbol is dragged into the diagram from the symbol palette 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragLeave">
            <summary>
            Triggers when a symbol is dragged outside of the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragDrop">
            <summary>
            Triggers when a symbol is dragged and dropped from the symbol palette to the drawing area. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.KeyDown">
            <summary>
            Triggers when a user presses a key. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.KeyUp">
            <summary>
            Triggers when a user releases a key. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.CollectionChanging">
            <summary>
            Triggers before the node/connector is add or remove from the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.CollectionChanged">
            <summary>
            Triggers when the node/connector is added or removed from the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SegmentCollectionChange">
            <summary>
            Triggers when the connector’s segment collection is updated. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Click">
            <summary>
            Triggers when a node, connector or diagram is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.MouseEnter">
            <summary>
            Triggers when the mouse enters a node/connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.MouseHover">
            <summary>
            Triggers when the mouse pointer rests on the node/connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.MouseLeave">
            <summary>
            Triggers when the mouse leaves a node/connector. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ScrollChanged">
            <summary>
            Triggers when the scrollbar is updated. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PositionChanging">
            <summary>
            Triggers while dragging the elements in the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PositionChanged">
            <summary>
            Triggers when the node's/connector's position is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConnectionChanging">
            <summary>
            Triggers before the connector’s source or target point is connect or disconnect from the source or target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConnectionChanged">
            <summary>
            Triggers when the connector’s source or target point is connected or disconnected from the source or target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SourcePointChanging">
            <summary>
            Triggers while dragging the connector’s source end in the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SourcePointChanged">
            <summary>
            Triggers when the connector’s source point is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.TargetPointChanging">
            <summary>
            Triggers while dragging the connector’s target end in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.TargetPointChanged">
            <summary>
            Triggers when the connector’s target point is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.FixedUserHandleClick">
            <summary>
            Triggers when a Fixed User Handle item is clicked. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SizeChanging">
            <summary>
            Triggers before a node is resize.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SizeChanged">
            <summary>
            Triggers when a node is resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.RotationChanging">
            <summary>
            Triggers before the diagram elements are rotate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.RotationChanged">
            <summary>
            Triggers when the diagram elements are rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DataLoaded">
            <summary>
            Triggers when the diagram layout is rendered completely. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetNodeTemplate">
            <summary>
            Customizes the node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetCustomTool">
            <summary>
            This method allows users to customize the tool. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetCustomCursor">
            <summary>
            This method allows users to create their own cursor. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.NodeCreating">
            <summary>
            Helps to assign the default properties of nodes. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConnectorCreating">
            <summary>
            Helps to assign the default properties of the connector. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Copy">
            <summary>
            It copies the selected nodes/connectors to the clipboard. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Cut">
            <summary>
            It removes the selected nodes/connectors and moves them to the clipboard. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Paste">
            <summary>
            Adds the given objects/ objects in the diagram clipboard to the diagram control. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetPageBounds(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Represents a method used to get the bounds of the page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.BeginUpdate">
            <summary>
            This method locks the diagram to prevent its visual updates until the EndUpdate() method is called. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.EndUpdate">
            <summary>
            This method unlocks the diagram after a call to the BeginUpdate(Boolean) method and causes an immediate visual update.  
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddDiagramElements(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            It is used for adding nodes collection to the diagram. 
            </summary>
            <param name="items">DiagramObjectCollection</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DoLayout">
            <summary>
            It allows the user to refresh the layout at runtime. 
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetObject(System.String)">
            <summary>
            This method returns the object based on the given id. 
            </summary>
            <param name="name">String</param>
            <returns>IDiagramObject</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Nudge(Syncfusion.Blazor.Diagram.Direction,System.Nullable{System.Int32})">
            <summary>
            Repositions the selected object by the specified delta in the given direction.
            </summary>
            <remarks>The nudge commands move the selected elements towards up, down, left, or right by 1 pixel, by default.</remarks>
            <param name="direction">Nudge command moves the selected elements towards the specified <seealso cref="T:Syncfusion.Blazor.Diagram.Direction"/>.</param>
            <param name="nudgeDelta">The amount in delta by which to reposition the selected objects.</param>
            examples for the following:
            <example>
            <code>
            private void Nudge()
             {
               //Repositions the selected objects by 50 towards down direction.
               diagram.Nudge(NudgeDirection.Down, 50);
             }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Allows the user to update all the properties. 
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="parent">IDiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetSameSize(Syncfusion.Blazor.Diagram.SizingMode,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            Scales the given objects to the size of the first object in the group.
            </summary>
            <param name="sizingType">SizingMode</param>
            <param name="objects">DiagramObjectCollection</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetDistribute(Syncfusion.Blazor.Diagram.DistributeOptions,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            It arranges the group of nodes/connectors at equal intervals within the group of nodes/connectors. 
            </summary>
            <param name="option">DistributeOptions</param>
            <param name="objects">DiagramObjectCollection</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetAlign(Syncfusion.Blazor.Diagram.AlignmentOptions,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase},Syncfusion.Blazor.Diagram.AlignmentMode)">
            <summary>
            Aligns the group of objects with reference to the first object in the group. 
            </summary>
            <param name="alignmentOptions">AlignmentOptions</param>
            <param name="objects">DiagramObjectCollection</param>
            <param name="alignmentMode">AlignmentMode</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Rotate(Syncfusion.Blazor.Diagram.IDiagramObject,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Rotates the given nodes/connectors at the given angle. 
            </summary>
            <param name="obj">IDiagramObject</param>
            <param name="angle">double</param>
            <param name="pivot">Point</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragSourceEnd(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double)">
            <summary>
             Moves the source point of the connector
             </summary>     
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragTargetEnd(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double)">
            <summary>
             Moves the target point of the connector
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.RefreshDataSource">
            <summary>
            This method will refresh the layout based on the changes in the data source. 
            </summary>
            <returns>RefreshDataSource</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SaveDiagram">
            <summary>
            Serializes the diagram control as a string. 
            </summary>
            <returns>jsonData</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.LoadDiagram(System.String)">
            <summary>
            Converts the given string into a Diagram Control. 
            </summary>
            <param name="data">string</param>
            <returns>Diagram</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.StartTextEdit(Syncfusion.Blazor.Diagram.IDiagramObject,System.String)">
            <summary>
            Edits the annotation of the node/connector. 
            </summary>
            <param name="diagramObject">IDiagramObject</param>
            <param name="id">String</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Select(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},System.Nullable{System.Boolean})">
            <summary>
            Selects the given collection of objects.
            </summary>
            <param name="objects">ObservableCollection</param>
            <param name="multipleSelection">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectAll">
            <summary>
             Select all the objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UnSelect(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Removes the given object from the selection list. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ClearSelection">
            <summary>
             It allows the user to clear the selected nodes/connectors in the diagram. 
             </summary>        
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Drag(Syncfusion.Blazor.Diagram.IDiagramObject,System.Double,System.Double)">
            <summary>
            It drags the given object by the specified pixels. 
            </summary>
            <param name="obj">IDiagramObject</param>
            <param name="tx">double</param>
            <param name="ty">double</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Scale(Syncfusion.Blazor.Diagram.IDiagramObject,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Scales the given objects by the given ratio. 
            </summary>
            <param name="obj">IDiagramObject</param>
            <param name="sx">double</param>
            <param name="sy">double</param>
            <param name="pivot">Point</param>
            <returns>checkBoundaryConstraints</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Zoom(System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Allows the user to zoom in or zoom out. 
            </summary>
            <param name="factor">double</param>
            <param name="focusPoint">Point</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Pan(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            It is used to pan the diagram control to the horizontal and vertical offsets. 
            </summary>
            <param name="horizontalOffset">double</param>
            <param name="verticalOffset">double</param>
            <param name="focusedPoint">Point</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.RemoveChild(Syncfusion.Blazor.Diagram.NodeGroup,Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            It is used to remove the child from the selected group node.
            </summary>
            <param name="group">NodeGroup</param>
            <param name="child">NodeBase</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddChild(Syncfusion.Blazor.Diagram.NodeGroup,Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used for adding child to the selected group node. 
            </summary>
            <param name="group">NodeGroup</param>
            <param name="child">NodeBase</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Group">
            <summary>
            Group the selected nodes and connectors in the diagram. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UnGroup">
            <summary>
            UnGroup the selected nodes and connectors in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Undo">
            <summary>
            Restores the last action that is performed. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Redo">
            <summary>
            It is used to restore the last undo action. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.StartGroupAction">
            <summary>
            Starts the grouping of actions that will be undone/restored as a whole. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.EndGroupAction">
            <summary>
            It closes the grouping of actions that will be undone/restored as a whole.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ClearHistory">
            <summary>
            This method is used to clear the history.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Clone">
            <summary>
            This method helps to clone the diagram.
            </summary>
            <returns>Diagram</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent">
            <summary>
            Represents how to display a collection of palettes. The palette shows a set of nodes and connectors. It allows you to drag and drop the nodes and connectors into the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes" SymbolDragPreviewSize="@SymbolPreview" SymbolHeight="@symbolSizeHeight" GetSymbolInfo="GetSymbolInfo" SymbolWidth="@symbolSizeWidth" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent >
            @code
            { 
                DiagramSize SymbolPreview;
                SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
                double symbolSizeWidth;
                double symbolSizeHeight;
                DiagramObjectCollection<Palette> Palettes = new DiagramObjectCollection<Palette>();
                DiagramObjectCollection<NodeBase> Tnodes = new DiagramObjectCollection<NodeBase>();
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    return SymbolInfo;
                }
                protected override void OnInitialized()
                {
                    SymbolPreview = new DiagramSize();
                    SymbolPreview.Width = 80;
                    SymbolPreview.Height = 80;
                    symbolSizeWidth = 50;
                    symbolSizeHeight = 50;
                    Tnodes = new DiagramObjectCollection<NodeBase>();
                    Node Tnode2 = new Node()
                    { 
                        ID = "node1", 
                        Shape = new FlowShape() { Type = Shapes.Flow, Shape = FlowShapeType.Decision } 
                    };
                    Tnodes.Add(Tnode2);
                    Palettes = new DiagramObjectCollection<Palette>()
                    {
                        new Palette(){Symbols =Tnodes,Title="Flow Shapes",ID="Flow Shapes" },
                    };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Targets">
            <summary>
            Represents the collection of diagram instances which are to be added to perform the drag and drop funcnalities with multiple diagrams. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Width">
            <summary>
            Gets or sets the width of symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Height">
            <summary>
            Gets or sets the Height of the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AllowDrag">
            <summary>
            Represents whether the symbols can be dragged from the palette or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ChildContent">
            <summary>
            Sets Child content for the symbol Palette component
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolWidth">
            <summary>
            Gets or sets the width of the symbol which will be positioned inside the palette. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolHeight">
            <summary>
            Gets or sets the Height of the symbol which will be positioned inside the palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolDragPreviewSize">
            <summary>
            Represents the size of the symbol preview while dragging a symbol from the palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolDiagramPreviewSize">
            <summary>
            Represents the customization of the drag size of the individual palette items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolPaletteTemplates">
            <summary>
            Sets a segment of the UI content, implemented as a delegate that writes the content of a Node . 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Palettes">
            <summary>
             Represents how to display a collection of similar symbols and annotates the group textually with its heading and the unique id of a symbol group. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolMargin">
            <summary>
            Sets an  extra space around the outer boundaries of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.NodeCreating">
            <summary>
            Represents the default properties of the nodes to be returned.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ConnectorCreating">
            <summary>
            Represents the default properties of the connectors to be returned. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetSymbolInfo">
            <summary>
            Represents the size, appearance and description of a symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SelectionChanged">
            <summary>
            Triggers after the object selection changes in the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Expanding">
            <summary>
            The event will be Triggers before the item gets collapsed/expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AddPaletteItem(System.String,Syncfusion.Blazor.Diagram.NodeBase,System.Boolean)">
            <summary>
            Used to add the palette item as nodes or connectors in palettes. 
            </summary>
            <param name="paletteName">string</param>
            <param name="paletteSymbol">NodeBase</param>
            <param name="isChild">bool</param>
            <example>
            <code>
            <![CDATA[
            Node Tnode2 = new Node()
            { 
                Shape = new FlowShape() { Type = Shapes.Flow, Shape = FlowShapeType.Decision }
            };
            PaletteInstance.AddPaletteItem("Flow Shapes", Tnode2, false);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AddPalettes(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.SymbolPalette.Palette})">
            <summary>
            Used to add particular palettes to the symbol palette at runtime.
            </summary>
            <param name="palettes">DiagramObjectCollection</param>
            <example>
            <code>
            <![CDATA[
            DiagramObjectCollection<Palette> NewPalettes = new DiagramObjectCollection<Palette>()
            {
                new Palette() { Symbols = T3nodes,Title = "New palette1",ID = "newPalette1" },
                new Palette() { Symbols = T4nodes,Title = "New palette2",ID = "newPalette2" },
            };
            PaletteInstance.AddPalettes(NewPalettes);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.RemovePalettes(System.String)">
            <summary>
            Used to remove particular palettes from the symbol palette at runtime.
            </summary>
            <param name="id">string</param>
            <example>
            <code>
            <![CDATA[
            PaletteInstance.RemovePalettes("Flow Shapes");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.RemovePaletteItem(System.String,System.String)">
            <summary>
            Used to remove the palette item such as nodes or connectors from the palettes.
            </summary>
            <param name="paletteName">string</param>
            <param name="symbolId">string</param>
            <example>
            <code>
            <![CDATA[
            PaletteInstance.RemovePaletteItem("Flow Shapes", "node1");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol palette objects has been updated.
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="container">IDiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Clone">
            <summary>
            Creates a new palette that is a copy of the current palette. 
            </summary>
            <returns>Throws not implemented exception</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject">
            <summary>
            Represents the base class for all the symbol palette objects. It is used to handle common actions like property changes in any symbol palette objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject)">
            <summary>
            Invoked whenever the effective value of any property in this Symbol palette object has been updated. 
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="container">IPaletteObject</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.Palette">
            <summary>
            A palette displays a set of similar symbols and annotates the group textually with its heading. 
            </summary>
            <example>
            <code>
            <![CDATA[
            new Palette()
            {
                Id = "BasicShape",
                Expanded = true,
                Symbols = BasicShape,
                Title = "Basic Shapes",
                IconCss = "e-ddb-icons e-basic"
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.ID">
            <summary>
             Represents the unique id of a symbol group. By default, it is empty. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.IsExpanded">
            <summary>
            Gets or sets whether the palette items are to be expanded or not. By default, it is true. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.Title">
            <summary>
            Represents the title of the symbol group. By default, it is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.IconCss">
            <summary>
            Represents the class of the symbol group. By default, it is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.Symbols">
            <summary>
            Represents the collection of predefined symbols.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol palette object has been updated.
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="container">IPaletteObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol palette object has been updated.
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="container">IPaletteObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.Clone">
            <summary>
            Creates a new palette that is a copy of the current palette. 
            </summary>
            <returns>Palette</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo">
            <summary>
            Represents the size and description of a symbol. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes" SymbolDragPreviewSize="@SymbolPreview" SymbolHeight="@symbolSizeHeight"  GetSymbolInfo="GetSymbolInfo" SymbolWidth="@symbolSizeWidth" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent >
            @code
            { 
                DiagramSize SymbolPreview;
                SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
                double symbolSizeWidth;
                double symbolSizeHeight;
                DiagramObjectCollection<Palette> Palettes = new DiagramObjectCollection<Palette>();
                DiagramObjectCollection<NodeBase> Tnodes = new DiagramObjectCollection<NodeBase>();
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    return SymbolInfo;
                }
                protected override void OnInitialized()
                {
                    SymbolPreview = new DiagramSize();
                    SymbolPreview.Width = 80;
                    SymbolPreview.Height = 80;
                    symbolSizeWidth = 50;
                    symbolSizeHeight = 50;
                    Tnodes = new DiagramObjectCollection<NodeBase>();
                    Node Tnode2 = new Node()
                    { 
                        ID = "node1", 
                        Shape = new FlowShape() { Type = Shapes.Flow, Shape = FlowShapesType.Decision } 
                    };
                    Tnodes.Add(Tnode2);
                    Palettes = new DiagramObjectCollection<Palette>()
                    {
                        new Palette(){Symbols =Tnodes,Title="Flow Shapes",Id="Flow Shapes" },
                    };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Height">
            <summary>
            Represents the height of the symbol to be drawn over the palette. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Width">
            <summary>
            Represents the width of the symbol to be drawn over the palette. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Fit">
            <summary>
            Represents whether the symbol has to fit into the size that is defined by the symbol palette. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Description">
            <summary>
            Specifies the text to be displayed and how that is to be handled. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription">
            <summary>
            Represents the textual description of a symbol. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes" SymbolPreview="@SymbolPreview" SymbolHeight="@symbolSizeHeight"  GetSymbolInfo="GetSymbolInfo" SymbolWidth="@symbolSizeWidth" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent >
            @code
            { 
                Size SymbolPreview;
                SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
                double symbolSizeWidth;
                double symbolSizeHeight;
                DiagramObjectCollection<Palette> Palettes = new DiagramObjectCollection<Palette>();
                DiagramObjectCollection<NodeBase> Tnodes = new DiagramObjectCollection<NodeBase>();
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    string text = null;
                    if (symbol is Node)
                    {
                        text = ((symbol as Node).Shape as Shape).Type.ToString() + (symbol as Node).ID;
                    }
                    SymbolInfo.Description = new SymbolDescription() { Text = text };
                    return SymbolInfo;
                }
                protected override void OnInitialized()
                {
                    SymbolPreview = new Size();
                    SymbolPreview.Width = 80;
                    SymbolPreview.Height = 80;
                    symbolSizeWidth = 50;
                    symbolSizeHeight = 50;
                    Tnodes = new DiagramObjectCollection<NodeBase>();
                    Node Tnode2 = new Node()
                    { 
                        ID = "node1", 
                        Shape = new FlowShape() { Type = Shapes.Flow, Shape = FlowShapesType.Decision } 
                    };
                    Tnodes.Add(Tnode2);
                    Palettes = new DiagramObjectCollection<Palette>()
                    {
                        new Palette(){Symbols =Tnodes,Title="Flow Shapes",Id="Flow Shapes" },
                    };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription.Text">
            <summary>
            Represents the textual information to be displayed in the symbol. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription.TextOverflow">
            <summary>
            Specifies a value that indicates whether to render ellipses (...) to indicate text overflow. By default, it is wrapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription.TextWrapping">
            <summary>
            Wraps the text to the next line when it exceeds its bounds. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteSelectionChangedEventArgs">
            <summary>
            Notifies when the selection objects change in the symbol palette. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Width="@paletteWidth" Height="@paletteHeight"
                                      Palettes="@Palettes" SelectionChanged="PaletteSelectionChange">
            </SfSymbolPaletteComponent>
            private void PaletteSelectionChange(PaletteSelectionChangedEventArgs args)
            {
                String oldID = args.OldValue;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteSelectionChangedEventArgs.OldValue">
            <summary>
            Returns the old palette item ID that is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteSelectionChangedEventArgs.NewValue">
            <summary>
            Returns the new palette item ID that is selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs">
            <summary>
            Notifies when the palette items are expanded or collapsed in the symbol palette. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfSymbolPaletteComponent Width="@paletteWidth" Height="@paletteHeight"
                                      Palettes="@Palettes" Expanding="OnExpanding">
            </SfSymbolPaletteComponent>
            private void OnExpanding(PaletteExpandingEventArgs args)
            {
                if (args.Cancel)
                {
                    args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs.Index">
            <summary>
            Represents the index of the palette item being selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs.IsExpanded">
            <summary>
            Represents the value if the palette item is expanded. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs.Cancel">
            <summary>
            Gets or Sets that indicate whether the palette item expand or collapse is to be canceled. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs.Palette">
            <summary>
            Represents the properties of the palette item being selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin">
            <summary>
            Specifies the extra space around the outer boundaries of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Bottom">
            <summary>
            Gets or sets the extra space at the bottom of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Left">
            <summary>
            Gets or sets the extra space at the left of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Right">
            <summary>
            Gets or sets the extra space at the right of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Top">
            <summary>
            Gets or sets the extra space at the top of the symbol.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol margin has been updated.
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="container">IPaletteObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Clone">
            <summary>
            Creates a new SymbolMargin that is a copy of the current SymbolMargin. 
            </summary>
            <returns>SymbolMargin</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol margin has been updated.
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="container">IPaletteObject</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates">
            <summary>
            Represents a segment of UI content, implemented as a delegate that writes the content of a Node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.NodeTemplate">
            <summary>
            A NodeTemplate represents a segment of the UI to be rendered for a Node.
            </summary>  
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2">
            <summary>
            Specifies the AutoComplete Events of the component.
            </summary>
            <typeparam name="TValue">Specifies the value type.</typeparam>
            <typeparam name="TItem">Specifies the type of AutoCompleteEvents.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.OnActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.OnActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.OnActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.OnOpen">
            <summary>
            Triggers when the popup before opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.Blur">
            <summary>
            Triggers when focus moves out from the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.ValueChange">
            <summary>
            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>
            <para>Use Change event to configure the cascading DropDownList.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.OnClose">
            <summary>
            Triggers before the popup is closed. If you cancel this event, the popup remains opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.CustomValueSpecifier">
            <summary>
            Triggers on set a custom value to this component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.Filtering">
            <summary>
            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.Focus">
            <summary>
            Triggers when the component is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.Opened">
            <summary>
            Triggers after the popup has been closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.Closed">
            <summary>
            Triggers when the popup closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.OnValueSelect">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.AutoCompleteEvents`2.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings">
            <summary>
            The Fields property maps the columns of the data table and binds the data to the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings.GroupBy">
            <summary>
            Group the list items with it's related items by mapping groupBy field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the list element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings.IconCss">
            <summary>
            Maps the icon class column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings.Text">
            <summary>
            Maps the text column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings.Value">
            <summary>
            Maps the value column from data table for each list item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.AutoCompleteTemplates`1">
            <summary>
            The AutoComplete has been provided with several options to customize each list item, group title, selected value, header, and footer elements.
            </summary>
            /// <typeparam name="TItem">Specifies the type of AutoCompleteTemplates.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SfAutoComplete`2">
            <summary>
            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.
            </summary>
            <summary>
            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.Highlight">
            <summary>
            When set to 'true', highlight the searched characters on suggested list items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.MinLength">
            <summary>
            Allows you to set the minimum search character length, the search action will perform after typed minimum characters.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.FilterType">
            <summary>
            Determines on which filter type, the component needs to be considered on search action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ShowClearButton">
            <summary>
            <para>Specifies whether to show or hide the clear button.</para>
            <para>When the clear button is clicked, `Value` properties are reset to null.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ShowPopupButton">
            <summary>
            Allows you to either show or hide the popup button on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.SuggestionCount">
            <summary>
            Supports the specified number of list items on the suggestion popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.AutoCompleteParent">
            <summary>
            Parent component of AutoComplete.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ROOT">
            <summary>
            Specifies the root class of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ComponentName">
            <summary>
            Specifies the component name.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.IsFilter">
            <summary>
            Specifies whether filter option is allowed or not.
            </summary>
            <returns>bool.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.InvokeBeforeOpen">
            <summary>
            Triggers before the popup get opened.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.InvokeAfterClosed">
            <summary>
            Triggers after the popup get closed.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.InvokePopupEvents(System.Boolean)">
            <summary>
            Invoked when popup get opened.
            </summary>
            <param name="isOpen">True if the popup in open state.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.InvokeSelectEvent(`1,System.EventArgs)">
            <summary>
            Method which returns the selected event arguments.
            </summary>
            <param name="item">Specifies the item.</param>
            <param name="args">Speciifes the EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.InvokeChangeEvent(System.EventArgs)">
            <summary>
            Method which returns the change event arguments.
            </summary>
            <param name="args">Specifies the EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.SearchList(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Task which specifies the search list.
            </summary>
            <param name="args">Specifies the KeyboardEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.FocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Triggers when the component get focused in.
            </summary>
            <param name="args">Specifies the FocusEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.InvokeBlur">
            <summary>
            Triggers when component get focused out.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.IsEditTextBox">
            <summary>
            Specifies whether it is edit textbox.
            </summary>
            <returns>bool.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.UpdateFocusItem(`1)">
            <summary>
            Task which updates the focus item.
            </summary>
            <param name="focusItem">Specifies the focus item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.GetQuery(Syncfusion.Blazor.Data.Query)">
            <summary>
            Method which gets the query.
            </summary>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ClearAll(System.EventArgs)">
            <summary>
            Specifies the clear all event.
            </summary>
            <param name="args">Specifies the EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ActionBegin(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which pecifies the action begin event.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.UpdateMainData">
            <summary>
            Method which updates main data.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ActionFailure(System.Object)">
            <summary>
            Task which specifies the action failure event.
            </summary>
            <param name="args">Specifies the object arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ActionComplete(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which specifies the action complete event.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.InvokeCustomValueEvent">
            <summary>
            Task which specifies the custom value event.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.ListItemCreated(Syncfusion.Blazor.DropDowns.ListOptions{`1})">
            <summary>
            Task which specifies the list item created event.
            </summary>
            <param name="listItem">Specifies the list item.</param>
            <returns>ListOptions.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.HighLightSearch(System.String,System.Boolean,Syncfusion.Blazor.DropDowns.FilterType,System.String)">
            <summary>
            Highlight the searched characters on suggested list items.
            </summary>
            <param name="textValue">highlight the list item.</param>
            <param name="ignoreCase">performing the search  text based on casing.</param>
            <param name="filtertype">Determines on which filter type, the highlight text update on the text.</param>
            <param name="highLighText"> Higlighted the char based on hightligh text and this is  optional. If not provide the highlightText, it wil get the filter value.</param>
            <returns>Returns highlight string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfAutoComplete`2.UpdateChildProperties(System.Object)">
            <summary>
            Update the autocomplete fileds.
            </summary>
            <param name="fieldValue">Specifies the field value.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates`1">
            <summary>
            The DropDowns has been provided with several options to customize each list item, group title, header, and footer elements.
            </summary>
            <typeparam name="TItem">Specifies the type of DropDownsTemplates.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates`1.FooterTemplate">
            <summary>
            Accepts the template design and assigns it to the footer container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates`1.HeaderTemplate">
            <summary>
            Accepts the template design and assigns it to the header container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates`1.GroupTemplate">
            <summary>
            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates`1.ItemTemplate">
            <summary>
            Accepts the template design and assigns it to each list item present in the popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates`1.NoRecordsTemplate">
            <summary>
            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates`1.ActionFailureTemplate">
            <summary>
            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates`1.OnInitialized">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.NoRecord`1.IsFaiure">
            <summary>
            IsActionFaiure set to true, then the action failure template is show in popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.NoRecord`1.LocaleKey">
            <summary>
            Get the no record locale key for dropdowns component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.NoRecord`1.FailureLocaleKey">
            <summary>
            Get the action failure locale key for dropdowns component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.NoRecord`1.LocaleValue">
            <summary>
            Get the no record locale value for dropdowns component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.Internal.NoRecord`1.FailureLocaleValue">
            <summary>
            Get the action failure locale value for dropdowns component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.Internal.NoRecord`1.CallStateHasChangedAsync">
            <summary>
            Invoke state change of the component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.Internal.NoRecord`1.UpdateChildProperties(System.Object)">
             <summary>
             Update the dropdownlist fileds
             </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SfDropDownBase`1">
            <summary>
            The DropDownBase can be created data source and fetch the list of data from data bound component.
            </summary>
            <typeparam name="T">Specifies the type of SfDropDownBase.</typeparam>
            <summary>
            The DropDownBase can be created data source and fetch the list of data from data bound component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.Fields">
            <summary>
            <para>The `Fields` property maps the columns of the data table and binds the data to the component.</para>
            <list type="bullet">
            <item>
            <term>Text</term>
            <description>Maps the text column from data table for each list item.</description>
            </item>
            <item>
            <term>Value</term>
            <description>Maps the value column from data table for each list item.</description>
            </item>
            <item>
            <term>IconCss</term>
            <description>Maps the icon class column from data table for each list item.</description>
            </item>
            <item>
            <term>GroupBy</term>
            <description>Group the list items with it's related items by mapping groupBy field.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.EnablePersistence">
            <summary>
            <para>Enable or disable persisting component's state between page reloads.</para>
            <para>If enabled,  the `Value` state will be persisted.</para>
            <list type="bullet">
            <item>
            <term>Value</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ItemTemplate">
            <summary>
            Accepts the template design and assigns it to each list item present in the popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.GroupTemplate">
            <summary>
            Accepts the template design and assigns it to the group headers present in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.NoRecordsTemplate">
            <summary>
            Accepts the template design and assigns it to popup list of component, when no data is available on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ActionFailureTemplate">
            <summary>
            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.SortOrder">
            <summary>
            <para>Specifies the `SortOrder` to sort the data source.</para>
            <para>The available type of sort orders are.</para>
            <list type="bullet">
            <item>
            <term>None</term>
            <description>The data source is not sorting.</description>
            </item>
            <item>
            <term>Ascending</term>
            <description>The data source is sorting with ascending order.</description>
            </item>
            <item>
            <term>Descending</term>
            <description>The data source is sorting with descending order.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the component allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.DataSource">
            <summary>
            <para>Accepts the list items either through local or remote service and binds it to the component.</para>
            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.Query">
            <summary>
            Accepts the external `Query` that execute along with data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.FilterType">
            <summary>
            Determines on which filter type, the component needs to be considered on search action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.IgnoreCase">
            <summary>
            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>
            <para>By default, consider the casing.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.IgnoreAccent">
            <summary>
            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ZIndex">
            <summary>
            specifies the z-index value of the component popup element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.DropDownsEditContext">
            <summary>
            Specifies the edit context of dropdown base.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ListData">
            <summary>
            Specifies the list data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.MainData">
            <summary>
            Specifies the main data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ListDataSource">
            <summary>
            Specifies the list data source.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ItemData">
            <summary>
            Specifies the item data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.MatchItems">
            <summary>
            Specifies the match items.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.IsActionFaiure">
            <summary>
            Specifies whether the action get failed or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.TotalCount">
            <summary>
            Specifies the total count.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ComponentName">
            <summary>
            Specifies the list data.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.Render(System.Collections.Generic.IEnumerable{`0},Syncfusion.Blazor.DropDowns.FieldSettingsModel,Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which render the component with provided datasource , fields and query.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="fields">Specifies the fields.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exlude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.SetListData(System.Collections.Generic.IEnumerable{`0},Syncfusion.Blazor.DropDowns.FieldSettingsModel,Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which sets the list data.
            </summary>
            <param name="dataSource">Specifies the datasource.</param>
            <param name="fields">Specifies the fields.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ActionBegin(System.Collections.Generic.IEnumerable{`0},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task specifies the action begin.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ActionComplete(System.Collections.Generic.IEnumerable{`0},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which specifies the action complete.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ActionFailure(System.Object)">
            <summary>
            Task which specifies the action failure.
            </summary>
            <param name="args">Specifies the object arguments.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.GetQuery(Syncfusion.Blazor.Data.Query)">
            <summary>
            Methods which gets the query.
            </summary>
            <param name="query">Specifies the query.</param>
            <returns>query.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.SetFields">
            <summary>
            Method which sets the fields.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.SimpleDataExecute(System.Collections.Generic.IEnumerable{`0},Syncfusion.Blazor.Data.Query)">
            <summary>
            Specifies the data execute.
            </summary>
            <param name="data">Specifies the data.</param>
            <param name="query">Specifies the query.</param>
            <returns>Simple data.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.CloneQuery(Syncfusion.Blazor.Data.Query)">
            <summary>
            Method which clones the query.
            </summary>
            <param name="query">Specifies the query.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.GetDataByText(System.String,System.String)">
            <summary>
            Method which gets data by text.
            </summary>
            <param name="ddlText">Specifies the text value.</param>
            <param name="field">Specifies the field.</param>
            <returns>Type.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.IncrementalSearch(System.String,System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Method which specifies the incremental search.
            </summary>
            <param name="queryString">Specifies the query string.</param>
            <param name="items">Specifies the items.</param>
            <param name="selectedIndex">Specifies the selectes index.</param>
            <param name="ignoreCase">Specifies the ignore case.</param>
            <returns>Type.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.Search(System.String,System.Collections.Generic.IEnumerable{`0},System.String,System.Boolean)">
            <summary>
            Method which specifies the search action.
            </summary>
            <param name="inputValue">Specifies the input element value.</param>
            <param name="items">Specifies the items.</param>
            <param name="searchType">Specifies the search type.</param>
            <param name="ignoreCase">Specifies whether the case can be ignored or not. </param>
            <returns>Type.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.SetItemValue(System.String,System.Type)">
            <summary>
            Method which set item value.
            </summary>
            <param name="itemValue">Specifies the item value.</param>
            <param name="valueType"></param>
            <returns>Type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.IsSimpleDataType">
            <summary>
            Method speciifes whether the data is simple data type.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.AddItems(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            Add new items to the popup list. By default, new items append to the list as the last item, but you can insert based on the index parameter.
            </summary>
            <param name="items">Specifies the items append to the list based on index.</param>
            <param name="itemIndex">Specifies the index to place the newly added item in the popup list.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.AddItemsAsync(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            Add new items to the popup list. By default, new items append to the list as the last item, but you can insert based on the index parameter.
            </summary>
            <param name="items">Specifies the items append to the list based on index.</param>
            <param name="itemIndex">Specifies the index to place the newly added item in the popup list.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.InsertItem(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Method which inserts the item.
            </summary>
            <param name="items">Specifies the items.</param>
            <param name="itemIndex">Specifies the item index.</param>
            <param name="preventInit">Specifies whether it  preventInit or not.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.IsFilter">
            <summary>
            Method specifies whether  filter mode or not.
            </summary>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.RenderItems">
            <summary>
            Task which render the component with provided datasource.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.HighlightSearch(System.String,System.String,System.Boolean,Syncfusion.Blazor.DropDowns.FilterType)">
            <summary>
            Method specifies the higlight search action.
            </summary>
            <param name="liConent">Specifies the list content.</param>
            <param name="searchText">Specifies the search text.</param>
            <param name="ignoreCase">Specifies whether cases can be ignored or not.</param>
            <param name="highlightType">Specifies the highlight type.</param>
            <returns>string.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownBase`1.ListItemCreated(Syncfusion.Blazor.DropDowns.ListOptions{`0})">
            <summary>
            Triggers while the list item get created.
            </summary>
            <param name="listItem">Specifies the list item.</param>
            <returns>ListOptions.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ListOptions`1">
            <summary>
            Specifies the list options.
            </summary>
            <typeparam name="T">Specifies the type of ListOptions.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.Text">
            <summary>
            Specifies the Text property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.Value">
            <summary>
            Specifies the Value property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.GroupBy">
            <summary>
            Specifies the GroupBy  property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.IsHeader">
            <summary>
            Specifies the IsHeader  property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.ShowIcon">
            <summary>
            Specifies the ShowIcon  property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.Items">
            <summary>
            Specifies the Items  property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.CurItemData">
            <summary>
            Specifies the  CurItemData property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.ListClass">
            <summary>
            Specifies the ListClass  property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.IconCss">
            <summary>
            Specifies the IconCss  property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.GroupItems">
            <summary>
            Specifies the GroupItems property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListOptions`1.ListAttribute">
            <summary>
            Specifies the ListAttribute property.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.KeyActions">
            <summary>
            Specifies the key action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.KeyActions.Action">
            <summary>
            Specifies the  action property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.KeyActions.Key">
            <summary>
            Specifies the key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.KeyActions.Events">
            <summary>
            Specifies the events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.KeyActions.Type">
            <summary>
            Specifies the type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DataItems`1">
            <summary>
            Specifies the data items.
            </summary>
            <typeparam name="TVal">Specifies the type of DataItems.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DataItems`1.Text">
            <summary>
            Specifies the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DataItems`1.Value">
            <summary>
            Specifies the value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ComposedItemModel`1">
            <summary>
            common class model for grouped list.
            </summary>
            <typeparam name="T">Specifies the type of ComposedItemModel.</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComposedItemModel`1.IsGroupItem">
            <summary>
            Specifies whether it is a group item or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComposedItemModel`1.Data">
            <summary>
            Returns the grouped data items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComposedItemModel`1.Key">
            <summary>
            Returns the grouped key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComposedItemModel`1.IsHeader">
            <summary>
            Returns the list item is group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComposedItemModel`1.Id">
            <summary>
            Returns the id of the group list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComposedItemModel`1.Text">
            <summary>
            Returns the text of the grouping field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComposedItemModel`1.Items">
            <summary>
            Returns the grouped items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.EnableRtl">
            <summary>
            Specifies whether the component is in rtl mode or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.ZIndex">
            <summary>
            Specifies the z-index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.PopupWidth">
            <summary>
            Specifies the popup width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.PopupHeight">
            <summary>
            Specifies the popup height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.Width">
            <summary>
            Specifies the width of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.AllowFiltering">
            <summary>
            Specifies whether filtering is allowed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.ModuleName">
            <summary>
            Specifies the module name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.EnableVirtualization">
            <summary>
            Specifies whether the virtualization is enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.DelimiterChar">
            <summary>
            Specifies the delimeter character.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.OverFlowContent">
            <summary>
            Specifies the over flow content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.TotalCountContent">
            <summary>
            Specifies the total count of the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.DelimValue">
            <summary>
            Specifies the delimeter value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownClientProperties.Mode">
            <summary>
            Specifies the mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SelectedData`1">
            <summary>
            Specifies the selected data.
            </summary>
            <typeparam name="TItem">Specifies the type of SelectedData.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectedData`1.Text">
            <summary>
            Specifies the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectedData`1.Value">
            <summary>
            Specifies the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectedData`1.ItemData">
            <summary>
            Specifies the item data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectedData`1.ChipClass">
            <summary>
            Specifies the chip class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2">
            <summary>
            Specifies the DropDownList Events of the component.
            </summary>
            <typeparam name="TValue">Specifies the value type.</typeparam>
            <typeparam name="TItem">Specifies the type of ComboBoxEvents.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.OnActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.OnActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.OnActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.OnOpen">
            <summary>
            Triggers when the popup before opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.Blur">
            <summary>
            Triggers when focus moves out from the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.ValueChange">
            <summary>
            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>
            <para>Use Change event to configure the cascading DropDownList.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.OnClose">
            <summary>
            Triggers before the popup is closed. If you cancel this event, the popup remains opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.CustomValueSpecifier">
            <summary>
            Triggers on set a custom value to this component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.Filtering">
            <summary>
            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.Focus">
            <summary>
            Triggers when the component is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.Opened">
            <summary>
            Triggers when the popup opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.Closed">
            <summary>
            Triggers after the popup has been closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.OnValueSelect">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings">
            <summary>
            The Fields property maps the columns of the data table and binds the data to the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings.GroupBy">
            <summary>
            Group the list items with it's related items by mapping groupBy field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the list element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings.IconCss">
            <summary>
            Maps the icon class column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings.Text">
            <summary>
            Maps the text column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings.Value">
            <summary>
            Maps the value column from data table for each list item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ComboBoxTemplates`1">
            <summary>
            The ComboBox has been provided with several options to customize each list item, group title, header, and footer elements.
            </summary>
            <typeparam name="TItem">Specifies the type of ComboBoxTemplates.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SfComboBox`2">
            <summary>
            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.
            </summary>
            <summary>
            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.
            </summary>
            <typeparam name="TValue">Specifies the value type.</typeparam>
            <typeparam name="TItem">Specifies the type of SfComboBox.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfComboBox`2.AllowCustom">
            <summary>
            Specifies whether the component allows user defined value which does not exist in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfComboBox`2.Autofill">
            <summary>
            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfComboBox`2.ShowClearButton">
            <summary>
            <para>Specifies whether to show or hide the clear button.</para>
            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfComboBox`2.ValidateOnInput">
            <summary>
            Specifies a boolean value that indicates whether the component validates the input or not.
            </summary>
            <value>
            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.
            </value>
            <remarks>
            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfComboBox`2.ComboBoxParent">
            <summary>
            Parent component of ComboBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfComboBox`2.ROOT">
            <summary>
            Specifies the root class of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfComboBox`2.ComponentName">
            <summary>
            Specifies the component name.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.IsFilter">
            <summary>
            Task which specifies whether filter action is allowed or not.
            </summary>
            <returns>bool.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.UpdateMainData">
            <summary>
            Method which updates main data.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.InvokeBeforeOpen">
            <summary>
            Triggers before popup get opened.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.InvokeAfterClosed">
            <summary>
            Triggers after the popup get closed.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.UpdateAriaAttributes">
            <summary>
            Method which update the aria attributes.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.FocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Triggers when the component get focused in.
            </summary>
            <param name="args">Specifies the FocusEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.InvokeBlur">
            <summary>
            Triggers when component get focused out.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Triggers when value get changed.
            </summary>
            <param name="args">Specifies ChangeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.FocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Triggers when the component get focused out.
            </summary>
            <param name="args">Specifies the FocusEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.FilterInputHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Triggers when any value provided to filter input.
            </summary>
            <param name="args">Specifies the ChangeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.InvokePopupEvents(System.Boolean)">
            <summary>
            Invokes the popup event.
            </summary>
            <param name="isOpen">True if the popup is in open state otherwise false.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.InvokeSelectEvent(`1,System.EventArgs)">
            <summary>
            Triggers when item get selected.
            </summary>
            <param name="item">Specifies the item.</param>
            <param name="args">Specifies the EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.InvokeChangeEvent(System.EventArgs)">
            <summary>
            Triggers when value get changed.
            </summary>
            <param name="args">Specifies EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.UpdateValue">
            <summary>
            Task which updates the value.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.SetOldValue(System.Object,System.Boolean)">
            <summary>
            Task which sets the old value.
            </summary>
            <param name="ddlValue">Specifies the DropDownList value.</param>
            <param name="isValueChanged"></param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.UpdateAutoFillOnDown(`1)">
            <summary>
            Task which update auto fill on down action.
            </summary>
            <param name="curItem">Specifies the current item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.SearchList(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Task which specifies the search list.
            </summary>
            <param name="args">Specifies the KeyboardEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.IncrementSearch">
            <summary>
            Task which incrment the search.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.InlineSearch">
            <summary>
            Task which performs the in line search.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.InvokeCustomValueEvent">
            <summary>
            Task which specifies the custom value event.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.CustomValue(System.Boolean)">
            <summary>
            Task which specifies the custom value.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.ActionBegin(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which pecifies the action begin event.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.ActionFailure(System.Object)">
            <summary>
            Task which specifies the action failure event.
            </summary>
            <param name="args">Specifies the object arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.ActionComplete(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which specifies the action complete event.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfComboBox`2.UpdateChildProperties(System.Object)">
            <summary>
            Update the combobox fileds.
            </summary>
            <param name="fieldValue">Specifies the field value.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2">
            <summary>
            Specifies the DropDownList Events of the component.
            </summary>
            <typeparam name="TValue">Specifies the value type.</typeparam>
            <typeparam name="TItem">Specifies the type of SfDropDownList.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.BaseParent">
            <summary>
            Specifies the base parent of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.OnActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.OnActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.OnActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.OnOpen">
            <summary>
            Triggers when the popup before opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Blur">
            <summary>
            Triggers when focus moves out from the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.ValueChange">
            <summary>
            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>
            <para>Use Change event to configure the cascading DropDownList.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.OnClose">
            <summary>
            Triggers before the popup is closed. If you cancel this event, the popup remains opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering">
            <summary>
            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Focus">
            <summary>
            Triggers when the component is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Opened">
            <summary>
            Triggers when the popup opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Closed">
            <summary>
            Triggers after the popup has been closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.OnValueSelect">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings">
            <summary>
            The Fields property maps the columns of the data table and binds the data to the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings.GroupBy">
            <summary>
            Group the list items with it's related items by mapping groupBy field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the list element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings.IconCss">
            <summary>
            Maps the icon class column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings.Text">
            <summary>
            Maps the text column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings.Value">
            <summary>
            Maps the value column from data table for each list item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.DropDownListFieldSettings.PropertyParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DropDownListTemplates`1">
            <summary>
            The DropDownList has been provided with several options to customize each list item, group title, selected value, header, and footer elements.
            </summary>
            <typeparam name="TItem">Specifies the type of DropDownListTemplates.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListTemplates`1.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.DropDownListTemplates`1.OnInitialized">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SfDropDownList`2">
            <summary>
            The DropDownList component contains a list of predefined values from which a single value can be chosen.
            </summary>
            <summary>
            The DropDownList component contains a list of predefined values from which a single value can be chosen.
            </summary>
            <summary>
            The DropDownList component contains a list of predefined values from which a single value can be chosen.
            </summary>
            <typeparam name="TValue">Specifies the value type.</typeparam>
            <typeparam name="TItem">Specifies the type of SfDropDownList.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ID">
            <summary>
            Specifies the id of the DropDownList component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering">
            <summary>
            <para>When AllowFiltering is set to true, show the filter bar (search box) of the component.</para>
            <para>The filter action retrieves matched items through the `Filtering` event based on the characters typed in the search TextBox.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the DropDownList. One or more custom CSS classes can be added to a DropDownList.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterBarPlaceholder">
            <summary>
            Accepts the value to be displayed as a watermark text on the filter bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the DropDownList that the placeholder text floats above the DropDownList based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the DropDownList when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the DropDownList.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the DropDownList after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FooterTemplate">
            <summary>
            Accepts the template design and assigns it to the footer container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.HeaderTemplate">
            <summary>
            Accepts the template design and assigns it to the header container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index">
            <summary>
            Gets or sets the index of the selected item in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IndexChanged">
            <summary>
            Specifies the callback to trigger when the index changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DropDownList. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PopupHeight">
            <summary>
            Specifies the height of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PopupWidth">
            <summary>
            Specifies the width of the popup list. By default, the popup width sets based on the width of
            the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Readonly">
            <summary>
            Specifies the boolean value whether the DropDownList allows the user to change the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ShowClearButton">
            <summary>
            <para>Specifies whether to show or hide the clear button.</para>
            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization">
            <summary>
            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.
            To achieve this scenario with DropDowns, set the EnableVirtualization to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ItemsCount">
            <summary>
            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value">
            <summary>
            Gets or sets the value of the selected item in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Width">
            <summary>
            <para>Specifies the width of the component. By default, the component width sets based on the width of
            its parent container.</para>
            <para>You can also set the width in pixel values.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.TabIndex">
            <summary>
            Specifies the tab order of the DropDownList component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnBlur">
            <summary>
            Triggers when the input loses the focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.DropDownListParent">
            <summary>
            Parent component of DropDownList.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Clear">
            <summary>
            Allows you to clear the selected values from the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ClearAsync">
            <summary>
            Allows you to clear the selected values from the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FocusIn">
            <summary>
            Sets the focus to the DropDownList component for interaction.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FocusAsync">
            <summary>
            Sets the focus to the DropDownList component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FocusOut">
            <summary>
            Remove the focus from the DropDownList component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FocusOutAsync">
            <summary>
            Remove the focus from the DropDownList component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.GetDataByValue(`0)">
            <summary>
            Gets the data Object that matches the given value.
            </summary>
            <param name="ddlValue">Specifies the DropDownList value.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.GetItemsAsync">
            <summary>
            Gets all the list items bound on this component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.GetItems">
            <summary>
            Gets all the list items bound on this component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.HideSpinnerAsync">
            <summary>
            Hides the spinner loader.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.HideSpinner">
            <summary>
            Hides the spinner loader.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ShowSpinnerAsync">
            <summary>
            Shows the spinner loader.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ShowSpinner">
            <summary>
            Shows the spinner loader.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Hide">
            <summary>
            Hides the DropDownList popup.
            </summary>
            <exclude/>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.HidePopupAsync">
            <summary>
            Hides the DropDownList popup.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ShowPopupAsync">
            <summary>
            Opens the popup that displays the list of items.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ClosePopup">
            <summary>
            Invoke the before the popup close.
            </summary>
            <exclude/>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.KeyActionHandler(Syncfusion.Blazor.DropDowns.KeyActions)">
            <summary>
            Invoke the key action handler.
            </summary>
            <param name="args">Specifies KeyActions arguments.</param>
            <exclude/>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.VirtualScrollHandler">
            <summary>
            Invoke the scroll handler.
            </summary>
            <exclude/>
            <returns>Task.</returns>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FALSE">
            <summary>
            Specifies the string false.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.TRUE">
            <summary>
            Specifies the string true.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.NO_DATA">
            <summary>
            Specifies the root class of base component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.POPUP_CONTENT">
            <summary>
            specifies the popup content.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.GROUP_BY">
            <summary>
            specifies the group by class.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.DROP_DOWN_ICON">
            <summary>
            specifies the dropdown icon class.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.DDL_HEADER">
            <summary>
            specifies the dropdown header.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.DDL_FOOTER">
            <summary>
            specifies the dropdown footer.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ARIA_LIVE">
            <summary>
            specifies the aria-live class.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ASSERTIVE">
            <summary>
            specifies the assertive string.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ARIA_HAS_POPUP">
            <summary>
            specifies the aria-has-popup class.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ARIA_ACTIVE_DESCENDANT">
            <summary>
            specifies the aria-activedescendant class.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.NULL_VALUE">
            <summary>
            specifies the null text.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ARIA_OWN">
            <summary>
            specifies the aria-own class.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OPTIONS">
            <summary>
            specifies the options text.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ROLE">
            <summary>
            specifies the name of role attribute.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.LIST_BOX">
            <summary>
            specifies the listbox text.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AUTO_CORRECT">
            <summary>
            specifies the name of autocorrect attribute.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OFF">
            <summary>
            specifies the off text.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.SPELL_CHECK">
            <summary>
            specifies the spellcheck attribute.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AUTO_COMPLETE">
            <summary>
            specifies the name of autocomplete attribute.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AUTO_CAPITAL">
            <summary>
            specifies the name of autocapitalize attribute.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ARIA_EXPANDED">
            <summary>
            specifies the name of aria-expanded attribute.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.SELECTED">
            <summary>
            specifies the selected class.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ITEM_FOCUS">
            <summary>
            specifies the item focus class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.InputBaseObj">
            <summary>
            Specifies the SfInputBase component object.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterinputObj">
            <summary>
            Specifies the SfInputBase component object as filter input.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.RootClass">
            <summary>
            Specifies the root class of the component .
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ContainerClass">
            <summary>
            Specifies the container class of the component .
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.BackIcon">
            <summary>
            Specifies the back icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.DropdownValue">
            <summary>
            Specifies the dropdown value.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ClearBtnStopPropagation">
            <summary>
            Specifies the clear button stop propogation.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterClearBtnStopPropagation">
            <summary>
            Specifies the filter clear button stop propogation.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PreventContainer">
            <summary>
            Specifies whether it is a prevent container or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsDevice">
            <summary>
            Specifies whether it is a device or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ShowPopupList">
            <summary>
            Specifies whether to show popup list or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PopupElement">
            <summary>
            Specifies the popup element reference.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PopupHolderEle">
            <summary>
            Specifies the popup holder element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PopupContainer">
            <summary>
            Specifies the popup container.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsListRender">
            <summary>
            Specifies whether list is going to render or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsListRendered">
            <summary>
            Specifies whether list is rendered or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsDropDownClick">
            <summary>
            Specifies whether dropdown is clicked or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsValidKey">
            <summary>
            Specifies whether it is valid key or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsTyped">
            <summary>
            Specifies whether a key is typed or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsFilterClearClicked">
            <summary>
            Specifies whether the filter input clear icon is clicked or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsCustomFilter">
            <summary>
            Specifies whether it is custom filtering or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ActiveIndex">
            <summary>
            Specifies the active index of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsInternalFocus">
            <summary>
            Specifies whether it is a internal focus or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ContainerAttr">
            <summary>
            Specifies the container attribute.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PreviousValue">
            <summary>
            Specifies the previous value of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PreviousItemData">
            <summary>
            Specifies the previous item data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.TypedString">
            <summary>
            Specifies the typed string.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.BeforePopupOpen">
            <summary>
            True before the popup get openend , otherwise  false.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PreventAutoFill">
            <summary>
            Specifies whether to prevent autofill or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FocusedData">
            <summary>
            Specifies the focused data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.VirtualSpinnerObj">
            <summary>
            Specifies the virtual spinner object.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ComponentName">
            <summary>
            Specifies the component name.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PreventIconHandler">
            <summary>
            Specifies whether it is prevent icon handler.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PopupContent">
            <summary>
            Specifies the popup content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.NoDataContent">
            <summary>
            Specifies the NoDataContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.DropdownIcon">
            <summary>
            Specifies the dropdown icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ROOT">
            <summary>
            Specifies the root class of the component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.CallStateHasChangedAsync">
            <summary>
            Invoke state change of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PreRender">
            <summary>
            Triggers before the component get rendered.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.SetOldValue(System.Object,System.Boolean)">
            <summary>
            Task which sets the old value.
            </summary>
            <param name="ddlValue">Specifies the DropDownList value.</param>
            <param name="isValueChanged"></param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateMainData">
            <summary>
            Task which update main data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.GetScrollValue">
            <summary>
            Task which gets the scroll value.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateValue">
            <summary>
            Task which updates the value.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateValueSelection(`1,System.Boolean,System.Boolean)">
            <summary>
            Task which updates the value selection.
            </summary>
            <param name="item">Specifies the item.</param>
            <param name="isMutable">Specifies whether it is mutable or not.</param>
            <param name="isValidateInput">Specifies whether it is validate on input event.</param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.SetRTL">
            <summary>
            Method which set RTL to the component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.SetReadOnly">
            <summary>
            Add the readonly class to the container element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.SetCssClass">
            <summary>
            Method which set css class to the component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateAriaAttributes">
            <summary>
            Method which update the aria attributes.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.DependencyScripts">
            <summary>
            Method which updates the dependency scripts.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs,System.Boolean)">
            <summary>
            Triggers when the component get focused out.
            </summary>
            <param name="args">Specifies the FocusEventArgs arguments.</param>
            <param name="isFilterinput">Specifies whether it is a filter input or not.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.DropDownClick">
            <summary>
            Triggers while clicking the dropdown icon.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.HidePopup">
            <summary>
            Task which used to hide popup.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OpenEventArgs">
            <summary>
            Specifies the open event.
            </summary>
            <returns>PopupEventArgs arguments.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.InvokePopupEvents(System.Boolean)">
            <summary>
            Invokes the popup event.
            </summary>
            <param name="isOpen">True if the popup is in open state otherwise false.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.InvokeClearBtnEvent(System.EventArgs,System.Boolean)">
            <summary>
            Triggered when clear button is clicked.
            </summary>
            <param name="args">Specifies the EventArgs arguments.</param>
            <param name="isFilterClear">Specifies whether it is filterinput clear icon or not.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterClear">
            <summary>
            Triggers when filter clear icon is clicked.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ClearAll(System.EventArgs)">
            <summary>
            Task which used to clear all the items.
            </summary>
            <param name="args">Specifies the EventArgs arguments.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterInputHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Triggers when any value provided to filter input.
            </summary>
            <param name="args">Specifies the ChangeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.PasteHandler">
            <summary>
            Triggers when paste action is performes.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnFilterUp(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Specifies the keyup event of filter event.
            </summary>
            <param name="args">Specifies the KeyboardEventArgs arguments.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.SearchList(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Task which specifies the search list.
            </summary>
            <param name="args">Specifies the KeyboardEventArgs arguments.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilteringAction(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)">
            <summary>
            Task which specifies the filtering action.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <param name="fields">Specifies the fields.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)">
            <summary>
            To filter the data from given data source by using query.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <param name="fields">Specifies the fields.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Filter(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)">
            <summary>
            To filter the data from given data source by using query.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <param name="fields">Specifies the fields.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.RefreshPopup">
            <summary>
            Task used to refresh the popup list items.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.GetQuery(Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which gets the query.
            </summary>
            <param name="query">Specifies the query.</param>
            <returns>Query.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsFilter">
            <summary>
            Task which specifies whether filter action is allowed or not.
            </summary>
            <returns>bool.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.InvokeBeforeOpen">
            <summary>
            Triggers before popup get opened.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.InvokeAfterClosed">
            <summary>
            Triggers after the popup get closed.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.CreatePopup">
            <summary>
            Opens the popup that displays the list of items.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ShowPopup">
            <summary>
            Opens the popup that displays the list of items.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdatePopupState">
            <summary>
            Method which updates the popup state.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">Update the class to input element.</param>
            <param name="containerClass">Update the class to container element.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateChildProperties(System.Object)">
            <summary>
            Update the dropdownlist fileds.
            </summary>
            <param name="fieldValue">Specifies the field value.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateInputValue(System.String)">
            <summary>
            Task updates the input value.
            </summary>
            <param name="inputValue">Specifies the input value.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnMouseClick(Syncfusion.Blazor.DropDowns.ListOptions{`1},Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Triggers when mouse click is performed.
            </summary>
            <param name="args">Specifies the ListOptions arguments.</param>
            <param name="eventArgs">Specifies the MouseEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.InvokeSelectEvent(`1,System.EventArgs)">
            <summary>
            Triggers when item get selected.
            </summary>
            <param name="item">Specifies the item.</param>
            <param name="args">Specifies the EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateSelectedItem(`1,System.EventArgs,Syncfusion.Blazor.DropDowns.KeyActions)">
            <summary>
            Task which updates the selected item.
            </summary>
            <param name="item">Specifies the item.</param>
            <param name="args">Specifies the EventArgs arguments.</param>
            <param name="keyArgs">Specifies the KeyActions arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateSelectItem(`1,System.EventArgs,Syncfusion.Blazor.DropDowns.KeyActions)">
            <summary>
            Task which updates the selected item.
            </summary>
            <param name="item">Specifies the item.</param>
            <param name="args">Specifies the EventArgs arguments.</param>
            <param name="keyArgs">Specifies the KeyActions arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateListSelection(`1,System.String)">
            <summary>
            Task which update list selection.
            </summary>
            <param name="item">Specifies the item.</param>
            <param name="className">Specifies the class name.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.SetValue(Syncfusion.Blazor.DropDowns.DataItems{`0})">
            <summary>
            Task which sets the value.
            </summary>
            <param name="items">Specifies the data item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.InvokeChangeEvent(System.EventArgs)">
            <summary>
            Triggers when value get changed.
            </summary>
            <param name="args">Specifies EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnChangeEvent(System.EventArgs)">
            <summary>
            Triggers when value get changed.
            </summary>
            <param name="args">Specifies EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.GetItemData(`1)">
            <summary>
            Method which gets item data.
            </summary>
            <param name="item">Specifies the item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ActionBegin(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which performs the action begin event.
            </summary>
            <param name="dataSource">Specifies the datasource.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ActionComplete(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which performs the action complete event.
            </summary>
            <param name="dataSource">Specifies the datasource.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.RenderEqualItems">
            <summary>
            Update the custom value to the list
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.ActionFailure(System.Object)">
            <summary>
            Task which performs the action failure event.
            </summary>
            <param name="args">Specifies the object arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.IsEditTextBox">
            <summary>
            Specifies whether it is edit textbox.
            </summary>
            <returns>bool.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.CustomValue(System.Boolean)">
            <summary>
            Task which specifies the custom value.
            </summary>
            <param name="isValidateInput">Specifies whether it is validate on input event.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateAutoFillOnDown(`1)">
            <summary>
            Task which update auto fill on down action.
            </summary>
            <param name="curItem">Specifies the current item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateFocusItem(`1)">
            <summary>
            Task which update the focus item.
            </summary>
            <param name="focusItem">Specifies the focus item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.UpdateValidateClass">
            <summary>
            Update the validation class to the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.OnSearch(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Triggers when search keypress event is performed.
            </summary>
            <param name="args">Specifies the KeyboardEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.FilterType">
            <summary>
            Determines on which filter type, the component needs to be considered on search action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.FilterType.StartsWith">
            <summary>
            Defines the StartsWith filter type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.FilterType.EndsWith">
            <summary>
            Defines the EndsWith filter type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.FilterType.Contains">
            <summary>
            Defines the Contains filter type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.VisualMode">
            <summary>
            Configures visibility mode for component interaction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.VisualMode.Default">
            <summary>
            Defines the Default visual mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.VisualMode.Delimiter">
            <summary>
            Defines the Delimiter visual mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.VisualMode.Box">
            <summary>
            Defines the Box visual mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.VisualMode.CheckBox">
            <summary>
            Defines the CheckBox visual mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SortOrder">
            <summary>
            Specifies the SortOrder to sort the data source.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SortOrder.None">
            <summary>
            Defines the None sort order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SortOrder.Ascending">
            <summary>
            Defines the Ascending sort order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SortOrder.Descending">
            <summary>
            Defines the Descending sort order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.HightLightType">
            <summary>
             Highlight the searched characters on suggested list items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.HightLightType.Contains">
            <summary>
            Defines the Contains highlight type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.HightLightType.StartsWith">
            <summary>
            Defines the StartsWith highlight type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.HightLightType.EndsWith">
            <summary>
            Defines the EndsWith highlight type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SearchType">
            <summary>
            Defines the SearchType.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SearchType.StartsWith">
            <summary>
            Defines the StartsWith search type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SearchType.Equal">
            <summary>
            Defines the Equal search type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.CheckBoxPosition">
            <summary>
            Defines the checkbox position of List Box.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.CheckBoxPosition.Left">
            <summary>
            Defines the Left check box position.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.CheckBoxPosition.Right">
            <summary>
            Defines the Right check box position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SelectionMode">
            <summary>
            Defines the selection mode of List Box.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SelectionMode.Multiple">
            <summary>
            Defines the Multiple selection mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.SelectionMode.Single">
            <summary>
            Defines the Single selection mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ToolBarPosition">
            <summary>
            Defines the toolbar position of List Box.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.ToolBarPosition.Left">
            <summary>
            Defines the Left tool bar position.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.DropDowns.ToolBarPosition.Right">
            <summary>
            Defines the Right tool bar position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.AutoCompleteModel">
            <summary>
            Interface for a class AutoComplete.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.ActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.ActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.ActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.BeforeOpen">
            <summary>
            Triggers when the popup before opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Blur">
            <summary>
            Triggers when focus moves out from the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Change">
            <summary>
            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>
            <para>Use Change event to configure the cascading AutoComplete.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Close">
            <summary>
            Triggers when the popup is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.CustomValueSpecifier">
            <summary>
            Triggers on set a custom value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Filtering">
            <summary>
            Triggers on typing a character in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Focus">
            <summary>
            Triggers when the component is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Open">
            <summary>
            Triggers when the popup opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Select">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.AllowCustom">
            <summary>
            Specifies whether the component allows user defined value which does not exist in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Autofill">
            <summary>
            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.FilterType">
            <summary>
            Determines on which filter type, the component needs to be considered on search action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.Highlight">
            <summary>
            When set to ‘true’, highlight the searched characters on suggested list items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.MinLength">
            <summary>
            Allows you to set the minimum search character length,
            the search action will perform after typed minimum characters.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.ShowClearButton">
            <summary>
            <para>Specifies whether to show or hide the clear button.</para>
            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.ShowPopupButton">
            <summary>
            Allows you to either show or hide the popup button on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.AutoCompleteModel.SuggestionCount">
            <summary>
            Supports the specified number of list items on the suggestion popup.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs`1">
            <summary>
            Defines the custom value specifier event.
            </summary>
            <typeparam name="T">Specifies the type of CustomValueSpecifierEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs`1.Item">
            <summary>
            Sets the text custom format data for set a `Value` and `Text`.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs`1.Text">
            <summary>
            Gets the typed custom text to make a own text format and assign it to `item` argument.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ComboBoxModel">
            <summary>
            Interface for a class ComboBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.ActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.ActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.ActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.BeforeOpen">
            <summary>
            Triggers when the popup before opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Blur">
            <summary>
            Triggers when focus moves out from the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Change">
            <summary>
            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>
            <para>Use Change event to configure the cascading ComboBox.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Close">
            <summary>
            Triggers when the popup is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.CustomValueSpecifier">
            <summary>
            Triggers on set a custom value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Filtering">
            <summary>
            Triggers on typing a character in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Focus">
            <summary>
            Triggers when the component is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Open">
            <summary>
            Triggers when the popup opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Select">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.AllowCustom">
            <summary>
            Specifies whether the component allows user defined value which does not exist in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.Autofill">
            <summary>
            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ComboBoxModel.ShowClearButton">
            <summary>
            <para>Specifies whether to show or hide the clear button.</para>
            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ActionBeginEventArgs">
            <summary>
            Defines the action begin event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionBeginEventArgs.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionBeginEventArgs.EventName">
            <summary>
             Specify the Event Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionBeginEventArgs.Query">
            <summary>
            Specify the query to begin the data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs`1">
            <summary>
            Defines the action complete event.
            </summary>
            <typeparam name="TItem">Specifies the ActionCompleteEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs`1.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs`1.Count">
            <summary>
            Return the total number for records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs`1.EventName">
            <summary>
            Specify the Event Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs`1.Query">
            <summary>
            Specify the query to complete the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs`1.Result">
            <summary>
            Returns the selected items as JSON Object from the data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs">
            <summary>
            Specifies the action complete event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Actual">
            <summary>
            Return the actual records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Aggregates">
            <summary>
            Return the aggregates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Count">
            <summary>
            Return the total number for records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.EventName">
            <summary>
            Specify the Event Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Items">
            <summary>
            Return Items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Query">
            <summary>
            Specify the query to complete the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Request">
            <summary>
            Return the request type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Result">
            <summary>
            Returns the selected items as JSON Object from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.VirtualSelectRecords">
            <summary>
            Return the virtualSelectRecords.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs.Xhr">
            <summary>
            Return XMLHttpRequest.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs">
            <summary>
            Specifies the before open event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ClosedEventArgs">
            <summary>
            Specifies the closed event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DataBoundEventArgs">
            <summary>
            Specifies the data bound event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DataBoundEventArgs.E">
            <summary>
            Return the bounded objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DataBoundEventArgs.Items">
            <summary>
            Returns the selected items as JSON Object from the data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DropDownBaseClassList">
            <summary>
            Defines the dropdown base class list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Content">
            <summary>
            Specifies the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Disabled">
            <summary>
            Specifies the disabled property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.FixedHead">
            <summary>
            Specifies the fixedHead property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Focus">
            <summary>
            Specifies the focus property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Group">
            <summary>
            Specifies the group property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Grouping">
            <summary>
            Specifies the grouping property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Hover">
            <summary>
            Specifies the hover property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Li">
            <summary>
            Specifies the list property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.NoData">
            <summary>
            Specifies the NoData property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Root">
            <summary>
            Specifies the root property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Rtl">
            <summary>
            Specifies the Rtl property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseClassList.Selected">
            <summary>
            Specifies the selected property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.FilteringEventArgs">
            <summary>
            Specifies the filtering event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.BaseEventArgs">
            <summary>
            Gets the `keyup` event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction">
            <summary>
            To prevent the internal filtering action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.Text">
            <summary>
            Search text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.UpdateData">
            <summary>
            Specifies the UpdateData property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.FocusEventArgs">
            <summary>
            Specifies the focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FocusEventArgs.Event">
            <summary>
            Specifies the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FocusEventArgs.IsInteracted">
            <summary>
            Specifies the focus interacted.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.PopupEventArgs">
            <summary>
            Defines the popup event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Animation">
            <summary>
            Specifies the animation Object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Popup">
            <summary>
            Specifies the popuo Object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ResultData">
            <summary>
            Defines the result data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ResultData.Result">
            <summary>
            To return the JSON result.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SelectEventArgs`1">
            <summary>
            Defines the select event.
            </summary>
            <typeparam name="T">Specifies the type of SelectEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.E">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Item">
            <summary>
            Returns the selected list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.ItemData">
            <summary>
            Returns the selected item as JSON Object from the data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SelectEventArgs">
            <summary>
            Defines the select event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs.E">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs.Item">
            <summary>
            Returns the selected list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectEventArgs.ItemData">
            <summary>
            Returns the selected item as JSON Object from the data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DropDownBaseModel">
            <summary>
            Interface for a class DropDownBase.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseModel.ActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseModel.ActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseModel.ActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseModel.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseModel.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseModel.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseModel.Select">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownBaseModel.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.FieldSettingsModel">
            <summary>
            Interface for a class FieldSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FieldSettingsModel.GroupBy">
            <summary>
            Group the list items with it's related items by mapping GroupBy field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FieldSettingsModel.HtmlAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FieldSettingsModel.IconCss">
            <summary>
            Maps the icon class column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FieldSettingsModel.Text">
            <summary>
            Maps the text column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.FieldSettingsModel.Value">
            <summary>
            Maps the value column from data table for each list item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2">
            <summary>
            Defines the change event.
            </summary>
            <typeparam name="TValue">Specifies the type of ChangeEventArgs.</typeparam>
            <typeparam name="TItem">Specifies the typr of value.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.E">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.Element">
            <summary>
            Returns the root element of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.Item">
            <summary>
            Returns the selected list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.ItemData">
            <summary>
            Returns the selected item as JSON Object from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.PreviousItem">
            <summary>
            Returns the previous selected list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.PreviousItemData">
            <summary>
            Returns the previous selected item as JSON Object from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`2.Value">
            <summary>
            Returns the selected value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1">
            <summary>
            Specifies the change event.
            </summary>
            <typeparam name="T">Specifies the type of ChangeEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.E">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.Element">
            <summary>
            Returns the root element of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.Item">
            <summary>
            Returns the selected list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.ItemData">
            <summary>
            Returns the selected item as JSON Object from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.PreviousItem">
            <summary>
            Returns the previous selected list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.PreviousItemData">
            <summary>
            Returns the previous selected item as JSON Object from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChangeEventArgs`1.Value">
            <summary>
            Returns the selected value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DropDownListClassList">
            <summary>
            Defines the  DropDownList class list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.BackIcon">
            <summary>
            Specifies the back icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Base">
            <summary>
            Specifies the base.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.ClearIcon">
            <summary>
            Specifies the clear icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.ClearIconHide">
            <summary>
            specifies the clear icon hide class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Device">
            <summary>
            Specifies the device.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Disable">
            <summary>
            Specifies the disable property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.DisableIcon">
            <summary>
            Specifies the disable icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.FilterBarClearIcon">
            <summary>
            SPecifies the filter bar clear icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.FilterInput">
            <summary>
            Specfies the filter input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.FilterParent">
            <summary>
            Specifies the filter parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Focus">
            <summary>
            Specifies the focus property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Footer">
            <summary>
            Specifies the footer property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Header">
            <summary>
            Specifies the header property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.HiddenElement">
            <summary>
            Specifies the hidden element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Hover">
            <summary>
            Specifies the hover property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Icon">
            <summary>
            Specifies the icon property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.IconAnimation">
            <summary>
            Specifies the icon animation property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Input">
            <summary>
            Specifies the input property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.InputFocus">
            <summary>
            Specifies the input focus property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Li">
            <summary>
            Specifies the list property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.MobileFilter">
            <summary>
            Specifies the mobile filter property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.PopupFullScreen">
            <summary>
            Specifies the popup full screen property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Root">
            <summary>
            Specifies the root property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Rtl">
            <summary>
            Specifies the RTL property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Selected">
            <summary>
            Specifies the selected property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListClassList.Value">
            <summary>
            Specifies the value property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DropDownListModel`2">
            <summary>
            Interface for a class DropDownList.
            </summary>
            <typeparam name="TValue">Specifies the type of DropDownListModel.</typeparam>
            <typeparam name="TItem">Specifies the typr of value.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.ActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.ActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.ActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.BeforeOpen">
            <summary>
            Triggers when the popup before opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Blur">
            <summary>
            Triggers when focus moves out from the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Change">
            <summary>
            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>
            <para>Use Change event to configure the cascading DropDownList.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Close">
            <summary>
            Triggers when the popup is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Filtering">
            <summary>
            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the DropDownList allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Focus">
            <summary>
            Triggers when the component is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Open">
            <summary>
            Triggers when the popup opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Select">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.AllowFiltering">
            <summary>
            <para>When AllowFiltering is set to true, show the filter bar (search box) of the component.</para>
            <para>The filter action retrieves matched items through the `Filtering` event based on
            the characters typed in the search TextBox.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the DropDownList. One or more custom CSS classes can be added to a DropDownList.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.FilterBarPlaceholder">
            <summary>
            Accepts the value to be displayed as a watermark text on the filter bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the DropDownList that the placeholder text floats above the DropDownList based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the DropDownList when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the DropDownList.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the DropDownList after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.FooterTemplate">
            <summary>
            Accepts the template design and assigns it to the footer container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.HeaderTemplate">
            <summary>
            Accepts the template design and assigns it to the header container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.HtmlAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Index">
            <summary>
            Gets or sets the index of the selected item in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DropDownList. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.PopupHeight">
            <summary>
            Specifies the height of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.PopupWidth">
            <summary>
            Specifies the width of the popup list. By default, the popup width sets based on the width of
            the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Readonly">
            <summary>
            Specifies the boolean value whether the DropDownList allows the user to change the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.DataSource">
            <summary>
            <para>Accepts the list items either through local or remote service and binds it to the component.</para>
            <para>It can be an array of JSON Objects or an instance of
            `DataManager`.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.ActionFailureTemplate">
            <summary>
            Accepts the template and assigns it to the popup list content of the component
            when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.ShowClearButton">
            <summary>
            <para>Specifies whether to show or hide the clear button.</para>
            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Text">
            <summary>
            Gets or sets the display text of the selected item in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Value">
            <summary>
            Gets or sets the value of the selected item in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Width">
            <summary>
            Specifies the width of the component. By default, the component width sets based on the width of
            its parent container.<para> You can also set the width in pixel values.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.FilterType">
            <summary>
            Determines on which filter type, the component needs to be considered on search action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.IgnoreCase">
            <summary>
            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>
            <para>By default, consider the casing.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.IgnoreAccent">
            <summary>
            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.Query">
            <summary>
            Accepts the external `Query` that execute along with data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropDownListModel`2.EnableVirtualization">
            <summary>
            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.
            To achieve this scenario with DropDowns, set the EnableVirtualization to true.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ListBoxModel`1">
            <summary>
            Interface for a class ListBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.ActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.ActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.ActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.BeforeDrop">
            <summary>
            Triggers before dropping the list item on another list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.BeforeItemRender">
            <summary>
            Triggers while rendering each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Change">
            <summary>
            Triggers while select / unselect the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Drag">
            <summary>
            Triggers while dragging the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.DragStart">
            <summary>
            Triggers after dragging the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Drop">
            <summary>
            Triggers before dropping the list item on another list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Filtering">
            <summary>
            Triggers on typing a character in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.AllowDragAndDrop">
            <summary>
            If 'allowDragAndDrop' is set to true, then you can perform drag and drop of the list item.
            ListBox contains same 'scope' property enables drag and drop between multiple ListBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.AllowFiltering">
            <summary>
            To enable the filtering option in this component.
            Filter action performs when type in search box and collect the matched item through `filtering` event.
            If searching character does not match, `noRecordsTemplate` property value will be shown.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.CssClass">
            <summary>
            Sets the CSS classes to root element of this component, which helps to customize the
            complete styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Height">
            <summary>
            Sets the height of the ListBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.MaximumSelectionLength">
            <summary>
            Sets limitation to the value selection.
            Based on the limitation, list selection will be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Scope">
            <summary>
            Defines the scope value to group sets of draggable and droppable ListBox.
            A draggable with the same scope value will be accepted by the droppable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.SelectionSettings">
            <summary>
            Specifies the selection mode and its type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.ToolbarSettings">
            <summary>
            Specifies the toolbar items and its position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxModel`1.Value">
            <summary>
            Sets the specified item to the selected state or gets the selected item in the ListBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SelectionSettingsModel">
            <summary>
            Interface for a class SelectionSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectionSettingsModel.CheckboxPosition">
            <summary>
            Set the position of the checkbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectionSettingsModel.Mode">
            <summary>
            Specifies the selection modes. The possible values are
             `Single`: Allows you to select a single item in the ListBox.
             `Multiple`: Allows you to select more than one item in the ListBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectionSettingsModel.ShowCheckbox">
            <summary>
            If 'showCheckbox' is set to true, then 'checkbox' will be visualized in the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectionSettingsModel.ShowSelectAll">
            <summary>
            Allows you to either show or hide the selectAll option on the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ToolbarSettingsModel">
            <summary>
            Interface for a class ToolbarSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ToolbarSettingsModel.Items">
            <summary>
            Specifies the list of tools for dual ListBox.
            The predefined tools are 'moveUp', 'moveDown', 'moveTo', 'moveFrom', 'moveAllTo', and 'moveAllFrom'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ToolbarSettingsModel.Position">
            <summary>
            Positions the toolbar before/after the ListBox.
            The possible values are:
             Left: The toolbar will be positioned to the left of the ListBox.
             Right: The toolbar will be positioned to the right of the ListBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.IUpdateListArgs">
            <summary>
            Interface for update list arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IUpdateListArgs.E">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IUpdateListArgs.Enable">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IUpdateListArgs.Index">
            <summary>
            Specifies the  property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IUpdateListArgs.Li">
            <summary>
            Specifies the list property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IUpdateListArgs.Module">
            <summary>
            Specifies the module  property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IUpdateListArgs.PopupElement">
            <summary>
            Specifies the popup element  property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IUpdateListArgs.Value">
            <summary>
            Specifies the value property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ItemCreatedArgs">
            <summary>
            Defines the item created event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ItemCreatedArgs.CurData">
            <summary>
            Specifies the current data property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ItemCreatedArgs.Item">
            <summary>
            Specifies the text property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ItemCreatedArgs.Text">
            <summary>
            Specifies the text property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.CustomValueEventArgs`1">
            <summary>
            Defines the custom value event.
            </summary>
            <typeparam name="T">Specifies the type of CustomValueEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.CustomValueEventArgs`1.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.CustomValueEventArgs`1.NewData">
            <summary>
            Gets the newly added data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.CustomValueEventArgs`1.Text">
            <summary>
            Gets the typed custom text to make a own text format and assign it to `item` argument.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SelectAllEventArgs`1">
            <summary>
            Defines the select all event.
            </summary>
            <typeparam name="T">Specifies the type of SelectAllEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectAllEventArgs`1.Event">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectAllEventArgs`1.IsChecked">
            <summary>
            Specifies whether it is selectAll or deSelectAll.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectAllEventArgs`1.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectAllEventArgs`1.ItemData">
            <summary>
            Returns the selected items as JSON Object from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SelectAllEventArgs`1.Items">
            <summary>
            Returns the selected list items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs`1">
            <summary>
            Specifies the chip selected event.
            </summary>
            <typeparam name="T">Specifies the type of ChipSelectedEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs`1.ChipData">
            <summary>
            Returns the selected chip data as list object from the data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs`1">
            <summary>
            Defines the MultiSelect change event.
            </summary>
            <typeparam name="T">Specifies the MultiSelectChangeEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs`1.E">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs`1.Element">
            <summary>
            Returns the root element of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs`1.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs`1.OldValue">
            <summary>
            Returns the component initial Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs`1.Value">
            <summary>
            Returns the updated component Values.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.RemoveEventArgs`1">
            <summary>
             Defines the remove event.
            </summary>
            <typeparam name="T">Specifies the RemoveEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.RemoveEventArgs`1.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.RemoveEventArgs`1.E">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.RemoveEventArgs`1.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.RemoveEventArgs`1.Item">
            <summary>
            Returns the selected list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.RemoveEventArgs`1.ItemData">
            <summary>
            Returns the selected item as JSON Object from the data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.TaggingEventArgs`1">
            <summary>
            Defines the tagging event.
            </summary>
            <typeparam name="T">Specifies the type of TaggingEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.TaggingEventArgs`1.Cancel">
            <summary>
            Illustrates whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.TaggingEventArgs`1.E">
            <summary>
            Specifies the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.TaggingEventArgs`1.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.TaggingEventArgs`1.ItemData">
            <summary>
            Returns the selected item as JSON Object from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.TaggingEventArgs`1.SetClass">
            <summary>
            To set the classes to chip element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.MultiSelectModel`1">
            <summary>
            Interface for a class MultiSelect.
            </summary>
            <typeparam name="T">Specifies the type of MultiSelectModel.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.BeforeOpen">
            <summary>
            Fires when popup opens before animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Blur">
            <summary>
            Event triggers when the input get focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Change">
            <summary>
            Fires each time when selection changes happened in list items after model and input value get affected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ChipSelection">
            <summary>
            Event triggers when the chip selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Close">
            <summary>
            Fires when popup close after animation completion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.CustomValueSelection">
            <summary>
            Triggers when the CustomValue is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Filtering">
            <summary>
            Triggers event,when user types a text in search box.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Focus">
            <summary>
            Event triggers when the input get focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Open">
            <summary>
            Fires when popup opens after animation completion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Removed">
            <summary>
            Fires after the selected item removed from the widget.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Removing">
            <summary>
            Fires before the selected item removed from the widget.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Select">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.SelectedAll">
            <summary>
            Fires after select all process completion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Tagging">
            <summary>
            Fires before set the selected item as chip in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ActionFailureTemplate">
            <summary>
            Accepts the template and assigns it to the popup list content of the MultiSelect component
            when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.AllowCustomValue">
            <summary>
            Allows user to add a
            custom value the value which is not present in the suggestion list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.AllowFiltering">
            <summary>
            <para>To enable the filtering option in this component.</para>
            <para>Filter action performs when type in search box and collect the matched item through `Filtering` event.</para>
            <para>If searching character does not match, `NoRecordsTemplate` property value will be shown.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ChangeOnBlur">
            <summary>
            <para>By default, the MultiSelect component fires the Change event while focus out the component.</para>
            <para>If you want to fires the Change event on every value selection and remove, then disable the ChangeOnBlur property.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ClosePopupOnSelect">
            <summary>
            Based on the property, when item get select popup visibility state will changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the MultiSelect. One or more custom CSS classes can be added to a MultiSelect.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.DataSource">
            <summary>
            <para>Accepts the list items either through local or remote service and binds it to the MultiSelect component.</para>
            <para>It can be an array of JSON Objects or an instance of
            `DataManager`.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.DelimiterChar">
            <summary>
            Sets the delimiter character for 'default' and 'delimiter' visibility modes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.EnableGroupCheckBox">
            <summary>
            <para>Specifies a boolean value that indicates the whether the grouped list items are
            allowed to check by checking the group header in checkbox mode.</para>
            <para>By default, there is no checkbox provided for group headers.</para>
            <para>This property allows you to render checkbox for group headers and to select
            all the grouped items at once.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.EnablePersistence">
            <summary>
            <para>Enable or disable persisting MultiSelect state between page reloads.</para>
            <para>If enabled, the `Value` state will be persisted.</para>
            <list type="bullet">
            <item>
            <term>Value</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.EnableSelectionOrder">
            <summary>
            Reorder the selected items in popup visibility state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the MultiSelect allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Fields">
            <summary>
            <para>The `Fields` property maps the columns of the data table and binds the data to the component.</para>
            <list type="bullet">
            <item>
            <term>Text</term>
            <description>Maps the text column from data table for each list item.</description>
            </item>
            <item>
            <term>Value</term>
            <description>Maps the value column from data table for each list item.</description>
            </item>
            <item>
            <term>IconCss</term>
            <description>Maps the icon class column from data table for each list item.</description>
            </item>
            <item>
            <term>GroupBy</term>
            <description>Group the list items with it's related items by mapping groupBy field.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.FilterBarPlaceholder">
            <summary>
            Accepts the value to be displayed as a watermark text on the filter bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.FilterType">
            <summary>
            Determines on which filter type, the MultiSelect component needs to be considered on search action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the MultiSelect that the placeholder text floats above the MultiSelect based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the MultiSelect when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the MultiSelect.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the MultiSelect after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.FooterTemplate">
            <summary>
            Accepts the template design and assigns it to the footer container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.GroupTemplate">
            <summary>
            Accepts the template design and assigns it to the group headers present in the MultiSelect popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.HeaderTemplate">
            <summary>
            Accepts the template design and assigns it to the header container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.HideSelectedItem">
            <summary>
            Hides the selected item from the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.HtmlAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.IgnoreAccent">
            <summary>
            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.IgnoreCase">
            <summary>
            Sets case sensitive option for filter operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ItemTemplate">
            <summary>
            Accepts the template design and assigns it to each list item present in the popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Locale">
            <summary>
            Specifies the global culture and localization of the MultiSelect.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.MaximumSelectionLength">
            <summary>
            <para>Sets limitation to the value selection.</para>
            <para>Based on the limitation, list selection will be prevented.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Mode">
            <summary>
            configures visibility mode for component interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.NoRecordsTemplate">
            <summary>
            Accepts the template design and assigns it to popup list of MultiSelect component.
            when no data is available on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.OpenOnClick">
            <summary>
            Whether to automatically open the popup when the control is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in MultiSelect. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.PopupHeight">
            <summary>
            Gets or sets the height of the popup list. By default, it renders based on its list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.PopupWidth">
            <summary>
            Gets or sets the width of the popup list and percentage values has calculated based on input width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Query">
            <summary>
            Accepts the external `Query`
            which will execute along with the data processing in MultiSelect.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Readonly">
            <summary>
            Specifies the boolean value whether the MultiSelect allows the user to change the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.SelectAllText">
            <summary>
            Specifies the selectAllText to be displayed on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ShowClearButton">
            <summary>
            Enables close icon with the each selected item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ShowDropDownIcon">
            <summary>
            Allows you to either show or hide the DropDown button on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ShowSelectAll">
            <summary>
            Allows you to either show or hide the selectAll option on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.SortOrder">
            <summary>
            <para>Specifies the `SortOrder` to sort the data source.</para>
            <para>The available type of sort orders are.</para>
            <list type="bullet">
            <item>
            <term>None</term>
            <description>The data source is not sorting.</description>
            </item>
            <item>
            <term>Ascending</term>
            <description>The data source is sorting with ascending order.</description>
            </item>
            <item>
            <term>Descending</term>
            <description>The data source is sorting with descending order.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Text">
            <summary>
            Selects the list item which maps the data `Text` field in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.UnSelectAllText">
            <summary>
            Specifies the UnSelectAllText to be displayed on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Value">
            <summary>
            Selects the list item which maps the data `Value` field in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.Width">
            <summary>
            Gets or sets the width of the component. By default, it sizes based on its parent.
            container dimension.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectModel`1.ZIndex">
            <summary>
            specifies the z-index value of the component popup element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.IDropDowns">
            <summary>
            Interface for DropDowns component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.IDropDowns.UpdateChildProperties(System.Object)">
            <summary>
            Update the child component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.IDropDowns.CallStateHasChangedAsync">
            <summary>
            Refresh the parent component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IDropDowns.NoRecordsTemplate">
            <summary>
            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.IDropDowns.ActionFailureTemplate">
            <summary>
            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SfListBox`2">
            <summary>
            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.
            It supports sorting, grouping, reordering and drag and drop of items.
            </summary>
            <summary>
            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.
            It supports sorting, grouping, reordering and drag and drop of items.
            </summary>
            <summary>
            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.
            It supports sorting, grouping, reordering and drag and drop of items.
            </summary>
            <summary>
            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.
            It supports sorting, grouping, reordering and drag and drop of items.
            </summary>
            <summary>
            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.
            It supports sorting, grouping, reordering and drag and drop of items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop">
            <summary>
            If 'allowDragAndDrop' is set to true, then you can perform drag and drop of the list item.
            ListBox contains same 'scope' property enables drag and drop between multiple ListBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowFiltering">
            <summary>
            To enable the filtering option in this component.
            Filter action performs when type in search box and collect the matched item through `Filtering` event.
            If searching character does not match, `noRecordsTemplate` property value will be shown.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.CssClass">
            <summary>
            Sets the CSS classes to root element of this component, which helps to customize the
            complete styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.FilterBarPlaceholder">
            <summary>
            Accepts the value to be displayed as a watermark text on the filter bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.Height">
            <summary>
            Sets the height of the ListBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.MaximumSelectionLength">
            <summary>
            Sets limitation to the value selection.
            based on the limitation, list selection will be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.Scope">
            <summary>
            Defines the connected ListBox reference to group sets of draggable and droppable ListBox.
            A draggable ListBox with the scope reference will be accepted by the droppable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.Value">
            <summary>
            Sets the specified item to the selected state or gets the selected item in the ListBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfListBox`2.HtmlAttributes">
            <summary>
            You can add the additional HTML attributes such as id, title etc., to the listbox element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.EnableItems``1(``0,System.Boolean)">
            <summary>
            This method is used to enable or disable the items in the ListBox based on the items and enable argument.
            </summary>
            <param name = "items">Specifies the list items to be enabled or disabled. You can pass either value(TValue) or data source(TItem) collection.</param>
            <param name = "enable">Set false to disable the items. By default the items will be enabled.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.GetDataByValue(`0)">
            <summary>
            Gets the array of data Object that matches the given array of values.
            </summary>
            <param name = "dataValue">Specifies the value(s).</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.GetDataList">
            <summary>
            Returns the updated dataSource in ListBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.MoveAllTo(System.String,System.Nullable{System.Double})">
            <summary>
            Moves all the values from one ListBox to the scoped ListBox.
            </summary>
            <param name = "scope">Specifies the destination ListBox reference.</param>
            <param name = "index">Specifies the index to place the moved items.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.MoveAllAsync(System.String,System.Nullable{System.Double})">
            <summary>
            Moves all the values from one ListBox to the scoped ListBox.
            </summary>
            <param name = "scope">Specifies the destination ListBox reference.</param>
            <param name = "index">Specifies the index to place the moved items.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.MoveDown(`0)">
            <summary>
            Moves the given value(s) / selected value(s) downwards.
            </summary>
            <param name = "values">Specifies the value(s).</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.MoveDownAsync(`0)">
            <summary>
            Moves the given value(s) / selected value(s) downwards.
            </summary>
            <param name = "values">Specifies the value(s).</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.MoveTo(`0,System.Nullable{System.Double},System.String)">
            <summary>
            Moves the given value(s) / selected value(s) to the given / default scoped ListBox.
            </summary>
            <param name = "values">Specifies the value(s).</param>
            <param name = "index">Specifies the index to place the moved items.</param>
            <param name = "scope">Specifies the destination ListBox reference.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.MoveAsync(`0,System.Nullable{System.Double},System.String)">
            <summary>
            Moves the given value(s) / selected value(s) to the given / default scoped ListBox.
            </summary>
            <param name = "values">Specifies the value(s).</param>
            <param name = "index">Specifies the index to place the moved items.</param>
            <param name = "scope">Specifies the destination ListBox reference.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.MoveUp(`0)">
            <summary>
            Moves the given value(s) / selected value(s) upwards.
            </summary>
            <param name = "values">Specifies the value(s).</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.MoveUpAsync(`0)">
            <summary>
            Moves the given value(s) / selected value(s) upwards.
            </summary>
            <param name = "values">Specifies the value(s).</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.SelectAll(System.Boolean)">
            <summary>
            Based on the state parameter, entire list item will be selected/deselected.
            </summary>
            <param name = "state">Set `true`/`false` to select/ unselect the entire list items.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.SelectAllAsync(System.Boolean)">
            <summary>
            Based on the state parameter, entire list item will be selected/deselected.
            </summary>
            <param name = "state">Set `true`/`false` to select/ unselect the entire list items.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.SelectItems``1(``0,System.Boolean)">
            <summary>
            Based on the state parameter, specified list item will be selected/deselected.
            </summary>
            <param name = "items">Specifies the list items to be selected or unselected. You can pass either value(TValue) or data source(TItem) collection.</param>
            <param name = "state">Set false to un select the items. By default the items will be selected.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.SelectItemsAsync``1(``0,System.Boolean)">
            <summary>
            Based on the state parameter, specified list item will be selected/deselected.
            </summary>
            <param name = "items">Specifies the list items to be selected or unselected. You can pass either value(TValue) or data source(TItem) collection.</param>
            <param name = "state">Set false to un select the items. By default the items will be selected.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.RemoveItem(System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Int32})">
            <summary>
            Removes a item or collection of items from the list. By default, removed the last item in the list,
            but you can remove based on the index parameter.
            </summary>
            <param name = "items">Specifies the list of data collection to be removed.</param>
            <param name = "itemIndex">Specifies the index to remove the item from the list.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.RemoveItemAsync(System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Int32})">
            <summary>
            Removes a item or collection of items from the list. By default, removed the last item in the list,
            but you can remove based on the index parameter.
            </summary>
            <param name = "items">Specifies the list of data collection to be removed.</param>
            <param name = "itemIndex">Specifies the index to remove the item from the list.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.DragEndAsync(System.Boolean,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,Microsoft.JSInterop.DotNetObjectReference{System.Object})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfListBox`2.UpdateChildProperties(System.String,System.Object)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs`2">
            <summary>
            Interface for change event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs`2.Items">
            <summary>
            Specifies the list data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs`2.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs`2.Value">
            <summary>
            Returns the selected values.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DragEventArgs`1">
            <summary>
            Interface for drag and drop event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DragEventArgs`1.Cancel">
            <summary>
            Used to prevent the drag action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DragEventArgs`1.Destination">
            <summary>
            Specifies the dropped ListBox data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DragEventArgs`1.Items">
            <summary>
            Specifies the dragged items data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DragEventArgs`1.Source">
            <summary>
            Specifies the dropped ListBox data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DragEventArgs`1.PreviousIndex">
            <summary>
            Specifies the drag item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DragEventArgs`1.CurrentIndex">
            <summary>
            Specifies the drop item index.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SourceDestinationModel`1">
            <summary>
            Interface for drag and drop event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SourceDestinationModel`1.CurrentData">
            <summary>
            Specifies the data after the drag and drop operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SourceDestinationModel`1.PreviousData">
            <summary>
            Specifies the data before the drag and drop operation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.DropEventArgs`1">
            <summary>
            Interface for drop event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropEventArgs`1.Cancel">
            <summary>
            Used to prevent the drop action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropEventArgs`1.CurrentIndex">
            <summary>
            Specifies the drop item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropEventArgs`1.Items">
            <summary>
            Specifies the dragged items data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropEventArgs`1.PreviousIndex">
            <summary>
            Specifies the drag item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.DropEventArgs`1.Target">
            <summary>
            Specifies the target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs`1">
            <summary>
            Interface for before item render event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs`1.Item">
            <summary>
            Specifies the item data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ListBoxEvents`2">
            <summary>
            Specifies the ListBox Events of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.OnActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.OnActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.OnActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.OnDrop">
            <summary>
            Triggers before dropping the list item on another list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.OnItemRender">
            <summary>
            Triggers while rendering each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.ValueChange">
            <summary>
            Triggers while select / unselect the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.DragStart">
            <summary>
            Triggers after dragging the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.Dropped">
            <summary>
            Triggers before dropping the list item on another list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxEvents`2.ItemSelected">
            <summary>
            Triggers on typing a character in the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ListBoxFieldSettings">
            <summary>
            The Fields property maps the columns of the data table and binds the data to the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxFieldSettings.GroupBy">
            <summary>
            Group the list items with it's related items by mapping groupBy field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxFieldSettings.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the list element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxFieldSettings.IconCss">
            <summary>
            Maps the icon class column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxFieldSettings.Text">
            <summary>
            Maps the text column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxFieldSettings.Value">
            <summary>
            Maps the value column from data table for each list item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings">
            <summary>
            Defines the selection settings of List Box.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings.CheckboxPosition">
            <summary>
            Set the position of the checkbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings.Mode">
            <summary>
            Specifies the selection modes. The possible values are
             `Single`: Allows you to select a single item in the ListBox.
             `Multiple`: Allows you to select more than one item in the ListBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings.ShowCheckbox">
            <summary>
            If 'showCheckbox' is set to true, then 'checkbox' will be visualized in the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings.ShowSelectAll">
            <summary>
            Allows you to either show or hide the selectAll option on the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ListBoxTemplates`1">
            <summary>
            Used to specify custom templates for rendering list in ListBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxTemplates`1.ItemTemplate">
            <summary>
            Accepts the template design and assigns it to each list item present in the listbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxTemplates`1.NoRecordsTemplate">
            <summary>
            Accepts the template design and assigns it to listbox, when no data is available on the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings">
            <summary>
            Defines the ListBox tool bar settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings.Items">
            <summary>
            Specifies the list of tools for dual ListBox.
            The predefined tools are 'MoveUp', 'MoveDown', 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings.Position">
            <summary>
            Positions the toolbar before/after the ListBox.
            The possible values are:
            - Left: The toolbar will be positioned to the left of the ListBox.
            - Right: The toolbar will be positioned to the right of the ListBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.SfMultiSelect`2">
            <summary>
            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.
            </summary>
            <summary>
            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.
            </summary>
            <summary>
            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.
            </summary>
            <summary>
            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.
            </summary>
            <summary>
            The MultiSelect component contains a list of predefined values from which a single value can be chosen.
            </summary>
            <summary>
            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.
            </summary>
            <typeparam name="TValue">Specifies the value type.</typeparam>
            <typeparam name="TItem">Specifies the type of SfMultiSelect.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ID">
            <summary>
            Specifies the id of the MultiSelect component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.AllowCustomValue">
            <summary>
            Allows user to add a
            Custom value the value which is not present in the suggestion list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.EnableVirtualization">
            <summary>
            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.
            To achieve this scenario with DropDowns, set the EnableVirtualization to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ItemsCount">
            <summary>
            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.AllowFiltering">
            <summary>
            <para>To enable the filtering option in this component.</para>
            <para>Filter action performs when type in search box and collect the matched item through `Filtering` event.</para>
            <para>If searching character does not match, `NoRecordsTemplate` property value will be shown.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ChangeOnBlur">
            <summary>
            <para>By default, the MultiSelect component fires the Change event while focus out the component.</para>
            <para>If you want to fires the Change event on every value selection and remove, then disable the EnabledChangeOnBlur property.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.EnableChangeOnBlur">
            <summary>
            <para>By default, the MultiSelect component fires the Change event while focus out the component.</para>
            <para>If you want to fires the Change event on every value selection and remove, then disable the EnabledChangeOnBlur property.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ClosePopupOnSelect">
            <summary>
            Based on the property, when item get select popup visibility state will changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.EnableCloseOnSelect">
            <summary>
            Based on the property, when item get select popup visibility state will changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the MultiSelect. One or more custom CSS classes can be added to a MultiSelect.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.DelimiterChar">
            <summary>
            Sets the delimiter character for 'default' and 'delimiter' visibility modes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.EnableGroupCheckBox">
            <summary>
            <para>Specifies a boolean value that indicates the whether the grouped list items are
            allowed to check by checking the group header in checkbox mode.</para>
            <para>By default, there is no checkbox provided for group headers.</para>
            <para>This property allows you to render checkbox for group headers and to select
            all the grouped items at once.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.EnableSelectionOrder">
            <summary>
            Reorder the selected items in popup visibility state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FilterBarPlaceholder">
            <summary>
            Accepts the value to be displayed as a watermark text on the filter bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the MultiSelect that the placeholder text floats above the MultiSelect based on the following values.
            <para>Possible values are: </para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the MultiSelect when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the MultiSelect.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the MultiSelect after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.HideSelectedItem">
            <summary>
            Hides the selected item from the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.HtmlAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.MaximumSelectionLength">
            <summary>
            <para>Sets limitation to the value selection.</para>
            <para>Based on the limitation, list selection will be prevented.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Mode">
            <summary>
            configures visibility mode for component interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OpenOnClick">
            <summary>
            Whether to automatically open the popup when the control is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in MultiSelect. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.PopupHeight">
            <summary>
            Gets or sets the height of the popup list. By default, it renders based on its list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.PopupWidth">
            <summary>
            Gets or sets the width of the popup list and percentage values has calculated based on input width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Readonly">
            <summary>
            Specifies the boolean value whether the MultiSelect allows the user to change the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.SelectAllText">
            <summary>
            Specifies the selectAllText to be displayed on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ShowClearButton">
            <summary>
            Enables close icon with the each selected item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ShowDropDownIcon">
            <summary>
            Allows you to either show or hide the DropDown button on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ShowSelectAll">
            <summary>
            Allows you to either show or hide the selectAll option on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Text">
            <summary>
            Selects the list item which maps the data `Text` field in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.UnSelectAllText">
            <summary>
            Specifies the UnSelectAllText to be displayed on the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Value">
            <summary>
            Selects the list item which maps the data `Value` field in the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FooterTemplate">
            <summary>
            Accepts the template design and assigns it to the footer container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.HeaderTemplate">
            <summary>
            Accepts the template design and assigns it to the header container of the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Width">
            <summary>
            Gets or sets the width of the component. By default, it sizes based on its parent.
            container dimension.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.TabIndex">
            <summary>
            Specifies the tab order of the DropDownList component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnKeyUp">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnBlur">
            <summary>
            Triggers when the input loses the focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.MultiSelectParent">
            <summary>
            Parent component of MultiSelect.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FocusIn">
            <summary>
            Sets the focus to the MultiSelect component for interaction.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FocusAsync">
            <summary>
            Sets the focus to the MultiSelect component for interaction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FocusOut">
            <summary>
            Remove the focus from the MultiSelect component, if the component is in focus state.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FocusOutAsync">
            <summary>
            Remove the focus from the MultiSelect component, if the component is in focus state.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.HideSpinnerAsync">
            <summary>
            Hides the spinner loader.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.HideSpinner">
            <summary>
            Hides the spinner loader.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ShowSpinnerAsync">
            <summary>
            Shows the spinner loader.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ShowSpinner">
            <summary>
            Shows the spinner loader.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.SelectAll(System.Boolean)">
            <summary>
            <para>Based on the state parameter, entire list item will be selected/deselected.</para>
            <para>parameter.</para>
            <list type="bullet">
            <item>
            <term>True</term>
            <description>Selects entire list items.</description>
            </item>
            <item>
            <term>False</term>
            <description>Un Selects entire list items.</description>
            </item>
            </list>
            </summary>
            <param name="state">Specifies the state.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.SelectAllAsync(System.Boolean)">
             <summary>
             <para>Based on the state parameter, entire list item will be selected/deselected.</para>
             <para>parameter</para>
             <list type="bullet">
             <item>
             <term>True</term>
             <description>Selects entire list items.</description>
            </item>
             <item>
             <term>False</term>
             <description>Un Selects entire list items.</description>
             </item>
             </list>
             </summary>
             <param name="state">Specifies the state.</param>
             <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Clear">
            <summary>
            Allows you to clear the selected values from the MultiSelect component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ClearAsync">
            <summary>
            Allows you to clear the selected values from the MultiSelect component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.GetItemsAsync">
            <summary>
            Gets all the list items bound on this component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.GetItems">
            <summary>
            Gets all the list items bound on this component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.GetDataByValueAsync(`0)">
            <summary>
            Gets the array of data Object that matches the given array of values.
            </summary>
            <param name = "dataValue">Specifies the value(s).</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.GetDataByValue(`0)">
            <summary>
            Gets the array of data Object that matches the given array of values.
            </summary>
            <param name = "dataValue">Specifies the value(s).</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)">
            <summary>
            To filter the data from given data source by using query.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <param name="fields">Specifies the fields.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Filter(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)">
            <summary>
            To filter the data from given data source by using query.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <param name="fields">Specifies the fields.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.HidePopupAsync">
            <summary>
            Hides the popup if it is in an open state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ShowPopupAsync">
            <summary>
            Opens the popup that displays the list of items.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ShowPopup">
            <summary>
            Opens the popup that displays the list of items.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.HidePopup">
            <summary>
            Hides the popup if it is in an open state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ClosePopup">
            <summary>
            Invoke the before the popup close.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Hide">
            <summary>
            Hides the MultiSelect popup.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.InvokeBlur">
            <summary>
            Invoke the blur event for the MultiSelect input.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.RemainCount(System.Double)">
            <summary>
            Invoke the RemainCount event for the return the MultiSelect remainder count.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.VirtualScrollHandler">
            <summary>
            Invoke the scroll handler.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.IsFilter">
            <summary>
            Task which specifies whether filter action is allowed or not.
            </summary>
            <returns>bool.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.IncrementSearch">
            <summary>
            Task which incrment the search.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.PasteHandler">
            <summary>
            Triggers when paste action is performes.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FilterClear">
            <summary>
            Triggers when filter clear icon is clicked.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FilteringAction(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)">
            <summary>
            Task which specifies the filtering action.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <param name="fields">Specifies the fields.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.GetQuery(Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which gets the query.
            </summary>
            <param name="query">Specifies the query.</param>
            <returns>Query.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.SetRTL">
            <summary>
            Method which set RTL to the component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.SetCssClass">
            <summary>
            Method which set css class to the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ComponentName">
            <summary>
            Specifies the component name.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.CallStateHasChangedAsync">
            <summary>
            Invoke state change of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.RefreshPopup">
            <summary>
            Task used to refresh the popup list items.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.SetInputValue">
            <summary>
            Invoke the client side method for update the input value while focusing out the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.DependencyScripts">
            <summary>
            Method which updates the dependency scripts.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OpenEventArgs">
            <summary>
            Specifies the open event.
            </summary>
            <returns>PopupEventArgs arguments.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ActionBegin(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which pecifies the action begin event.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ActionComplete(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query)">
            <summary>
            Task which specifies the action complete event.
            </summary>
            <param name="dataSource">Specifies the data source.</param>
            <param name="query">Specifies the query.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.ActionFailure(System.Object)">
            <summary>
            Task which specifies the action failure event.
            </summary>
            <param name="args">Specifies the object arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.UpdatePopupState">
            <summary>
            Method which updates the popup state.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.UpdateListSelection(Syncfusion.Blazor.DropDowns.ListOptions{`1},System.String,System.Boolean,System.EventArgs)">
            <summary>
            Task which updates the selected item.
            </summary>
            <param name="listItem">Specifies the list item.</param>
            <param name="className">Specifies the class name..</param>
            <param name="isAdd">Specifies whether to add the item or not.</param>
            <param name="args">Specifies the EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.UpdateChildProperties(System.Object)">
            <summary>
            Update the MultiSelect fileds.
            </summary>
            <param name="fieldValue">Specifies the field value.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.UpdateSelectedItem(Syncfusion.Blazor.DropDowns.ListOptions{`1},System.EventArgs,Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Boolean)">
            <summary>
            Task which updates the selected item.
            </summary>
            <param name="item">Specifies the item.</param>
            <param name="args">Specifies the EventArgs arguments.</param>
            <param name="keyArgs">Specifies the KeyActions arguments.</param>
            <param name="isGroupBy">Specifies whether the items should be grouped or not.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.OnChangeEvent(System.EventArgs)">
            <summary>
            Triggers when value get changed.
            </summary>
            <param name="args">Specifies EventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.UpdateValue">
            <summary>
            Task which updates the value.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.GetItemData(`1)">
            <summary>
            Method which gets item data.
            </summary>
            <param name="item">Specifies the item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2">
            <summary>
            Specifies the MultiSelect Events of the component.
            </summary>
            <typeparam name="TValue">Specifies the value type.</typeparam>
            <typeparam name="TItem">Specifies the type of MultiSelectEvents.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnActionBegin">
            <summary>
            Triggers before fetching data from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnActionComplete">
            <summary>
            Triggers after data is fetched successfully from the remote server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnOpen">
            <summary>
            Fires when popup opens before animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.Blur">
            <summary>
            Event triggers when the input get focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.ValueChange">
            <summary>
            Fires each time when selection changes happened in list items after model and input value get affected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.ChipSelected">
            <summary>
            Event triggers when the chip selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnClose">
            <summary>
            Triggers before the popup is closed. If you cancel this event, the popup remains opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.CustomValueSpecifier">
            <summary>
            Triggers when the CustomValue is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.DataBound">
            <summary>
            Triggers when data source is populated in the popup list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.Filtering">
            <summary>
            Triggers event,when user types a text in search box.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.Focus">
            <summary>
            Event triggers when the input get focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.Opened">
            <summary>
            Fires when popup opens after animation completion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.Closed">
            <summary>
            Triggers after the popup has been closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.ValueRemoved">
            <summary>
            Fires after the selected item removed from the widget.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnValueRemove">
            <summary>
            Fires before the selected item removed from the widget.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnValueSelect">
            <summary>
            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.SelectedAll">
            <summary>
            Fires after select all process completion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.Cleared">
            <summary>
            Fires after cleared all item using clear icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnChipTag">
            <summary>
            Fires before set the selected item as chip in the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.MultiSelectEvents`2.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings">
            <summary>
            The Fields property maps the columns of the data table and binds the data to the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings.GroupBy">
            <summary>
            Group the list items with it's related items by mapping groupBy field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the list element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings.IconCss">
            <summary>
            Maps the icon class column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings.Text">
            <summary>
            Maps the text column from data table for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings.Value">
            <summary>
            Maps the value column from data table for each list item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DropDowns.MultiSelectTemplates`1">
            <summary>
            The MulitSelect has been provided with several options to customize each list item, group title, selected value, header, and footer elements.
            </summary>
            <typeparam name="TItem">Specifies the type of MultiSelectTemplates.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.DropDowns.MultiSelectTemplates`1.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DropDowns.MultiSelectTemplates`1.OnInitialized">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.LocaleData">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.LocaleData" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.Dropdowns">
            <summary>
            Gets or sets the Dropdowns property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.DropDownList">
            <summary>
            Gets or sets the DropDownList property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.ComboBox">
            <summary>
            Gets or sets the ComboBox property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.AutoComplete">
            <summary>
            Gets or sets the AutoComplete property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.MultiSelect">
            <summary>
            Gets or sets the MultiSelect property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.ListBox">
            <summary>
            Gets or sets the ListBox property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.Uploader">
            <summary>
            Returns the upload locale.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.NumericTextBox">
            <summary>
            Returns the numerictextbox locale.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.FormValidator">
            <summary>
            Returns the formValidator locale.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropdownsLocale">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.DropdownsLocale" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropdownsLocale.NoRecordsTemplate">
            <summary>
            Gets or sets the NoRecordsTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropdownsLocale.ActionFailureTemplate">
            <summary>
            Gets or sets the ActionFailureTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropdownsLocale.OverflowCountTemplate">
            <summary>
            Gets or sets the OverflowCountTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropdownsLocale.SelectAllText">
            <summary>
            Gets or sets the SelectAllText property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropdownsLocale.UnSelectAllText">
            <summary>
            Gets or sets the UnSelectAllText property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropdownsLocale.TotalCountTemplate">
            <summary>
            Gets or sets the TotalCountTemplate property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DropDownListLocale">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.DropDownListLocale" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDownListLocale.NoRecordsTemplate">
            <summary>
            Gets or sets the NoRecordsTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DropDownListLocale.ActionFailureTemplate">
            <summary>
            Gets or sets the ActionFailureTemplate property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.ComboBoxLocale">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.ComboBoxLocale" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ComboBoxLocale.NoRecordsTemplate">
            <summary>
            Gets or sets the NoRecordsTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ComboBoxLocale.ActionFailureTemplate">
            <summary>
            Gets or sets the ActionFailureTemplate property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.AutoCompleteLocale">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.AutoCompleteLocale" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.AutoCompleteLocale.NoRecordsTemplate">
            <summary>
            Gets or sets the NoRecordsTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.AutoCompleteLocale.ActionFailureTemplate">
            <summary>
            Gets or sets the ActionFailureTemplate property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.MultiSelectLocale">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.MultiSelectLocale" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.MultiSelectLocale.NoRecordsTemplate">
            <summary>
            Gets or sets the NoRecordsTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.MultiSelectLocale.ActionFailureTemplate">
            <summary>
            Gets or sets the ActionFailureTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.MultiSelectLocale.OverflowCountTemplate">
            <summary>
            Gets or sets the OverflowCountTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.MultiSelectLocale.SelectAllText">
            <summary>
            Gets or sets the SelectAllText property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.MultiSelectLocale.UnSelectAllText">
            <summary>
            Gets or sets the UnSelectAllText property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.MultiSelectLocale.TotalCountTemplate">
            <summary>
            Gets or sets the TotalCountTemplate property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.ListBoxLocale">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.ListBoxLocale" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.NoRecordsTemplate">
            <summary>
            Gets or sets the NoRecordsTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.ActionFailureTemplate">
            <summary>
            Gets or sets the ActionFailureTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.SelectAllText">
            <summary>
            Gets or sets the SelectAllText property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.UnSelectAllText">
            <summary>
            Gets or sets the UnSelectAllText property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.MoveUp">
            <summary>
            Gets or sets the MoveUp property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.MoveDown">
            <summary>
            Gets or sets the MoveDown property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.MoveTo">
            <summary>
            Gets or sets the MoveTo property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.MoveFrom">
            <summary>
            Gets or sets the MoveFrom property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.MoveAllTo">
            <summary>
            Gets or sets the MoveAllTo property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ListBoxLocale.MoveAllFrom">
            <summary>
            Gets or sets the MoveAllFrom property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FloatLabelType">
            <summary>
            Defines floating label type of the input and decides how the label should float on the input.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never">
            <summary>
            The placeholder text should not be float ever.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Always">
            <summary>
            The placeholder text floats above the input always.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Auto">
            <summary>
            The placeholder text floats above the input while focusing or enter a value in input.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.AutoComplete">
            <summary>
            Specifies whether the browser is allow to automatically enter or select a value for the textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.AutoComplete.On">
            <summary>
            Specifies that autocomplete is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.AutoComplete.Off">
            <summary>
            Specifies that autocomplete is disabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.InputType">
            <summary>
            Define the attribute specifies the type of textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Text">
            <summary>
            The text field is a single-line text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Email">
            <summary>
            Set an e-mail type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Password">
            <summary>
            Set the password type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Number">
            <summary>
            Set the number type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Search">
            <summary>
            Set the search type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Tel">
            <summary>
            Set the tel type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.URL">
            <summary>
            Set the URL type to TextBox component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.SfInputBase">
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnPaste">
            <summary>
            Triggers when the content is paste into an input.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BindClearBtnEvents">
            <summary>
            Triggers when the clear gets clicked.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BindClearBtnTouchEvents">
            <summary>
            Triggers when the clear icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseDownOnSpinner">
            <summary>
            Triggers when the spin down gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchDownOnSpinner">
            <summary>
            Triggers when the spin down icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseUpOnSpinner">
            <summary>
            Triggers when the spin up gets clicked.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchUpOnSpinner">
            <summary>
            Triggers when the spin up icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseIconHandler">
            <summary>
            Triggers when the icon gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchIconHandler">
            <summary>
            Triggers when the icon get touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseContainerHandler">
            <summary>
            Triggers when the container gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnContainerBlur">
            <summary>
            Triggers when the container gets focus out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnContainerFocus">
            <summary>
            Triggers when the container gets focused.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerKeypress">
            <summary>
            Triggers when the container key pressed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ID">
            <summary>
            Specifies the id of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.InputEditContext">
            <summary>
            Specifies the edit context of the Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Autocomplete">
            <summary>
            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.
            <para>By default, autocomplete is enabled for TextBox.</para>
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.EnablePersistence">
            <summary>
            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Locale">
            <summary>
            Specifies the global culture and localization of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Multiline">
            <summary>
            Specifies a boolean value that enables or disables the multiline on the TextBox.
            The TextBox changes from a single line to multiline when enabling this multiline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Placeholder">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsReadOnlyInput">
            <summary>
            Specifies the boolean value for dropdownlist default readonly property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Type">
            <summary>
            Specifies the behavior of the TextBox such as text, password, email, and more.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value">
            <summary>
            Sets the content of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerAttr">
            <summary>
            Specifies the container attrubute of Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Buttons">
            <summary>
            Specifies the icon of the TextBox component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.PrependButtons">
            <summary>
            Specifies the prepend icon of the TextBox component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SpinButton">
            <summary>
            Specifies a boolean value that enable or disable the spin button on the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerClass">
            <summary>
            Specifies the class value that is appended to container of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsValueTemplate">
            <summary>
            Specifies a boolean value that indicates whether the value template is displayed in TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.RootClass">
            <summary>
            Gets or Set the component class to element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ClickStopPropagation">
            <summary>
            Specifies the prevents the click actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseDowSpinnerPrevent">
            <summary>
            Specifies the prevents the mouse actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.PreventIconHandler">
            <summary>
            Specifies the prevents the icon actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MousePreventContainer">
            <summary>
            Specifies the prevents the container actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsShowSpinnerOnClear">
            <summary>
            Specifies the spinner show on clear icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsShowSpinnerOnIcon">
            <summary>
            Specifies the spinner show on dropdown icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Parent">
            <exclude/>
            <summary>
            Gets or sets the Parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnParametersSetAsync">
            <summary>
            Triggers when dynamically changing the component property.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component get rendered.
            </summary>
            <param name="firstRender">True if the component rendered for the first time.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SetReadOnly">
            <summary>
            The setReadOnly.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.CreateFloatingLabel">
            <summary>
            The createFloatingLabel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SetEnabled">
            <summary>
            The setEnabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BlurHandler">
            <summary>
            triggers while the component get focused out.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">The rootClass<see cref="T:System.String"/>.</param>
            <param name="containerClass">The containerClass<see cref="T:System.String"/>.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IInputBase">
            <summary>
            Common properties for input base component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IInputBase.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.IInputBase.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component root class and container element class.
            </summary>
            <param name="rootClass">Specifies the root class of the InputBase.</param>
            <param name="containerClass">Specifies the container class of the InputBase.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs">
            <summary>
            Specifies the icon handler arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs.eventArgs">
            <summary>
            Specifies the <see cref="T:System.EventArgs"/> arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs.IconName">
            <summary>
            Specifies the name of the icon.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.UploaderStreamReader.#ctor(Syncfusion.Blazor.Inputs.SfUploader)">
            <summary>
            Constructor for initializing the component adaptor.
            </summary>
            <param name="parent">Uploader arguments.</param>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploaderStreamReader.UploaderFileStream.Position">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.UploaderStreamReader.UploadData">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploadFileList.UploaderFileInterop">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.UploadReadFile.GetFileReader">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IUploadReadFile">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.IUploadReadFile.GetFileReader">
            <summary>
            Opens a stream to read the file.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IUploadFileList">
            <summary>
            Specifies the interface for upload file list.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.IUploadFileList.FileListData(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Register for drop events on the source element.
            </summary>
            <param name="ele">Specifies the element reference.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails">
            <summary>
            Specifies the upload file status.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails.chunksize">
            <summary>
            Specifies the chunk size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails.totalChunksize">
            <summary>
            Specifies the total chunk size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfColorPicker">
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ID">
            <summary>
            Sets ID attribute for color picker element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the dropdown button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Columns">
            <summary>
            It is used to render the ColorPicker palette with specified columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.CssClass">
            <summary>
            This property sets the CSS classes to root element of the ColorPicker
             which helps to customize the UI styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Disabled">
            <summary>
            It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnableOpacity">
            <summary>
            It is used to enable / disable the opacity option of ColorPicker component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnablePersistence">
            <summary>
            To enable or disable persisting component's state between page reloads and it is extended from component class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Inline">
            <summary>
            It is used to render the ColorPicker component as inline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Mode">
            <summary>
            It is used to render the ColorPicker with the specified mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ModeSwitcher">
            <summary>
            It is used to show / hide the mode switcher button of ColorPicker component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.NoColor">
            <summary>
            It is used to enable / disable the no color option of ColorPicker component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.PresetColors">
            <summary>
            It is used to load custom colors to palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons">
            <summary>
            It is used to show / hide the control buttons (apply / cancel) of  ColorPicker component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Value">
            <summary>
            It is used to set the color value for ColorPicker. It should be specified as Hex code.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnOpen">
            <summary>
            Triggers before opening the ColorPicker popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Opened">
            <summary>
            Triggers while opening the ColorPicker popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnClose">
            <summary>
            Triggers before closing the ColorPicker popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnModeSwitch">
            <summary>
            Triggers before Switching between ColorPicker mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ModeSwitched">
            <summary>
            Triggers after the ColorPicker mode is switched.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnTileRender">
            <summary>
            Triggers while rendering each palette tile.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueChange">
            <summary>
            Triggers while changing the colors. It will be triggered based on the showButtons property.
            If the property is false, the event will be triggered while selecting the colors.
            If the property is true, the event will be triggered while apply the selected color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Selected">
            <summary>
            Triggers while selecting the color in picker / palette, when ShowButtons property is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ColorPickerParent">
            <summary>
            Parent component of ColorPicker.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.GetValue(System.String,Syncfusion.Blazor.Inputs.ColorValueType)">
            <summary>
            To get color value in specified type.
            </summary>
            <param name = "value">Specify the color value.</param>
            <param name = "type">Specify the type to which the specified color needs to be converted.</param>
            <returns>Returns the color value in specified type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.Toggle">
            <summary>
             To show/hide ColorPicker popup based on current state of the SplitButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.FocusIn">
            <summary>
            Sets the focus to Colorpicker.
            its native method.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.FocusAsync">
            <summary>
            Sets the focus to Colorpicker.
            its native method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.SetOffset(Syncfusion.Blazor.Inputs.Offset)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.Click(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.Close">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerMode">
            <summary>
            ColorPicker Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker">
            <summary>
            To set the color picker mode as picker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorPickerMode.Palette">
            <summary>
            To set the color picker mode as palette.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorValueType">
            <summary>
            Color value types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hex">
            <summary>
            Specifies the hex code value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hexa">
            <summary>
            Specifies the hex code value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Rgb">
            <summary>
            Specifies the red green blue value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Rgba">
            <summary>
            Specifies the red green blue value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hsv">
            <summary>
            Specifies the hue saturation value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hsva">
            <summary>
            Specifies the hue saturation value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Opacity">
            <summary>
            Specifies the opacity value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs">
            <summary>
            Interface for before open / close event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Cancel">
            <summary>
            Used to prevent color picker popup open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Element">
            <summary>
            Specifies the color picker popup element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Event">
            <summary>
            Specifies the Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs">
            <summary>
            Interface for change / select event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.CurrentValue">
            <summary>
            Specifies the current color value details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.PreviousValue">
            <summary>
            Specifies the previous color value details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerValue">
            <summary>
            Interface for Color picker values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerValue.Hex">
            <summary>
            Specifies the color value as HEX format without opacity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerValue.Rgba">
            <summary>
            Specifies the color value as RGBA format.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs">
            <summary>
            Interface for mode switching event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs.Element">
            <summary>
            Specifies the mode switcher element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs.Mode">
            <summary>
            Specifies the color picker mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.OpenEventArgs">
            <summary>
            Interface for open event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OpenEventArgs.Element">
            <summary>
            Specifies the color picker popup element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OpenEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs">
            <summary>
            Interface for before change event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.Element">
            <summary>
            Specifies the palette tile element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.PresetName">
            <summary>
            Specifies key name of the custom preset colors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.Value">
            <summary>
            Specifies the color value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Offset">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfInputTextBase`1">
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnPaste">
            <summary>
            Triggers when the content is paste into an input.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ID">
            <summary>
            Specifies the id of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value">
            <summary>
            Sets the content of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.InputEditContext">
            <summary>
            Specifies the edit context of the Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.EnablePersistence">
            <summary>
            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.BaseFloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Locale">
            <summary>
            Specifies the global culture and localization of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ValidateOnInput">
            <summary>
            Specifies a boolean value that indicates whether the component validates the input or not.
            </summary>
            <value>
            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.
            </value>
            <remarks>
            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ContainerAttr">
            <summary>
            Specifies the container attrubute of Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.SpinButton">
            <summary>
            Specifies a boolean value that enable or disable the spin button on the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.IsValueTemplate">
            <summary>
            Specifies a boolean value that indicates whether the value template is displayed in TextBox.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ClickStopPropagation">
            <summary>
            Specifies the prevents the click actions.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.MouseDowSpinnerPrevent">
            <summary>
            Specifies the prevents the mouse actions.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.PreventIconHandler">
            <summary>
            Specifies the prevents the icon actions.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.MousePreventContainer">
            <summary>
            Specifies the prevents the container actions.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ContainerClass">
            <summary>
            Specifies the class value that is appended to container of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.RootClass">
            <summary>
            Gets or Set the component class to element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnParametersSetAsync">
            <summary>
            Triggers when dynamically changing the component property.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.SetReadOnly">
            <summary>
            The setReadOnly.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.CreateFloatingLabel">
            <summary>
            The createFloatingLabel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.SetEnabled">
            <summary>
            The setEnabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.BlurHandler">
            <summary>
            triggers while the component get focused out.
            </summary>
            <returns>Task.</returns>
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FormEventArgs">
            <summary>
            SPecifies the form event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Element">
            <summary>
            Returns the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.ErrorElement">
            <summary>
            Returns the error element for corresponding input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.InputName">
            <summary>
            Returns the name of the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Message">
            <summary>
            Returns the error message.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Status">
            <summary>
            Returns the status input element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BlurEventArgs">
            <summary>
            Defines the argument for the blur event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BlurEventArgs.Model">
            <summary>
            returns the model class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusEventArgs">
            <summary>
            Defines the argument for the focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusEventArgs.Model">
            <summary>
            returns the model class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.IInput">
            <summary>
            Default required properties for input components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Change">
            <summary>
             Sets the change event mapping function to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.CssClass">
            <summary>
             Sets the css class value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.EnableRtl">
            <summary>
             Sets the enable rtl value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Enabled">
            <summary>
             Sets the enabled value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.FloatLabelType">
            <summary>
            Specifies how the floating label works.
            Possible values are:
             Never - Never float the label in the input when the placeholder is available.
             Always - The floating label will always float above the input.
             Auto - The floating label will float above the input after focusing or entering a value in the input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Placeholder">
            <summary>
             Sets the placeholder value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Readonly">
            <summary>
             Sets the readonly value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.ShowClearButton">
            <summary>
             Specifies whether to display the Clear button in the input.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ActionCompleteEventArgs">
            <summary>
            Defines the argument for the ActionComplete event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ActionCompleteEventArgs.FileData">
            <summary>
            Return the selected file details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs">
            <summary>
            Defines the argument for the BeforeRemove event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.CurrentRequest">
            <summary>
            Returns the XMLHttpRequest instance that is associated with remove action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.FilesData">
            <summary>
            Returns the list of files details that will be removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.CustomFormData">
            <summary>
            Defines the additional data with key and value pair format that will be submitted to the remove action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.PostRawFile">
            <summary>
            Defines whether the selected raw file send to server remove action.
            Set true to send raw file.
            Set false to send file name only.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs">
            <summary>
            Defines the argument for the BeforeUpload event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CurrentRequest">
            <summary>
            Returns the XMLHttpRequest instance that is associated with upload action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.FilesData">
            <summary>
            Returns the list of uploading files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CustomFormData">
            <summary>
            Defines the additional data in key and value pair format that will be submitted to the upload action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.CancelEventArgs">
            <summary>
            Defines the argument for the Cancel event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.FileData">
            <summary>
            Returns the file details that will be canceled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ClearingEventArgs">
            <summary>
            Defines the argument for the Clearing event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ClearingEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ClearingEventArgs.FilesData">
            <summary>
            Returns the list of files that will be cleared from the FileList.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FailureEventArgs">
            <summary>
            Defines the argument for the Failure event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.ChunkIndex">
            <summary>
            Returns the upload chunk index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.ChunkSize">
            <summary>
            Returns the upload chunk size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.E">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.File">
            <summary>
            Returns the details about upload file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.RetryFiles">
            <summary>
             Defines the files for retry the upload files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.Operation">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.Response">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.StatusText">
            <summary>
            Returns the upload status.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.TotalChunk">
            <summary>
            Returns the total chunk size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FileInfo">
            <summary>
            Defines the argument for the FileInfo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.FileSource">
            <summary>
            Returns where the file selected from, to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Id">
            <summary>
            Returns the unique upload file name ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Input">
            <summary>
            Returns the input element mapped with file list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.List">
            <summary>
            Returns the respective file list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Name">
            <summary>
            Returns the upload file name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.RawFile">
            <summary>
            Returns the details about upload file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Size">
            <summary>
            Returns the size of file in bytes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Status">
            <summary>
            Returns the status of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.StatusCode">
            <summary>
            Returns the current state of the file such as Failed, Canceled, Selected, Uploaded, or Uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Type">
            <summary>
            Returns the MIME type of file as a string. Returns empty string if the file’s type is not determined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.MimeContentType">
            <summary>
            Returns the mime content type of file as a string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.LastModifiedDate">
            <summary>
            Returns the last modified date of the uploading file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.ValidationMessages">
            <summary>
            Returns the list of validation errors (if any).
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs">
            <summary>
            Defines the argument for the FileListRender event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.Element">
            <summary>
            Return the current file item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.FileInfo">
            <summary>
            Return the current rendering file item data as File object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.Index">
            <summary>
            Return the index of the file item in the file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.IsPreload">
            <summary>
            Return whether the file is preloaded.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PauseResumeEventArgs">
            <summary>
            Defines the argument for the PauseResume event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkCount">
            <summary>
            Returns the total number of chunks.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkIndex">
            <summary>
            Returns the index of chunk that is Paused or Resumed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkSize">
            <summary>
            Returns the chunk size value in bytes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.File">
            <summary>
            Returns the file data that is Paused or Resumed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ProgressEventArgs">
            <summary>
            Defines the argument for the Progress event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.E">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.LengthComputable">
            <summary>
            Returns the file progress is computable or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Loaded">
            <summary>
            Returns the progressed the uploading file size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Total">
            <summary>
            Returns the total size of the uploading file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.File">
            <summary>
            Returns the details about upload file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Stream">
            <summary>
            Return the file stream of loaded file content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Operation">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.RemovingEventArgs">
            <summary>
            Defines the argument for the Removing event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.CurrentRequest">
            <summary>
            Returns the XMLHttpRequest instance that is associated with remove action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.CustomFormData">
            <summary>
            Defines the additional data with key and value pair format that will be submitted to the remove action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.FilesData">
            <summary>
            Returns the list of files’ details that will be removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.PostRawFile">
            <summary>
            Defines whether the selected raw file send to server remove action.
            Set true to send raw file.
            Set false to send file name only.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.RenderingEventArgs">
            <summary>
            Defines the argument for the Rendering event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RenderingEventArgs.Element">
            <summary>
            Return the current file item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RenderingEventArgs.FileInfo">
            <summary>
            Return the current rendering file item data as File object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RenderingEventArgs.Index">
            <summary>
            Return the index of the file item in the file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RenderingEventArgs.IsPreload">
            <summary>
            Return whether the file is preloaded.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ResponseEventArgs">
            <summary>
            Defines the argument for the Response event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.Headers">
            <summary>
            Returns the current response header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.ReadyState">
            <summary>
            Returns the current response readyState.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.StatusCode">
            <summary>
            Returns the current response statusCode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.StatusText">
            <summary>
            Returns the current response statusText.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.WithCredentials">
            <summary>
            Returns the current response withCredentials.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SelectedEventArgs">
            <summary>
            Defines the argument for the Selected event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.CurrentRequest">
            <summary>
            Set the current request header to the XMLHttpRequest instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.CustomFormData">
            <summary>
            Defines the additional data in key and value pair format that will be submitted to the upload action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.FilesData">
            <summary>
            Returns the list of selected files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.IsCanceled">
            <summary>
            Specifies whether the file selection has been canceled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.IsModified">
            <summary>
            Determines whether the file list generates based on the modified data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.ModifiedFilesData">
            <summary>
            Specifies the modified files data to generate the file items. The argument depends on `isModified` argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.ProgressInterval">
            <summary>
            Specifies the step value to the progress bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Type">
            <summary>
            Returns the original event argument type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SuccessEventArgs">
            <summary>
            Defines the argument for the Success event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.ChunkIndex">
            <summary>
            Returns the upload chunk index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.ChunkSize">
            <summary>
            Returns the upload chunk size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.E">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.File">
            <summary>
            Returns the details about upload file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Operation">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Response">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.StatusText">
            <summary>
            Returns the upload status.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.TotalChunk">
            <summary>
            Returns the total chunk size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadFiles">
            <summary>
            Defines the argument for the UploadFiles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadFiles.Stream">
            <summary>
            Return the selected file stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadFiles.FileInfo">
            <summary>
            Return the selected file details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadChangeEventArgs">
            <summary>
            Defines the argument for the UploadChangeEventArgs event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadChangeEventArgs.Files">
            <summary>
            Returns the list of files that will be cleared from the FileList.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadingEventArgs">
            <summary>
            Defines the argument for the UploadingEventArgs event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.ChunkSize">
            <summary>
            Returns the chunk size in bytes if the chunk upload is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.CurrentChunkIndex">
            <summary>
            Returns the index of current chunk if the chunk upload is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.FileData">
            <summary>
            Returns the list of files that will be uploaded.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ValidationMessages">
            <summary>
            Defines the argument for the ValidationMessages.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ValidationMessages.MaxSize">
            <summary>
            Returns the maximum file size validation message, if selected file size is less than specified maxFileSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ValidationMessages.MinSize">
            <summary>
            Returns the minimum file size validation message, if selected file size is less than specified minFileSize property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.AsyncSettingsModel">
            <summary>
            Interface for a class AsyncSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.ChunkSize">
            <summary>
            Specifies the chunk size to split the large file into chunks, and upload it to the server in a sequential order.
            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.</para>
            <para>It must be specified in bytes value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RemoveUrl">
            <summary>
            Specifies the URL of remove action that receives the file information and handle the remove operation in server.
            <para>The remove action type must be POST request and define "RemoveFileNames" attribute to get file information that will be removed.</para>
            <para>This property is optional.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RetryAfterDelay">
            <summary>
            Specifies the delay time in milliseconds that the automatic retry happens after the delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RetryCount">
            <summary>
            Specifies the number of retries that the Uploader can perform on the file failed to upload.
            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.SaveUrl">
            <summary>
            Specifies the URL of save action that will receive the upload files and save in the server.
            <para>The save action type must be POST request and define the argument as same input name used to render the component.</para>
            <para>The upload operations could not perform without this property.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ButtonsPropsModel">
            <summary>
            Interface for a class ButtonsProps.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Browse">
            <summary>
            Specifies the text or html content to browse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Clear">
            <summary>
            Specifies the text or html content to clear button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Upload">
            <summary>
            Specifies the text or html content to upload button.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FilesPropModel">
            <summary>
            Interface for a class FilesProp.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Name">
            <summary>
            Specifies the name of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Size">
            <summary>
            Specifies the size of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Type">
            <summary>
            Specifies the type of the file.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderModel">
            <summary>
            Interface for a class Uploader.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ActionComplete">
            <summary>
            Triggers after all the selected files has processed to upload successfully or failed to server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.BeforeRemove">
            <summary>
            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.BeforeUpload">
            <summary>
            Triggers when the upload process before. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Canceling">
            <summary>
            Fires if cancel the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Change">
            <summary>
            Triggers when changes occur in uploaded file list by selecting or dropping files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkFailure">
            <summary>
            Fires if the chunk file failed to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkSuccess">
            <summary>
            Fires when the chunk file uploaded successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkUploading">
            <summary>
            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Clearing">
            <summary>
            Triggers before clearing the items in file list when clicking "clear".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Created">
            <summary>
            Triggers when the Uploader is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Failure">
            <summary>
            Triggers when the AJAX request fails on uploading or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.FileListRendering">
            <summary>
            Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Pausing">
            <summary>
            Fires if pause the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Progress">
            <summary>
            Triggers when uploading a file to the server using the AJAX request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Removing">
            <summary>
            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Rendering">
            <summary>
            DEPRECATED-Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Resuming">
            <summary>
            Fires if resume the paused chunk file upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Selected">
            <summary>
            Triggers after selecting or dropping the files by adding the files in upload queue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Success">
            <summary>
            Triggers when the AJAX request gets success on uploading files or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Uploading">
            <summary>
            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AllowedExtensions">
            <summary>
            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions
            with comma separators.
            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as ".jpg,.png".</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AsyncSettings">
            <summary>
            Configures the save and remove URL to perform the upload operations in the server asynchronously.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AutoUpload">
            <summary>
            By default, the Uploader component initiates automatic upload when the files are added in upload queue.
            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>
            <para>The buttons "upload" and "clear" will be hided from file list when AutoUpload property is true.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Buttons">
            <summary>
            You can customize the default text of "browse, clear, and upload" buttons with plain text or HTML elements.
            The buttons' text can be customized from localization also.
            <para>If you configured both `Locale` and `Buttons` property,the Uploader component considers the `Buttons` property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with root element of the Uploader.
            One or more custom CSS classes can be added to a Uploader.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DirectoryUpload">
            <summary>
            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DropArea">
            <summary>
            Specifies the drop target to handle the drag-and-drop upload.
            By default, the Uploader creates wrapper around file input that will act as drop target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DropEffect">
            <summary>
            Specifies the drag operation effect to the Uploader component.
            <para> Possible values are.</para>
            <list type="bullet">
            <item>
            <term>Copy</term>
            </item>
            <item>
            <term>Move</term>
            </item>
            <item>
            <term>Link</term>
            </item>
            <item>
            <term>None</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.EnablePersistence">
            <summary>
            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.EnableRtl">
            <summary>
            Enable or disable rendering Uploader in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Files">
            <summary>
            Specifies the list of files that will be preloaded on rendering of Uploader component.
            The property used to view and remove the uploaded files from server.
            <para> By default, the files are configured with uploaded successfully state. The following properties are mandatory to configure the preload files:</para>
            <list type="bullet">
            <item>
            <term>Name</term>
            </item>
            <item>
            <term>Size</term>
            </item>
            <item>
            <term>Type</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the Uploader considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Locale">
            <summary>
            Specifies the global culture and localization of the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.MaxFileSize">
            <summary>
            Specifies the maximum allowed file size to be uploaded in bytes.
            The property used to make sure that you cannot upload too large files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.MinFileSize">
            <summary>
            Specifies the minimum file size to be uploaded in bytes.
            The property used to make sure that you cannot upload empty files and small files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Multiple">
            <summary>
            Specifies a boolean value that indicates whether the multiple files can be browsed or
            dropped simultaneously in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.SequentialUpload">
            <summary>
            By default, the file Uploader component is processing the multiple files simultaneously.
            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ShowFileList">
            <summary>
            Specifies a boolean value that indicates whether the default file list can be rendered.
            The property used to prevent default file list and design own template for file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Template">
            <summary>
            Specifies the HTML string that used to customize the content of each file in the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskBlurEventArgs">
            <summary>
            Interface for focus out event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Container">
            <summary>
            Returns the MaskedTextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.MaskedValue">
            <summary>
            Returns the value of the MaskedTextBox with the masked format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Value">
            <summary>
            Returns the value of MaskedTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskChangeEventArgs">
            <summary>
            Interface for changed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskChangeEventArgs.IsInteracted">
            <summary>
            Returns true when the value of MaskedTextBox is changed by user interaction. Otherwise, it returns false.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskFocusEventArgs">
            <summary>
            Interface for focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskFocusEventArgs.SelectionEnd">
            <summary>
            Returns selectionEnd value depends on mask length.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskFocusEventArgs.SelectionStart">
            <summary>
            Returns selectionStart value as zero by default.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskClientProps">
            <summary>
            Specifies the client properties of MaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Readonly">
            <summary>
            Specifies the read only property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Enabled">
            <summary>
            Specifies wheter the component in disabled state or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Locale">
            <summary>
            Specifies the locale property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.SelectionEnd">
            <summary>
            Specifies the selection range end property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.SelectionStart">
            <summary>
            Specifies the selection start property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Value">
            <summary>
            Specifies the value property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Mask">
            <summary>
            Specifies the mask property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.keyValue">
            <summary>
            Specifies the key value  provided.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.IsMultipleDelete">
            <summary>
            Specifies whether the single charcater or multiple characters get deleted.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PasteValue">
            <summary>
            Specifies the clipboard value.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PromptCharacter">
            <summary>
            Specifies the prompt character of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PlaceHolder">
            <summary>
            Specifies the placeholder of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.MaskedValue">
            <summary>
            SPecifies the value with mask literals.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.FloatLabelType">
            <summary>
            Specifies the floatlabel type of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.CustomRegExpCollec">
            <summary>
            Specifies the custom regex.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.HiddenMask">
            <summary>
            Specifies the mask literals with escape sequence and casing characters.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PromptMask">
            <summary>
            Specifies the mask literals.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox">
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Blur">
            <summary>
            Triggers when the SfMaskedTextBox has focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueChange">
            <summary>
            Triggers when the content of SfMaskedTextBox has changed and gets focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Created">
            <summary>
            Triggers when the SfMaskedTextBox component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Destroyed">
            <summary>
            Triggers when the SfMaskedTextBox component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Focus">
            <summary>
            Triggers when the SfMaskedTextBox gets focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ID">
            <summary>
            Specifies the id of the SfMaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.SfMaskedTextBoxEditContext">
            <summary>
            Specifies the edit context of MaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the SfMaskedTextBox. One or more custom CSS classes can be added to a SfMaskedTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnablePersistence">
            <summary>
            Enable or disable the persisting SfMaskedTextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the SfMaskedTextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the SfMaskedTextBox that the placeholder text floats above the SfMaskedTextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the SfMaskedTextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the SfMaskedTextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the SfMaskedTextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Locale">
            <summary>
            Specifies the global culture and localization of the SfMaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in SfMaskedTextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Readonly">
            <summary>
            Specifies the boolean value whether the SfMaskedTextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in SfMaskedTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value">
            <summary>
            Sets the content of the SfMaskedTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Width">
            <summary>
            Specifies the width of the SfMaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.TabIndex">
            <summary>
            Specifies the tab order of the SfMaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Mask">
            <summary>
            Sets a value that masks the MaskedTextBox to allow/validate the user input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.PromptChar">
            <summary>
            Gets or sets a value that will be shown as a prompting symbol for the masked value.
            The symbol used to show input positions in the MaskedTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CustomCharacters">
            <summary>
            Sets the collection of values to be mapped for non-mask elements(literals)
            which have been set in the mask of MaskedTextBox.
             <para>In the below example, non-mask elements "P" accepts values
            "P" , "A" , "p" , "a" and "M" accepts values "M", "m" mentioned in the custom characters collection.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.MaskedTextBoxParent">
            <summary>
            Parent component of Numeric TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetMaskedValue">
            <summary>
            Returns the value of MaskedTextBox with respective mask.
            </summary>
            <returns>The value with mask literals.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusIn">
            <summary>
            Sets the focus to SfMaskedTextBox component for interaction.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusAsync">
            <summary>
            Sets the focus to SfMaskedTextBox component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusOut">
            <summary>
            Remove the focus from SfMaskedTextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusOutAsync">
            <summary>
            Remove the focus from SfMaskedTextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetPersistData">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdatePasteValue(Syncfusion.Blazor.Inputs.MaskClientProps)">
            <summary>
            Gets the clipboard values and its related properties from client.
            </summary>
            <param name="args">Specifies the mask client properties.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">Specifies the root class of the component.</param>
            <param name="containerClass">Specifies the container class o the component.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdateInputValue(System.String,System.Boolean)">
            <summary>
            Update the respective value property without mask literals.
            </summary>
            <param name="inputval">Specifies the value with mask literals.</param>
            <param name="isPaste">true if the user performs paste action , otherwise false.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangeEventArgs`1">
            <summary>
            Interface for change event.
            </summary>
            <typeparam name="T">Specifies the type of ChangeEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Event">
            <summary>
            Returns the event parameters from NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.IsInteracted">
            <summary>
            Returns true when the value of NumericTextBox is changed by user interaction. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.PreviousValue">
            <summary>
            Returns the previously entered value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Value">
            <summary>
            Returns the entered value of the NumericTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1">
            <summary>
            Interface for Blur event.
            </summary>
            <typeparam name="T">Specifies the type of NumericBlurEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Container">
            <summary>
            Returns the NumericTextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Value">
            <summary>
            Returns the value of the NumericTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1">
            <summary>
            Interface for Focus event.
            </summary>
            <typeparam name="T">Specifies the type of NumericFocusEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Container">
            <summary>
            Returns the NumericTextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Value">
            <summary>
            Returns the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Readonly">
            <summary>
            Specifies the component is in read-only mode or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Enabled">
            <summary>
            Specifies the component is in disabled state or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Locale">
            <summary>
            Specifies the locale property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.ValidateDecimalOnType">
            <summary>
            Specifies the ValidateDecimalOnType property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Decimals">
            <summary>
            Specifies the Decimals property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.DecimalSeparator">
            <summary>
            Specifies the DecimalSeparator property.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1">
            <summary>
            Interface for a class NumericTextBox.
            </summary>
            <typeparam name="T">Specifies the type of NumericTextBoxModel.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the NumericTextBox. One or more custom CSS classes can be added to a NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Currency">
            <summary>
            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Decimals">
            <summary>
            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.EnablePersistence">
            <summary>
            Enable or disable persisting NumericTextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the NumericTextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the NumericTextBox that the placeholder text floats above the NumericTextBox based on the below values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the NumericTextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the NumericTextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the NumericTextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Format">
            <summary>
            Specifies the number format that indicates the display format for the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.InputAttributes">
            <summary>
            <para>You can add the additional input attributes such as disabled, value, and more to the root element.</para>
            <para>If you configured both property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Locale">
            <summary>
            Specifies the global culture and localization of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in TextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Readonly">
            <summary>
            Specifies the boolean value whether the NumericTextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ShowSpinButton">
            <summary>
            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Step">
            <summary>
            Specifies the incremental or decremental step size for the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.StrictMode">
            <summary>
            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.
            <para>True- the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>
            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ValidateDecimalOnType">
            <summary>
            Specifies whether the length of the decimal should be restricted during typing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Value">
            <summary>
            Sets the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Width">
            <summary>
            Specifies the width of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.TabIndex">
            <summary>
            Specifies the tab order of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Max">
            <summary>
            Specifies a maximum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Min">
            <summary>
            Specifies a minimum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1">
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <typeparam name="TValue">Specifies the type of SfNumericTextBox.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Currency">
            <summary>
            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Placeholder">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Decimals">
            <summary>
            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Format">
            <summary>
            Specifies the number format that indicates the display format for the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ShowSpinButton">
            <summary>
            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Step">
            <summary>
            Specifies the incremental or decremental step size for the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.StrictMode">
            <summary>
            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.
            <para>True - the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>
            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ValidateDecimalOnType">
            <summary>
            Specifies whether the length of the decimal should be restricted during typing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Max">
            <summary>
            Specifies a maximum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Min">
            <summary>
            Specifies a minimum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.NumericTextBoxParent">
            <summary>
            Parent component of DataManager.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Decrement(`0)">
            <summary>
            Decrements the NumericTextBox value with specified step value.
            </summary>
            <param name="step">Specifies the value used to decrement the NumericTextBox value. If its not given then numeric value will be decremented based on the step property value.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.DecrementAsync(`0)">
            <summary>
            Decrements the NumericTextBox value with specified step value.
            </summary>
            <param name="step">Specifies the value used to decrement the NumericTextBox value. If its not given then numeric value will be decremented based on the step property value.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusIn">
            <summary>
            Sets the focus to the NumericTextBox component for interaction.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusAsync">
            <summary>
            Sets the focus to the NumericTextBox component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusOut">
            <summary>
            Remove the focus from the NumericTextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusOutAsync">
            <summary>
            Remove the focus from the NumericTextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetPersistData">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetText">
            <summary>
            Returns the value of NumericTextBox with the format applied to the NumericTextBox.
            </summary>
            <returns>The input element value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetFormattedText">
            <summary>
            Returns the value of NumericTextBox with the format applied to the NumericTextBox.
            </summary>
            <returns>The input element value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Increment(`0)">
            <summary>
            Increments the NumericTextBox value with the specified step value.
            <param name="step">Specifies the value used to increment the NumericTextBox value.if its not given then numeric value will be incremented based on the step property value.</param>
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.IncrementAsync(`0)">
            <summary>
            Increments the NumericTextBox value with the specified step value.
            <param name="step">Specifies the value used to increment the NumericTextBox value.if its not given then numeric value will be incremented based on the step property value.</param>
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.InvokePasteHandler(System.String)">
            <summary>
            Invoke the event, while paste the value to input element.
            </summary>
            <param name="beforeValue">Specifies the previous element value.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ServerAction(System.String,System.EventArgs,System.String)">
            <summary>
            Invokable the increment/decrement actions.
            </summary>
            <param name="action">Specifies the action.</param>
            <param name="args"><see cref="T:System.EventArgs"/> arguments.</param>
            <param name="currentInputValue">Specifies the input value</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ServerupdateValue(`0,System.EventArgs)">
            <summary>
            Invokable the component value.
            </summary>
            <returns>Task.</returns>
            <param name="value">Specifies the value.</param>
            <param name="args"><see cref="T:System.EventArgs"/> arguments.</param>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ContainerClass">
            <summary>
            Specifies the class value that is appended to container of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.RootClass">
            <summary>
            Gets or Set the component class to element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.IsFocus">
            <summary>
            Specifies the input is focused state.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.InvokeInputEvent">
            <summary>
            Bind the input event to the input element for enabled clear button and floatlabel to the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1">
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <typeparam name="TValue">Specifies the type of SfNumericTextBox.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.BaseParent">
            <summary>
            Specifies the base parent of SfNumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Blur">
            <summary>
            Triggers when the NumericTextBox got focus out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.ValueChange">
            <summary>
            Triggers when the value of the NumericTextBox changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Created">
            <summary>
            Triggers when the NumericTextBox component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Destroyed">
            <summary>
            Triggers when the NumericTextBox component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Focus">
            <summary>
            Triggers when the NumericTextBox got focus in.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorRange">
            <summary>
            This class represent the color, start and end position of slider track.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.ChildContent">
            <summary>
            Get and set the Slider.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.Color">
            <summary>
            Get and set the Color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.Start">
            <summary>
            Get and set the start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.End">
            <summary>
            Get and set the End.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.ColorRange.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task" representing the asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderColorRanges">
            <summary>
            Specifies the collections of colors to the slider track based on start and end value of each color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent">
            <summary>
            Get and set the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderColorRanges.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderOrientation">
            <summary>
             Holds slider component's different orientation options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderOrientation.Horizontal">
            <summary>
            Specifies the slider rendering position as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderOrientation.Vertical">
            <summary>
            Specifies the slider rendering position as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderType">
            <summary>
            Holds slider component's different options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.Default">
            <summary>
            Specifies the slider type as Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.MinRange">
            <summary>
            Specifies the slider type as MinRange.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.Range">
            <summary>
            Specifies the slider type as Range.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Placement">
            <summary>
            Holds slider component's Ticks Placement options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.None">
            <summary>
            This enum value will restrict the ticks element rendering.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.Before">
            <summary>
            This is used to rendering tiks element before the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.After">
            <summary>
            This is used to rendering tiks element after the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.Both">
            <summary>
            This is used to rendering tiks element before and after the slider track.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TooltipPlacement">
            <summary>
            Holds slider component's Tooltip Placement options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipPlacement.Before">
            <summary>
            This is used to render the tooltip element before the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipPlacement.After">
            <summary>
            This is used to render the tooltip element after the slider track.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TooltipShowOn">
            <summary>
            Holds slider component's Tooltip ShowOn options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Auto">
            <summary>
            This is used to display the tooltip while click / focus the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Focus">
            <summary>
            This is used to display the tooltip while focus the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Hover">
            <summary>
            This is used to display the tooltip while hover the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Always">
            <summary>
            This is used to display the tooltip until new actions occurred in slider elemenet.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider">
            <summary>
            Interface for holding slider properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Slider">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ColorRange">
            <summary>
            Get and set the ColorRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.CssClass">
            <summary>
            Get and set the CssClass.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.CustomValues">
            <summary>
            Get and set the CustomValues.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnableAnimation">
            <summary>
            Get and set the EnableAnimation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnableHtmlSanitizer">
            <summary>
            Get and set the EnableHtmlSanitizer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnablePersistence">
            <summary>
            Get and set the EnablePersistence.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnableRtl">
            <summary>
            Get and set the EnableRtl.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Enabled">
            <summary>
            Get and set the Enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Limits">
            <summary>
            Get and set the Limits.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Locale">
            <summary>
            Get and set the Locale.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Max">
            <summary>
            Get and set the Max Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Min">
            <summary>
            Get and set the Min Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Orientation">
            <summary>
            Get and set the Orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ReadOnly">
            <summary>
            Get and set the ReadOnly.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ShowButtons">
            <summary>
            Get and set the ShowButtons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Step">
            <summary>
            Get and set the Step.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Ticks">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Tooltip">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Type">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Width">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ID">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Updates the Child Properties.
            </summary>
            <param name="key">key.</param>
            <param name="value">value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.GetLimitData">
            <summary>
            Get the Limit Data.
            </summary>
            <returns>Limit.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.TriggeredTicksRendered(Microsoft.AspNetCore.Components.ElementReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Triggers after the ticks rendered.
            </summary>
            <param name="ticksWrapperRef">ticksWrapperRef.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.TriggeredTicksRendering(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Triggers while the ticks rendered.
            </summary>
            <param name="ticksRef">ticksRef.</param>
            <param name="text">text.</param>
            <param name="value">value.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender">
            <summary>
            This class is used to render ticks to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent">
            <exclude/>
            <summary>
            Public fiels ChildContent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.TicksClass">
            <summary>
            Class for the Tick.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement">
            <summary>
            Specifies the Partial class TickElement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.ClassName">
            <summary>
            Specifies the ClassName.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.Styles">
            <summary>
            Specifies the Styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.Value">
            <summary>
            Specifies the Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.FormattedValue">
            <summary>
            Specifies the FormattedValue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.IsSmallTick">
            <summary>
            Specifies the IsSmallTick.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>""Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfSlider`1">
            <summary>
            Partial class SfSlider.
            </summary>
            <typeparam name="TValue">Generic type parameter.</typeparam>.
            <summary>
            Partial class SfSlider.
            </summary>
            <summary>
            Specifies the partial class SfSlider.
            </summary>
            <summary>
            Specifies the partial class SfSlider.
            </summary>
            <summary>
            The Slider component allows the user to select a value or range of values
            in-between the min and max range, by dragging the handle over the slider bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ID">
            <summary>
            Sets id attribute for the slider element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.SliderEditContext">
            <summary>
            Specifies the ChildContent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ColorRange">
            <summary>
            Specifies the color to the slider based on given value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.CssClass">
            <summary>
            Specifies the custom classes to be added to the element used to customize the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.CustomValues">
            <summary>
            Specifies an array of slider values in number or string type.
            The min and max step values are not considered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnableAnimation">
            <summary>
            Enables/Disables the animation for slider movement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnableHtmlSanitizer">
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Enabled">
            <summary>
            Enables or disables the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Limits">
            <summary>
            Specified the limit within which the slider to be moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Max">
            <summary>
            Specifies the maximum value of the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Min">
            <summary>
            Specifies the minimum value of the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Orientation">
            <summary>
             Specifies whether to render the slider in vertical or horizontal orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ReadOnly">
            <summary>
            Specifies whether the render the slider in read-only mode to restrict any user interaction.
            The slider rendered with user defined values and can’t be interacted with user actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ShowButtons">
            <summary>
            Specifies whether to show or hide the increase/decrease buttons
            of Slider to change the slider value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Step">
            <summary>
            Specifies the step value for each value change when the increase / decrease
             button is clicked or on arrow keys press or on dragging the thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Ticks">
            <summary>
            It is used to render the slider ticks options such as placement and step values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Tooltip">
            <summary>
            Specifies the visibility, position of the tooltip over the slider element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Type">
            <summary>
            Defines the type of the Slider. The available options are:
              Default - Allows to a single value in the Slider.
              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.
              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Value">
            <summary>
            It is used to denote the current value of the Slider.
            The value should be specified in array of number when render Slider type as range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ValueChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Width">
            <summary>
            Specifies the width of the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.IsImmediateValue">
            <summary>
            Specifies whether the value need to be updated at the time of dragging slider handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.HtmlAttributes">
            <summary>
            Used to specify an additional html attributes such as styles, class, and more to the root element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.Reposition">
            <summary>
            This method is used to reposition slider.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.RepositionAsync">
            <summary>
            This method is used to reposition slider.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Slider">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SetTickPosition(Syncfusion.Blazor.Inputs.TicksValues)">
            <summary>
            Method which sets the tick's position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SetLocale">
            <summary>
            Set Locale value for button.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetProperties">
            <summary>
            Get Public property information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update Child Property Information.
            </summary>
            <exclude/>
            <param name="key">key.</param>
            <param name="value">value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetSliderValue">
            <summary>
            Get Slider Value.
            </summary>
            <returns>sliderValue.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetLimitData">
            <summary>
            Get Slider Limits data.
            </summary>
            <exclude/>
            <returns>SliderLimits().</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetTicksData">
            <summary>
            Get Slider ticks data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetDefaultTickValue">
            <summary>
            Get Slider ticks default data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.DynamicPropertyChange">
            <summary>
            Handling Dynamic Property changes.
            </summary>
            <exclude/>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.UpdateValue(`0,System.Int32)">
            <summary>
            Update Value Property.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <param name="activeHandle">activeHandle.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggerEvent(Syncfusion.Blazor.Inputs.ChangeEventData{`0})">
            <summary>
            Trigger onChange / Value change event.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TooltipHandle(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Slider Handle Value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnOpen(Syncfusion.Blazor.Popups.TooltipEventArgs)">
            <summary>
            update tooltip position.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.IncreaseValue">
            <summary>
            Increase Slider Handle Value.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.DecreaseValue">
            <summary>
            Decrese Slider Value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggeredTicksRendered(Microsoft.AspNetCore.Components.ElementReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calling Ticks Rendered Event.
            </summary>
            <param name="ticksWrapperRef">args.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggeredTicksRendering(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calling Ticks Rendering Event.
            </summary>
            <param name="ticksRef">ticksRef.</param>
            <param name="text">text.</param>
            <param name="value">sliderValue.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SerializeModel(Syncfusion.Blazor.Inputs.SfSlider{`0})">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.CloseTooltip">
            <summary>
            Closes the Tooltip Element.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1">
            <summary>
            It is used to denote the Slider Change/Changed Event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Action">
            <summary>
            It is used to get the action applied on the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Name">
            <summary>
            It is used to get the action applied on the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.IsInteracted">
            <summary>
            It is used to check whether the event triggered is via user or programmatic way.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.PreviousValue">
            <summary>
            It is used to get the previous value of the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Text">
            <summary>
            It is used to get the current text or formatted text of the Slider, which is placed in tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Value">
            <summary>
            It is used to get the current value of the Slider.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTickEventArgs">
            <summary>
            It is used to denote the TicksRender event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.Text">
            <summary>
            It is used to get the label text of the tick.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.TickElement">
            <summary>
            It is used to get the current tick element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.TickElementRef">
            <summary>
            It is used to get the current tick element reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.Value">
            <summary>
            It is used to get the value of the tick.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.HtmlAttributes">
            <summary>
            It is used to customize tick elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs">
            <summary>
            It is used to denote the ticks rendered Event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TickElements">
            <summary>
            It returns the collection of tick elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TickElementsRef">
            <summary>
            It returns the collection of tick elements as a reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TicksWrapper">
            <summary>
            It returns the container of the ticks element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TicksContainerRef">
            <summary>
            It returns the container of the ticks element as a reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.HtmlAttributes">
            <summary>
            It is used to customize ticks parent element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1">
            <summary>
            It is used to denote the TooltipChange Event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1.Text">
            <summary>
            It is used to get the text shown in the Slider tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1.Value">
            <summary>
            It is used to get the value of the Slider.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorRangeDataModel">
            <summary>
            class for holding ColorRange properties arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.Color">
            <summary>
            It is used to set the color in the slider bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.End">
            <summary>
            It is used to get the end value for applying color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.Start">
            <summary>
            It is used to get the starting value for applying color.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PersistenceValues`1">
            <summary>
            Class that holds the persistence property details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TicksValues">
            <summary>
            Class that holds the tick's position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangeEventData`1">
            <summary>
            Class that holds the previous and currentValue of slider component.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.PreviousValue">
            <summary>
            Specifies the PreviousValue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.Value">
            <summary>
            Specifies the Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.IsValueChanged">
            <summary>
            Specifies the isValueChanged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderEvents`1">
            <summary>
            Configure handlers to handle the events of the Slider component.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.OnChange">
            <summary>
            We can trigger change event whenever Slider value is changed.
             In other term, this event will be triggered while drag the slider thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.ValueChange">
            <summary>
            Fires whenever the Slider value is changed.
            In other term, this event will be triggered, while drag the slider thumb completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.Created">
            <summary>
            Triggers when the Slider is successfully created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.TicksRendered">
            <summary>
            Triggers when the ticks are rendered on the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.TicksRendering">
            <summary>
            Triggers on rendering the ticks element in the Slider,
            which is used to customize the ticks labels dynamically.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.OnTooltipChange">
            <summary>
            Triggers when the Sider tooltip value is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderEvents`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderLimitData">
            <summary>
            This class is used to set limit bar to slider component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderLimits">
            <summary>
            This class is used to set limit bar to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.Parent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.Enabled">
            <summary>
            It is used to enable the limit in the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.EndHandleFixed">
            <summary>
            It is used to lock the second handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MaxEnd">
            <summary>
            It is used to set the maximum end limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MaxStart">
            <summary>
            It is used to set the maximum start limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MinEnd">
            <summary>
            It is used to set the minimum end limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MinStart">
            <summary>
            It is used to set the minimum start limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.StartHandleFixed">
            <summary>
            It is used to lock the first handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTicks">
            <summary>
            This class is used to render ticks to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.Format">
            <summary>
            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.LargeStep">
            <summary>
            It is used to denote the distance between two major (large) ticks from the scale of the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.Placement">
            <summary>
            It is used to denote the position of the ticks in the Slider. The available options are:.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.ShowSmallTicks">
            <summary>
            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.SmallStep">
            <summary>
            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderTicks.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTicksData">
            <summary>
            This class is used to render ticks to slider component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTooltip">
            <summary>
            This class is used to set a tooltip for slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.CssClass">
            <summary>
            It is used to customize the Tooltip which accepts custom CSS class names that define
             specific user-defined styles and themes to be applied on the Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.Format">
            <summary>
            It is used to customize the Tooltip content to the desired format
             using internationalization or events (custom formatting).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.IsVisible">
            <summary>
            It is used to show or hide the Tooltip of Slider Component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.Placement">
            <summary>
            It is used to denote the position for the tooltip element in the Slider. The available options are:
              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.
              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.ShowOn">
            <summary>
            It is used to determine the device mode to show the Tooltip.
            If it is in desktop, it will show the Tooltip content when hovering on the target element.
            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderTooltip.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTooltipData">
            <summary>
            This class is used to set a tooltip for slider component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangedEventArgs">
            <summary>
            Interface for changed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.IsInteracted">
            <summary>
            Returns the original event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.IsInteraction">
            <summary>
            DEPRECATED-Returns the original event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.PreviousValue">
            <summary>
            Returns the previously entered value of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusInEventArgs">
            <summary>
            Interface for focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusOutEventArgs">
            <summary>
            Interface for focus out event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.InputEventArgs">
            <summary>
            Interface for input event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.PreviousValue">
            <summary>
            Returns the previously updated value of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TextBoxModel">
            <summary>
            Interface for a class TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Autocomplete">
            <summary>
            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.
            <para>By default, autocomplete is enabled for TextBox.</para>
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.EnablePersistence">
            <summary>
            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Locale">
            <summary>
            Specifies the global culture and localization of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Multiline">
            <summary>
            Specifies a boolean value that enables or disables the multiline on the TextBox.
            <para>The TextBox changes from a single line to multiline when enabling this multiline mode.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in TextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Type">
            <summary>
            Specifies the behavior of the TextBox such as text, password, email, and more.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Value">
            <summary>
            Sets the content of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfTextBox">
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Blur">
            <summary>
            Triggers when the TextBox has focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ValueChange">
            <summary>
            Triggers when the content of TextBox has changed and gets focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Created">
            <summary>
            Triggers when the TextBox component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Destroyed">
            <summary>
            Triggers when the TextBox component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Focus">
            <summary>
            Triggers when the TextBox gets focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Input">
            <summary>
            Triggers each time when the value of TextBox has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Autocomplete">
            <summary>
            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.
            <para>By default, autocomplete is enabled for TextBox.</para>
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Placeholder">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Multiline">
            <summary>
            Specifies a boolean value that enables or disables the multiline on the TextBox.
            The TextBox changes from a single line to multiline when enabling this multiline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Type">
            <summary>
            Specifies the behavior of the TextBox such as text, password, email, and more.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.TextBoxParent">
            <summary>
            Parent component of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.AddIcon(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adding the icons to the TextBox component.
            </summary>
            <param name="position">The adding icons to the component based on position for prepend/append.</param>
            <param name="icons">The icons class is added to icon element.</param>
            <param name="events">The icon events are added to the events element</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.AddIconAsync(System.String,System.String)">
            <summary>
            Adding the icons to the TextBox component.
            </summary>
            <param name="position">The adding icons to the component based on position for prepend/append.</param>
            <param name="icons">The icons class is added to icon element.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusIn">
            <summary>
            Sets the focus to TextBox component for interaction.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusAsync">
            <summary>
            Sets the focus to TextBox component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusOut">
            <summary>
            Remove the focus from TextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusOutAsync">
            <summary>
            Remove the focus from TextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.GetPersistData">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.InvokeInputEvent">
            <summary>
            Bind the input event to the input element for enabled clear button and floatlabel to the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">Specifies the root class of the component.</param>
            <param name="containerClass">Specifies the container class of the component.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfUploader">
            <summary>
            The uploader component is useful to upload images, documents, and other files to server.
            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.
            </summary>
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
            <summary>
            The uploader component is useful to upload images, documents, and other files to server.
            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ID">
            <summary>
            Specifies the id of the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AllowedExtensions">
            <summary>
            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions
            with comma separators.
            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as ".jpg,.png".</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AsyncSettings">
            <summary>
            Configures the save and remove URL to perform the upload operations in the server asynchronously.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AutoUpload">
            <summary>
            By default, the Uploader component initiates automatic upload when the files are added in upload queue.
            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>
            <para>The buttons "upload" and "clear" will be hided from file list when AutoUpload property is true.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Buttons">
            <summary>
            You can customize the default text of "browse, clear, and upload" buttons with plain text or HTML elements.
            The buttons' text can be customized from localization also.
            <para>If you configured both Locale and Buttons property,the Uploader component considers the Buttons property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with root element of the Uploader.
            One or more custom CSS classes can be added to a Uploader.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DirectoryUpload">
            <summary>
            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DropArea">
            <summary>
            Specifies the drop target to handle the drag-and-drop upload.
            By default, the Uploader creates wrapper around file input that will act as drop target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DropEffect">
            <summary>
            Specifies the drag operation effect to the Uploader component.
            <para> Possible values are .</para>
            <list type="bullet">
            <item>
            <term>Copy</term>
            </item>
            <item>
            <term>Move</term>
            </item>
            <item>
            <term>Link</term>
            </item>
            <item>
            <term>None</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.EnablePersistence">
            <summary>
            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.EnableRtl">
            <summary>
            Enable or disable rendering Uploader in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Files">
            <summary>
            Specifies the list of files that will be preloaded on rendering of Uploader component.
            The property used to view and remove the uploaded files from server.
            <para> By default, the files are configured with uploaded successfully state. The following properties are mandatory to configure the preload files:</para>
            <list type="bullet">
            <item>
            <term>Name</term>
            </item>
            <item>
            <term>Size</term>
            </item>
            <item>
            <term>Type</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Locale">
            <summary>
            Specifies the global culture and localization of the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.MaxFileSize">
            <summary>
            Specifies the maximum allowed file size to be uploaded in bytes.
            The property used to make sure that you cannot upload too large files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.MinFileSize">
            <summary>
            Specifies the minimum file size to be uploaded in bytes.
            The property used to make sure that you cannot upload empty files and small files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Multiple">
            <summary>
            Specifies a boolean value that indicates whether the multiple files can be browsed or
            dropped simultaneously in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AllowMultiple">
            <summary>
            Specifies a boolean value that indicates whether the multiple files can be browsed or dropped simultaneously in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.SequentialUpload">
            <summary>
            By default, the file Uploader component is processing the multiple files simultaneously.
            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ShowFileList">
            <summary>
            Specifies a boolean value that indicates whether the default file list can be rendered.
            The property used to prevent default file list and design own template for file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.TabIndex">
            <summary>
            Specifies the tab order of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Template">
            <summary>
            Specifies the HTML string that used to customize the content of each file in the list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PropertyInitialized">
            <summary>
            Method provides initial values to the properties.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PropertyParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BytesToSize(System.Double)">
            <summary>
            It is used to convert bytes value into kilobytes or megabytes depending on the size based
            on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
            </summary>
            <param name="bytes">Specifies the file size in bytes.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BytesToSizeAsync(System.Double)">
            <summary>
            It is used to convert bytes value into kilobytes or megabytes depending on the size based
            on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
            </summary>
            <param name="bytes">Specifies the file size in bytes.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Cancel(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Stops the in-progress chunked upload based on the file data.
            When the file upload is canceled, the partially uploaded file is removed from server.
            </summary>
            <param name="fileData">specifies the files data to cancel the progressing file.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CancelAsync(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Stops the in-progress chunked upload based on the file data.
            When the file upload is canceled, the partially uploaded file is removed from server.
            </summary>
            <param name="fileData">specifies the files data to cancel the progressing file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearAll">
            <summary>
            Clear all the file entries from list that can be uploaded files or added in upload queue.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearAllAsync">
            <summary>
            Clear all the file entries from list that can be uploaded files or added in upload queue.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CreateFileList(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Create the file list for specified files data.
            </summary>
            <param name="fileData">Specifies the file data.</param>
            <param name="isSelectedFile">true if the file is selected.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.GetFilesData(System.Nullable{System.Double})">
            <summary>
            Get the data of files which are shown in file list.
            </summary>
            <param name="index">Specifies the index.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.GetFilesDataAsync(System.Nullable{System.Double})">
            <summary>
            Get the data of files which are shown in file list.
            </summary>
            <param name="index">Specifies the index.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Pause(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.FileInfo},System.Nullable{System.Boolean})">
            <summary>
            Pauses the in-progress chunked upload based on the file data.
            </summary>
            <param name="fileData">specifies the files data to pause from uploading.</param>
            <param name="custom">Set true if used custom UI.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PauseAsync(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.FileInfo},System.Nullable{System.Boolean})">
            <summary>
            Pauses the in-progress chunked upload based on the file data.
            </summary>
            <param name="fileData">specifies the files data to pause from uploading.</param>
            <param name="custom">Set true if used custom UI.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Remove(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object)">
            <summary>
            Remove the uploaded file from server manually by calling the remove URL action.
            <para>If you pass an empty argument to this method, the complete file list can be cleared,
            otherwise remove the specific file based on its argument ("file_data").</para>
            </summary>
            <param name="fileData">specifies the files data to remove from file list/server.</param>
            <param name="customTemplate">Set true if the component rendering with customize template.</param>
            <param name="removeDirectly">Set true if files remove without removing event.</param>
            <param name="postRawFile">Set false, to post file name only to the remove action.</param>
            <param name="args"></param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemoveAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object)">
            <summary>
            Remove the uploaded file from server manually by calling the remove URL action.
            <para>If you pass an empty argument to this method, the complete file list can be cleared,
            otherwise remove the specific file based on its argument ("file_data").</para>
            </summary>
            <param name="fileData">specifies the files data to remove from file list/server.</param>
            <param name="customTemplate">Set true if the component rendering with customize template.</param>
            <param name="removeDirectly">Set true if files remove without removing event.</param>
            <param name="postRawFile">Set false, to post file name only to the remove action.</param>
            <param name="args"></param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Resume(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Resumes the chunked upload that is previously paused based on the file data.
            </summary>
            <param name="fileData">specifies the files data to resume the paused file.</param>
            <param name="custom"></param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ResumeAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Resumes the chunked upload that is previously paused based on the file data.
            </summary>
            <param name="fileData">specifies the files data to resume the paused file.</param>
            <param name="custom"></param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Retry(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retries the canceled or failed file upload based on the file data.
            <param name="fileData">specifies the files data to retry the canceled or failed file</param>
            <param name="fromcanceledStage">Set true to retry from canceled stage and set false to retry from initial stage.</param>
            <param name="custom"></param>
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RetryAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retries the canceled or failed file upload based on the file data.
            <param name="fileData">specifies the files data to retry the canceled or failed file</param>
            <param name="fromcanceledStage">Set true to retry from canceled stage and set false to retry from initial stage.</param>
            <param name="custom"></param>
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SortFileList(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Allows you to sort the file data alphabetically based on its file name clearly.
            </summary>
            <param name="filesData">specifies the files data for upload.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SortFileListAsync(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Allows you to sort the file data alphabetically based on its file name clearly.
            </summary>
            <param name="filesData">specifies the files data for upload.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Upload(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Allows you to call the upload process manually by calling save URL action.
            <para>To process the selected files (added in upload queue), pass an empty argument otherwise
            upload the specific file based on its argument.</para>
            </summary>
            <param name="files">specifies the files data for upload.</param>
            <param name="custom">specifies the custom files.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UploadAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Allows you to call the upload process manually by calling save URL action.
            <para>To process the selected files (added in upload queue), pass an empty argument otherwise
            upload the specific file based on its argument.</para>
            </summary>
            <param name="files">specifies the files data for upload.</param>
            <param name="custom">specifies the custom files.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.GetFileDetails(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.FileInfo})">
            <summary>
            Task which retrieves the file data.
            </summary>
            <param name="file">Specifies the file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CreateFileList(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.Internal.UploadFileDetails},System.Boolean)">
            <summary>
            Task which creates the file list.
            </summary>
            <param name="fileData">Specifies the file data.</param>
            <param name="isForm">true if the component inside form.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearAllFile">
            <summary>
            Task which clears the file list.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemoveFileData(System.Int32)">
            <summary>
            Method which removes the file data.
            </summary>
            <param name="index">Specifies the index.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UpdateServerFileData(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.Internal.UploadFileDetails},System.Boolean)">
            <summary>
            Method which update the file data  in server.
            </summary>
            <param name="fileData">Specifies the filedata.</param>
            <param name="isForm">true if the component rendered inside the form component.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SelectedEvent(Syncfusion.Blazor.Inputs.SelectedEventArgs)">
            <summary>
            Task which specifies the selected event.
            </summary>
            <param name="args">Selected event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemovingEvent(Syncfusion.Blazor.Inputs.RemovingEventArgs)">
            <summary>
            Task which specifies the RemovingEvent.
            </summary>
            <param name="args">Specifies the removing event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ActionCompleteEvent(Syncfusion.Blazor.Inputs.ActionCompleteEventArgs)">
            <summary>
            Task which specifies the action complete event.
            </summary>
            <param name="args">Specifies the action complete event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SuccessEvent(Syncfusion.Blazor.Inputs.SuccessEventArgs)">
            <summary>
            Task which specifies the success event .
            </summary>
            <param name="args">Specifies the success event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChangeEvent(Syncfusion.Blazor.Inputs.UploadChangeEventArgs)">
            <summary>
            Task which specifies the change event.
            </summary>
            <param name="args">Specifies the upload change event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.FailureEvent(Syncfusion.Blazor.Inputs.FailureEventArgs)">
            <summary>
            Task which specifies the failure event.
            </summary>
            <param name="args">FailureEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkFailureEvent(Syncfusion.Blazor.Inputs.FailureEventArgs)">
            <summary>
            Task which specifies the chunk failure event.
            </summary>
            <param name="args">FailureEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.FileListRenderingEvent(Syncfusion.Blazor.Inputs.FileListRenderingEventArgs)">
            <summary>
            Task which specifies the file list rendering event.
            </summary>
            <param name="args">FileListRenderingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ProgressEvent(Syncfusion.Blazor.Inputs.ProgressEventArgs)">
            <summary>
            Task which specifies the progress event.
            </summary>
            <param name="args">ProgressEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CancelingEvent(Syncfusion.Blazor.Inputs.CancelEventArgs)">
            <summary>
            Task which specifies the canceling event.
            </summary>
            <param name="args">CancelEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UploadingEvent(Syncfusion.Blazor.Inputs.UploadingEventArgs)">
            <summary>
            Task which specifies the uploading event.
            </summary>
            <param name="args">UploadingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkUploadingEvent(Syncfusion.Blazor.Inputs.UploadingEventArgs)">
            <summary>
            Task which specifies the chunk uploading event.
            </summary>
            <param name="args">UploadingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkSuccessEvent(Syncfusion.Blazor.Inputs.SuccessEventArgs)">
            <summary>
            Task which specifies the chunk success event.
            </summary>
            <param name="args">SuccessEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PausingEvent(Syncfusion.Blazor.Inputs.PauseResumeEventArgs)">
            <summary>
            Task which specifies the pausing event.
            </summary>
            <param name="args">PauseResumeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ResumingEvent(Syncfusion.Blazor.Inputs.PauseResumeEventArgs)">
            <summary>
            Task which specifies the resuming event.
            </summary>
            <param name="args">PauseResumeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BeforeUploadEvent(Syncfusion.Blazor.Inputs.BeforeUploadEventArgs)">
            <summary>
            Task which specifies the before upload event.
            </summary>
            <param name="args">BeforeUploadEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BeforeRemoveEvent(Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs)">
            <summary>
            Task specifies the before remove event.
            </summary>
            <param name="args">BeforeRemoveEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearingEvent(Syncfusion.Blazor.Inputs.ClearingEventArgs)">
            <summary>
            Task specifies the clearing event.
            </summary>
            <param name="args">ClearingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the firts time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update the dropdownlist fileds.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderAsyncSettings">
            <summary>
            Specifies the Uploader Events of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChunkSize">
            <summary>
            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.
            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.
            It must be specified in bytes value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RemoveUrl">
            <summary>
            Specifies the URL of remove action that receives the file information and handle the remove operation in server.
            <para>The remove action type must be POST request and define "RemoveFileNames" attribute to get file information that will be removed.
            This property is optional.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RetryAfterDelay">
            <summary>
            Specifies the delay time in milliseconds that the automatic retry happens after the delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RetryCount">
            <summary>
            Specifies the number of retries that the Uploader can perform on the file failed to upload.
            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.SaveUrl">
            <summary>
            Specifies the URL of save action that will receive the upload files and save in the server.
            <para>The save action type must be POST request and define the argument as same input name used to render the component.
            The upload operations could not perform without this property.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.OnParametersSetAsync">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderButtons">
            <summary>
            Customize the default text of browse, clear, and upload buttons with plain text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Browse">
            <summary>
            Specifies the text or html content to browse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Clear">
            <summary>
            Specifies the text or html content to clear button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Upload">
            <summary>
            Specifies the text or html content to upload button.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderButtons.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderButtons.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderButtonsProps">
            <summary>
            Specifes the uploader button properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderEvents">
            <summary>
            Specifies the Uploader Events of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnActionComplete">
            <summary>
            Triggers after all the selected files has processed to upload successfully or failed to server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.BeforeRemove">
            <summary>
            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.BeforeUpload">
            <summary>
            Triggers when the upload process before. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnCancel">
            <summary>
            Fires if cancel the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.ValueChange">
            <summary>
            Triggers when changes occur in uploaded file list by selecting or dropping files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkFailured">
            <summary>
            Fires if the chunk file failed to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkFailure">
            <summary>
            Fires if the chunk file failed to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkSuccess">
            <summary>
            Fires when the chunk file uploaded successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkUploadStart">
            <summary>
            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnClear">
            <summary>
            Triggers before clearing the items in file list when clicking "clear".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFailured">
            <summary>
            Triggers when the AJAX request fails on uploading or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFailure">
            <summary>
            Triggers when the AJAX request fails on uploading or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFileListRender">
            <summary>
            Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Paused">
            <summary>
            Fires if pause the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Progressing">
            <summary>
            Triggers when uploading a file to the server using the AJAX request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnRemove">
            <summary>
            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Rendering">
            <summary>
            DEPRECATED-Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnResume">
            <summary>
            Fires if resume the paused chunk file upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.FileSelected">
            <summary>
            Triggers after selecting or dropping the files by adding the files in upload queue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Success">
            <summary>
            Triggers when the AJAX request gets success on uploading files or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnUploadStart">
            <summary>
            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderEvents.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderFiles">
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderFiles.Files">
            <summary>
            Specifies the uploaded file list.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderFiles.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderUploadedFiles">
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Name">
            <summary>
            Specifies the name of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Size">
            <summary>
            Specifies the size of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Type">
            <summary>
            Specifies the type of the file.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent">
             <summary>
             Specifies the content that has to be passed.
             </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.UploaderLocale">
            <summary>
            Gets or sets the UploaderLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Browse">
            <summary>
            Gets or sets the Browse property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Clear">
            <summary>
            Gets or sets the Clear property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Upload">
            <summary>
            Gets or sets the Upload property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.DropFilesHint">
            <summary>
            Gets or sets the DropFilesHint property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidMaxFileSize">
            <summary>
            Gets or sets the InvalidMaxFileSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidMinFileSize">
            <summary>
            Gets or sets the InvalidMinFileSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidFileType">
            <summary>
            Gets or sets the InvalidFileType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.UploadFailedMessage">
            <summary>
            Gets or sets the UploadFailedMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.UploadSuccessMessage">
            <summary>
            Gets or sets the UploadSuccessMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.RemovedSuccessMessage">
            <summary>
            Gets or sets the RemovedSuccessMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.RemovedFailedMessage">
            <summary>
            Gets or sets the RemovedFailedMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InProgress">
            <summary>
            Gets or sets the InProgress property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.ReadyToUploadMessage">
            <summary>
            Gets or sets the ReadyToUploadMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Abort">
            <summary>
            Gets or sets the Abort property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Remove">
            <summary>
            Gets or sets the Remove property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Cancel">
            <summary>
            Gets or sets the Cancel property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Delete">
            <summary>
            Gets or sets the Delete property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.PauseUpload">
            <summary>
            Gets or sets the PauseUpload property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Pause">
            <summary>
            Gets or sets the Browse property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Resume">
            <summary>
            Gets or sets the Resume property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Retry">
            <summary>
            Gets or sets the Retry property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.FileUploadCancel">
            <summary>
            Gets or sets the FileUploadCancel property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.NumericTextBoxLocale">
            <summary>
            Gets or sets the NumericTextBoxLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.NumericTextBoxLocale.IncrementTitle">
            <summary>
            Gets or sets the IncrementTitle property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.NumericTextBoxLocale.DecrementTitle">
            <summary>
            Gets or sets the DecrementTitle property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.FormValidatorLocale">
            <summary>
            Gets or sets the FormValidatorLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Required">
            <summary>
            Gets or sets the Required property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Email">
            <summary>
            Gets or sets the Email property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Url">
            <summary>
            Gets or sets the Url property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Date">
            <summary>
            Gets or sets the Date property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.DateIso">
            <summary>
            Gets or sets the DateIso property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Creditcard">
            <summary>
            Gets or sets the Creditcard property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Number">
            <summary>
            Gets or sets the Number property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Digits">
            <summary>
            Gets or sets the Digits property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.MaxLength">
            <summary>
            Gets or sets the MaxLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.MinLength">
            <summary>
            Gets or sets the MinLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.RangeLength">
            <summary>
            Gets or sets the RangeLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Range">
            <summary>
            Gets or sets the Range property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Max">
            <summary>
            Gets or sets the Max property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Min">
            <summary>
            Gets or sets the Min property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Regex">
            <summary>
            Gets or sets the Regex property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Tel">
            <summary>
            Gets or sets the Tel property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Pattern">
            <summary>
            Gets or sets the Pattern property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.EqualTo">
            <summary>
            Gets or sets the EqualTo property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.ListViewEffect">
            <summary>
            An enum type that denotes the animation effects of the ListView. Available options are as follows None, SlideLeft, SlideDown, Zoom, Fade.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.ListViewEffect.None">
            <summary>
            Navigation of the nested list item occurs with out any animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.ListViewEffect.SlideLeft">
            <summary>
            Navigation of the nested list item occurs with a slide left animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.ListViewEffect.SlideDown">
            <summary>
            Navigation of the nested list item occurs with a slide down animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.ListViewEffect.Zoom">
            <summary>
            Navigation of the nested list item occurs with a zooming animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.ListViewEffect.Fade">
            <summary>
            Navigation of the nested list item occurs with a fading animation effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.CheckBoxPosition">
            <summary>
            An enum type that denotes the position of checkbox of the ListView. Available options are as follows Left and Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.CheckBoxPosition.Left">
            <summary>
            Positions the checkbox to the left of the text content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.CheckBoxPosition.Right">
            <summary>
            Positions the checkbox to the right of the text content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.SortOrder">
            <summary>
            An enum type that denotes the sort order of the ListView. Available options are as follows None, Ascending, Descending.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.SortOrder.None">
            <summary>
            The list view items will be displayed without performing any sorting.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.SortOrder.Ascending">
            <summary>
            Sorts the list view items will be displayed in the ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.SortOrder.Descending">
            <summary>
            Sorts the list view items will be displayed in the descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ListBaseFoundation`1">
            <exclude/>
            <summary>
            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.
            </summary>
            <typeparam name="T">The first generic type parameter.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFoundation`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFoundation`1.MapSettings(Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel{`0})">
            <summary>
            maps the default setting for the list generated.
            </summary>
            <param name="options">Specifies mapping options.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFoundation`1.GetConvertedData(`0,System.String)">
            <summary>
            get the converted data using field values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFoundation`1.GetSortedData">
            <summary>
            Sorts the given list items with complex datasource.
            </summary>
            <returns> Returns the sorted data.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFoundation`1.GetSortedArrayData">
            <summary>
            Sorts the given list items with primitive datasource.
            </summary>
            <returns> Returns the sorted array data.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFoundation`1.ComposeGroupData">
            <summary>
            groups the given list items with complex datasource.
            </summary>
            <returns> Returns the grouped data.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFoundation`1.InvokeItemCreate(`0,Syncfusion.Blazor.Lists.Internal.FieldsValueMapping{System.Collections.Generic.List{`0}},System.Boolean)">
            <summary>
            ItemCreated event invoke method.
            </summary>
            <param name="item">Specifies the item details.</param>
            <param name="mappedData">Specifies the mapped data.</param>
            <param name="isCreated">Specified the created parameter.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1">
            <exclude/>
            <summary>
            Component to create list from complex data for executing complex list items common functionalities.
            </summary>
            <typeparam name="TValue">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.ChildContent">
            <summary>
            Defines the content which has to be passed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.LiElementPosition">
            <summary>
            Defines the li element position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.ListId">
            <summary>
            Defines the id property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.ListBase">
            <summary>
            Gets or sets ListBase component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.MappedData">
            <summary>
            Gets or sets MappedData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.ListIsGroupItem">
            <summary>
            Gets or sets IsGroupItem field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.Data">
            <summary>
            Gets or sets Data field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.GroupItemData">
            <summary>
            Gets or sets GroupItemData field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.ListIsItemTemplate">
            <summary>
            Gets or sets the item template field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.ListIsGroupTemplate">
            <summary>
            Gets or sets the group item template field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.RandomID">
            <summary>
            Gets or sets the random id field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.Index">
            <summary>
            Gets or sets the index field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.ListClassNames">
            <summary>
            Gets or sets the class names field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.SfListBaseOptionModel">
            <summary>
            Gets or sets the ListBaseOptionModel field.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.OnParametersSet">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.CreateListFromComplex`1.OnAfterRender(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1">
            <summary>
            List base fields class.
            </summary>
            <typeparam name="TValue">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.ListBase">
            <summary>
            Specifies that fields that mapped in DataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.Child">
            <summary>
            Specifies that fields that mapped in Child.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.Enabled">
            <summary>
            Specifies that fields that mapped in Enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.GroupBy">
            <summary>
            Specifies that fields that mapped in GroupBy.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.HtmlAttributes">
            <summary>
            Specifies that fields that mapped in HtmlAttributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.IconCss">
            <summary>
            Specifies that fields that mapped in IconCss.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.Id">
            <summary>
            Specifies that fields that mapped in Id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.IsChecked">
            <summary>
            Specifies that fields that mapped in IsChecked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.IsVisible">
            <summary>
            Specifies that fields that mapped in IsVisible.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.Text">
            <summary>
            Specifies that fields that mapped in Text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.Tooltip">
            <summary>
            Specifies that fields that mapped in Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.Value">
            <summary>
            Specifies that fields that mapped in Value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.ListBaseFields`1.ComponentDispose">
            <summary>
            The virtual method to override the Dispose method at component side.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.Position">
            <summary>
            An enum type that denotes the expand and collapse icon positions. Available options are as follows Right, Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.Internal.Position.Right">
            <summary>
            Positions the expand collapse icon to the right end of the item.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.Internal.Position.Left">
            <summary>
            Positions the expand collapse icon to the left end of the item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ListElementReference">
            <exclude/>
            <summary>
            Class for data of each li element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementReference.ElementId">
            <summary>
            It is used to denote the element Id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementReference.Key">
            <summary>
            It is used to denote the datasource key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementReference.IsChecked">
            <summary>
            It is used to check whether the element is checked or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementReference.IsInteracted">
            <summary>
            It is used to check whether the element is interacted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementReference.Level">
            <summary>
            It denotes the level of the nested list items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ClassList">
            <summary>
            An class that holds item class list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Check">
            <summary>
            Specifies the check.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Checked">
            <summary>
            It is used to check the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Disabled">
            <summary>
            It is used to disable the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Group">
            <summary>
            It is used to group the elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.HasChild">
            <summary>
            It is used to check whether the li element has class child or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Icon">
            <summary>
            It is used to specify the icons for list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.IconWrapper">
            <summary>
            It is used to specify the icon wrapper class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Level">
            <summary>
            It is used to specify the level of the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Li">
            <summary>
            It is used to specify the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Text">
            <summary>
            It is used to specify the text for list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.TextContent">
            <summary>
            It is used to specify the text content for list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ClassList.Ul">
            <summary>
            It is used to specify UI element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1">
            <summary>
            An class that holds the field values Mapping.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.Child">
            <summary>
            Specifies the Child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.GroupBy">
            <summary>
            Specifies the GroupBy field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.IconCss">
            <summary>
            Specifies the IconCss field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.Id">
            <summary>
            Specifies the Id field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.Text">
            <summary>
            Specifies the Text field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.Value">
            <summary>
            Specifies the Value field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.Tooltip">
            <summary>
            Specifies the Tooltip field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.Enabled">
            <summary>
            Specifies the Enabled field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.IsChecked">
            <summary>
            Specifies the IsChecked field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.IsVisible">
            <summary>
            Specifies the IsVisible field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.FieldsValueMapping`1.HtmlAttributes">
            <summary>
            Specifies the HtmlAttributes field.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ListItemBase`1">
            <summary>
            An class that holds list Item properties related arguments.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.ListBase">
            <summary>
            Gets or sets ListBase component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.MappedData">
            <summary>
            Gets or sets MappedData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.IsGroupItem">
            <summary>
            Gets or sets IsGroupItem field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.Data">
            <summary>
            Gets or sets Data field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.GroupItemData">
            <summary>
            Gets or sets GroupItemData field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.IsItemTemplate">
            <summary>
            Gets or sets the item template field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.IsGroupTemplate">
            <summary>
            Gets or sets the group item template field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.RandomID">
            <summary>
            Gets or sets the random id field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.Index">
            <summary>
            Gets or sets the index field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.ClassNames">
            <summary>
            Gets or sets the class names field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListItemBase`1.ListBaseOptionModel">
            <summary>
            Gets or sets the ListBaseOptionModel field.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1">
            <summary>
            This class holds listbase properties related arguments.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.ListParent">
            <summary>
            Gets or sets ListParent component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.DataSource">
            <summary>
            Gets or sets DataSource field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.ListBaseOptionModel">
            <summary>
            Gets or sets ListBaseOptionModel field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.Level">
            <summary>
            Gets or sets ListBaseOptionModel field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.ItemCreating">
            <summary>
            Specifies the callback function that triggered before each list creation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.ItemCreated">
            <summary>
            Specifies the callback function that triggered after each list creation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.ItemTemplatePropertyName">
            <summary>
            Gets or sets item template property name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.GroupTemplatePropertyName">
            <summary>
            Gets or sets group template property name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.StartingPosition">
            <summary>
            Gets or sets starting position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.LiElementHeight">
            <summary>
            Gets or sets list element height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.EndPosition">
            <summary>
            Gets or sets end position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.Id">
            <summary>
            Gets or sets Id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.VirtualScrolling">
            <summary>
            Gets or sets the virtual scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.CheckBoxPosition">
            <summary>
            Gets or sets the checkbox position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.Template">
            <summary>
            Gets or sets the template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListCommonBase`1.GroupTemplate">
            <summary>
            Gets or sets the group template.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs`1">
            <summary>
            An class that holds item created event arguments.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs`1.CurData">
            <summary>
            Specifies the current data arguement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs`1.ListsDataSource">
            <summary>
            Specifies the datasource arguement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs`1.ListsFields">
            <summary>
            Specifies the fields arguement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs`1.ListsItem">
            <summary>
            Specifies the item arguement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs`1.ListsOptions">
            <summary>
            Specifies the options arguement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs`1.Text">
            <summary>
            Specifies the text arguement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs`1.Name">
            <summary>
            Specifies the name arguement.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1">
            <summary>
            Basic ListBase Options.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.IsSingleLevel">
            <summary>
            Specifies to data is singel level or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.AriaAttributes">
            <summary>
            Specifies the aria attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ExpandCollapse">
            <summary>
            Specifies to show collapsible icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ExpandIconClass">
            <summary>
            Specifies the customizable expand icon class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ExpandIconPosition">
            <summary>
            Specifies the expand/collapse icon position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.Fields">
            <summary>
            Specifies that fields that mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.GroupTemplate">
            <summary>
            Specifies the group header template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.HeaderTemplate">
            <summary>
            Specifies the ListView header template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ItemClass">
            <summary>
            Specifies when need to add additional LI item class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ItemCreated">
            <summary>
            Specifies the callback function that triggered after each list creation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ItemCreating">
            <summary>
            Specifies the callback function that triggered before each list creation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ModuleName">
            <summary>
            Specifies the customized class name based on their module name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ShowCheckBox">
            <summary>
            Specifies to show checkBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.ShowIcon">
            <summary>
            Specifies to show icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.SortOrder">
            <summary>
            Specifies the sort order.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel`1.Template">
            <summary>
            Specifies the item template.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive`1">
            <exclude/>
            /// <summary>
            Component for executing primitive list items common functionalities.
            </summary>
            <typeparam name="TValue">The generic type parameter.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive`1.GetAttributes">
            <summary>
            Method used for get attributes.
            </summary>
            <returns>return attributes for ul element.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.PrimitiveListItem`1">
            <summary>
            Component to create list from primitive data for executing primitive list items common functionalities.
            </summary>
            <typeparam name="TValue">The generic type parameter.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.PrimitiveListItem`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.PrimitiveListItem`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.SfListBase`1">
            <exclude/>
            <summary>
            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.
            </summary>
            /// <typeparam name="TValue">The generic type parameter.</typeparam>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.Internal.SfListBase`1.itemCreating">
            <summary>
            ItemCreating event of the listbase which triggers before creating every item of the list.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Lists.Internal.SfListBase`1.itemCreated">
            <summary>
            ItemCreating event of the listbase which triggers after every item of the list created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.SfListBase`1.ChildContent">
            <exclude/>
            <summary>
            Update child content from parent component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.SfListBase`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.DefaultListBaseOptions`1">
            <exclude/>
            <summary>
            List base default component model classes.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.DefaultListBaseOptions`1.GetDefaultFieldsMapping">
            <summary>
             maps and returns default listbase fields values to the listbase fields
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.Internal.DefaultListBaseOptions`1.GetModuleClassList(System.String)">
            <summary>
            sets and returns default classlist for listbase.
            </summary>
            <param name="moduleName">Specifies the module name.</param>
            <returns>returns the module class list.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CheckedItemDetails.ElementId">
            <summary>
            It is used to denote checked Element id details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.CheckedItemDetails.Key">
            <summary>
            It is used to denote the datasource key.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.Internal.ListElementDetails`1">
            <exclude/>
            <summary>
            Referring given li element data details.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementDetails`1.Child">
            <summary>
            Denotes the nested child data of the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementDetails`1.Id">
            <summary>
            Denotes the id of the item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementDetails`1.ItemData">
            <summary>
            Denotes the data of the list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementDetails`1.ItemText">
            <summary>
            Denotes the list item text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.Internal.ListElementDetails`1.Index">
            <summary>
            Denotes index of the list element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.SfListView`1">
            <summary>
            Component for executing complex list items common functionalities.
            </summary>
            <typeparam name="TValue">The generic type parameter.</typeparam>
            <summary>
            Configure member properties of the ListView component.
            </summary>
            <summary>
            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,
            that also has features such as data-binding, template, grouping and virtualization.
            </summary>
            <summary>
            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,
            that also has features such as data-binding, template, grouping and virtualization.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.ID">
            <summary>
            The `ID` property is used as a key to identify our element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.ChildContent">
            <exclude/>
            <summary>
            Update child content from parent component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.Animation">
            <summary>
            The `Animation` property provides an option to apply different
             animations to the ListView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.CheckBoxPosition">
            <summary>
            The `CheckBoxPosition` is used to set the position of the check box in a list item.
            By default, the `checkBoxPosition` is Left, which will appear before the text content in a list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.CssClass">
            <summary>
            The `CssClass` property is used to add a user-preferred class name in the root element of the ListView,
             using which you can customize the component (both CSS and functionality customization).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.DataSource">
            <summary>
            The `DataSource` provides the data to render the ListView component which is mapped with the fields of ListView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.ListDataSource">
            <summary>
            This dataSource property is used for internal functionalities.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.CheckedItems">
            <summary>
            The `CheckedItems` property is used to set the item that need to be checked or
            get the details of items that are currently checked in the ListView component.
            The `CheckedItems` property depends upon the value of `showCheckBox` property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.Enabled">
            <summary>
            If `Enabled` is set to true, the list items will be enabled. 
            You can disable the component using this property by setting its value as false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.EnableVirtualization">
            <summary>
            If `EnableVirtualization` is set to true, the ListView’s performance will improve when loading a large amount of data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.ListFields">
            <summary>
            The `Fields` is used to map keys from the dataSource which extracts the appropriate data from the dataSource
             with specified mapped with the column fields to render the ListView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.HeaderTitle">
            <summary>
            The `HeaderTitle` is used to set the title of the ListView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.Height">
            <summary>
            Defines the height of the ListView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.HtmlAttributes">
            <summary>
            The `HtmlAttributes` allows additional attributes such as id, class, etc., and
             accepts n number of attributes in a key-value pair format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.Query">
            <summary>
            The `Query` is used to fetch specific data from the data source by using the where and select keywords.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.ShowCheckBox">
            <summary>
            If `ShowCheckBox` is set to true, the checkbox will  be shown or hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.ShowHeader">
            <summary>
            If `ShowHeader` is set to true, the header of the ListView component will  be shown or hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.ShowIcon">
            <summary>
            If `ShowIcon` is set to true, the icon of the list item will  be shown or hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.SortOrder">
            <summary>
            The `SortOrder` is used to sort the data source. The available type of sort orders are,
             `None` - The data source will not be sorted.
             `Ascending` - The data source will be sorted in ascending order.
             `Descending` - The data source will be sorted in descending order.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.Width">
            <summary>
            Defines the width of the ListView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.GroupTemplate">
            <summary>
            The ListView has an option to custom design the group header title with the help of the groupTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.HeaderTemplate">
            <summary>
            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.Template">
            <summary>
            The ListView supports customizing the content of each list item with the help of template property.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.DisableItem(`0)">
            <summary>
            Disables the list items by passing the Id and text fields.
            listItem like fields: TValue { fieldName: fieldValue }.
            </summary>
            <param name="listItem">Specifies the list item arguement.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.DisableItemAsync(`0)">
            <summary>
            Disables the list items by passing the Id and text fields.
            listItem like fields: TValue { fieldName: fieldValue }.
            </summary>
            <param name="listItem">Specifies the list item arguement.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.EnableItem(`0)">
            <summary>
            Enables the disabled list items by passing the Id and text fields.
            listItem like fields: TValue { fieldName: fieldValue }.
            </summary>
            <param name="listItem">Specifies the list item arguement.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.EnableItemAsync(`0)">
            <summary>
            Enables the disabled list items by passing the Id and text fields.
            listItem like fields: TValue { fieldName: fieldValue }.
            </summary>
            <param name="listItem">Specifies the list item arguement.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetSelectedItem">
            <summary>
            Gets the details of the currently selected item from the list items.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetCheckedItems">
            <summary>
            Gets the details of the currently checked item from the list items.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetCheckedItemsAsync">
            <summary>
            Gets the details of the currently checked item from the list items.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.Remove(`0)">
            <exclude/>
            <summary>
            Remove Element from datasource based on given item details
            element like fields: TValue { fieldName: fieldValue }.
            </summary>
            <param name="listItem">Specifies the list item arguement.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.RemoveItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes item(s) from the ListView by passing the array of field objects.
            listItems like fields: TValue { fieldName: fieldValue }.
            </summary>
            <param name="listItems">Specifies the list items arguement.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.CheckItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check the items in ListView
            To check the specific listItem by passing the fields like : TValue { fieldName: fieldValue }
            To check all the listItem by passing empty argument.
            </summary>
            <param name="listItems">Specifies the list items arguement.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.CheckItemsAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check the items in ListView
            To check the specific listItem by passing the fields like : TValue { fieldName: fieldValue }
            To check all the listItem by passing empty argument.
            </summary>
            <param name="listItems">Specifies the list items arguement.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UncheckItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Uncheck the items in ListView.
            To uncheck the specific listItem by passing the fields like : TValue { fieldName: fieldValue }.
            To uncheck all the listItem by passing empty argument.
            </summary>
            <param name="listItems">Specifies the list item arguement.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UncheckItemsAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Uncheck the items in ListView.
            To uncheck the specific listItem by passing the fields like : TValue { fieldName: fieldValue }.
            To uncheck all the listItem by passing empty argument.
            </summary>
            <param name="listItems">Specifies the list item arguement.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.DataManager">
            <exclude/>
            <summary>
            Creating instance of object of DataManager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.ElementRef">
            <summary>
            Creating the element reference.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.SfListView`1.PersistenceValues">
            <summary>
            Referring the Persistence values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.PersistenceValues.AllCheckedItems">
            <summary>
            The `AllCheckedItems` property is used to set the list that need to be checked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.PersistenceValues.CssClass">
            <summary>
            The `CssClass` property is used to add a user-preferred class name in the root element of the ListView,
             using which we can customize the component (both CSS and functionality customization).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.PersistenceValues.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.PersistenceValues.Enable">
            <summary>
            If `Enabled` set to true, the list items are enabled.
            And, we can disable the component using this property by setting its value as false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SfListView`1.PersistenceValues.SortOrder">
            <summary>
            The `SortOrder` is used to sort the data source. The available type of sort orders are,
             `None` - The data source is not sorting.
             `Ascending` - The data source is sorting with ascending order.
             `Descending` - The data source is sorting with descending order.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.TriggerActionComplete(System.Collections.Generic.IEnumerable{`0})">
            <exclude/>
            <summary>
            trigger action complete event.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.ListChildDataSource(Syncfusion.Blazor.Lists.Internal.ListElementReference)">
            <exclude/>
            <summary>
            Rendering Nested List.
            </summary>
            <param name="reference"> specifies the reference parameter.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UpdateLiElementHeight(System.Double)">
            <exclude/>
            <summary>
            Update Li element height.
            </summary>
            <param name="height"> specifies the reference parameter.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.VirtualScrolling(System.Int32)">
            <exclude/>
            <summary>
            Update Li element based on scrolling Difference.
            </summary>
            <param name="listDifference"> specifies the list difference.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetComponenetHeight(System.Double)">
            <exclude/>
            <summary>
            Rendering the LI element based on window height in virtual scrolling.
            </summary>
            <param name="componentHeight"> specifies the component height.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UpdateData(System.Boolean,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.RecursiveUpdateData(System.Collections.Generic.List{`0},System.Boolean,System.String)">
            <summary>
             Specifies the method RecursiveUpdateData
            </summary>
            <param name="newDataSource"></param>
            <param name="isChecked"></param>
            <param name="id"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.TriggerBackEvent(Syncfusion.Blazor.Lists.Internal.ListElementReference)">
            <exclude/>
            <summary>
            Back event handler invoke method.
            </summary>
            <param name="args"> specifies the list element arguements.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.TriggerClickEvent(Syncfusion.Blazor.Lists.Internal.ListElementReference)">
            <exclude/>
            <summary>
            Click event handler invoke method.
            </summary>
            <param name="args"> specifies the list element arguements.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetPropertyValue(`0,System.String)">
            <summary>
            get fields property values from TValue tye data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UpdateTemplate(System.String,System.Object)">
            <summary>
            Update the template values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetPropertyStyle">
            <summary>
            Get style Attributes value.
            </summary>
            <returns> returns property styles.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UpdateStyle(System.String,System.String)">
            <summary>
            Get style Attributes value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.SerializeModel(Syncfusion.Blazor.Lists.SfListView{`0})">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetProperties">
            <summary>
            Get Public property information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UpdateVirtualIndex">
            <summary>
            Updates the virtual index value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UpdateListViewDataSource(System.Boolean,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates listview datasource.
            </summary>
            <param name="updateSortedData"> specifies the update sorted data.</param>
            <param name="dataSource"> specifies the data source.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.UpdateAfterRenderDataSource">
            <summary>
            Updating DataSource After rendering the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.DyanamicPropertyUpdate">
            <summary>
            Updates the virtual index value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.PersistProperties(Syncfusion.Blazor.Lists.SfListView{`0}.PersistenceValues)">
            <summary>
            Defines the properties of persisting component's state between page reloads.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetSortedData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Get the sorted data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.SfListView`1.GetLiElementData(Syncfusion.Blazor.Lists.Internal.ListElementReference,System.Boolean)">
            <summary>
            Returns list element related data based on given elementId and datasource key.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.ListViewEvents`1">
            <summary>
            Configure handlers to handle the events with the ListView component.
            </summary>
            <typeparam name="TValue">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewEvents`1.BaseParent">
            <summary>
            Specifies the base parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewEvents`1.OnActionBegin">
            <summary>
            Triggers when each ListView action begins.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewEvents`1.OnActionComplete">
            <summary>
            Triggers when each ListView action is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewEvents`1.OnActionFailure">
            <summary>
            Triggers when the data fetch request from the remote server fails.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewEvents`1.Clicked">
            <summary>
            Triggers when a list item in the component is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewEvents`1.OnBack">
            <summary>
            Triggers when the back icon is clicked in the nested list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewEvents`1.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewEvents`1.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.ListViewEvents`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.ListViewFieldSettings`1">
            <summary>
            Configure handlers to handle the field settings with the ListView component.
            </summary>
            <typeparam name="TValue">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.Child">
            <summary>
            The `Child` property is used for nested navigation of listed items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.Enabled">
            <summary>
            Specifies the enabled state of the ListView component.
            You can disable the component using this property by setting its value as false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.GroupBy">
            <summary>
            The `GroupBy` property is used to wraps the ListView elements into a group based on the field value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.HtmlAttributes">
            <summary>
            The `HtmlAttributes` allows additional attributes such as id, class, etc., and
             accepts n number of attributes in a key-value pair format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.IconCss">
            <summary>
            The `IconCss` is used to customize the icon fo the list items dynamically.
             You can add a specific image to the icons using the `iconCss` property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.Id">
            <summary>
            Specifies the id field mapped in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.IsChecked">
            <summary>
            The `IsChecked` property is used to check whether the list items are in a checked state or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.ListIsVisible">
            <summary>
            The `IsVisible` property is used to check whether the list items are in visible state or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.Text">
            <summary>
            The `Text` property is used to map the text value from the data source for each list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.Tooltip">
            <summary>
            The `Tooltip` is used to display the information about the target element while hovering on list items.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.ListViewFieldSettings`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.ListViewTemplates`1">
            <summary>
            Configure templates of the ListView component.
            </summary>
            <typeparam name="TValue">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewTemplates`1.Template">
            <summary>
            The ListView component supports to customize the content of each list items with the help of Template property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewTemplates`1.GroupTemplate">
            <summary>
            Accepts the template design and assigns it to the group headers present in the ListView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ListViewTemplates`1.HeaderTemplate">
            <summary>
            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Lists.ListViewTemplates`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.ClickEventArgs`1">
            <summary>
            The class that holds click event arguments.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ClickEventArgs`1.ItemData">
            <summary>
            It denotes the clicked item dataSource JSON object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ClickEventArgs`1.Name">
            <summary>
            It denotes the event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ClickEventArgs`1.IsChecked">
            <summary>
            It is used to check whether the element is checked or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ClickEventArgs`1.Index">
            <summary>
            It denotes the index position of cliked element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ClickEventArgs`1.IsInteracted">
            <summary>
            Specifies that event has triggered by user interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ClickEventArgs`1.Text">
            <summary>
            It denotes the selected item text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ClickEventArgs`1.Cancel">
            <summary>
            It denotes the cancel argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ClickEventArgs`1.Level">
            <summary>
            It denotes the level of the nested list items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.BackEventArgs`1">
            <summary>
            The class that holds back event arguments.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.BackEventArgs`1.IsInteracted">
            <summary>
            Specifies that event has triggered by user interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.BackEventArgs`1.Level">
            <summary>
            It denotes the level of the nested list items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.ActionEventsArgs">
            <summary>
            The class that holds action event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ActionEventsArgs.Count">
            <summary>
            Return the total number of records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ActionEventsArgs.Name">
            <summary>
            Specify the Event Name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.ActionFailureEventsArgs">
            <summary>
            The class that holds action failure event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ActionFailureEventsArgs.Error">
            <summary>
            It denotes exception error.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.AnimationSettings">
            <summary>
            An interface that holds animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AnimationSettings.Duration">
            <summary>
            It is used to specify the time duration of transform object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AnimationSettings.Easing">
            <summary>
            It is used to specify the easing effect applied while transform.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AnimationSettings.Effect">
            <summary>
            It is used to specify the effect which is shown in sub list transform.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.SelectedItems`1">
            <summary>
            An interface that holds list selected item.
            </summary>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SelectedItems`1.Data">
            <summary>
            Specifies the selected item dataSource collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SelectedItems`1.Index">
            <summary>
            Specifies index of the selected element.
            Available only in virtualization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SelectedItems`1.ParentId">
            <summary>
            Specifies the hierarchical parent id collection of the current view.
            Available only in nested list with checkbox enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.SelectedItems`1.Text">
            <summary>
            Specifies the selected item text collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.AriaAttributesMapping">
            <summary>
            An class that holds item aria attributes mapping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AriaAttributesMapping.GroupItemRole">
            <summary>
            Specifies the item aria attributes mapping for GroupItemRole.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AriaAttributesMapping.ItemRole">
            <summary>
            Specifies the item aria attributes mapping for ItemRole.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AriaAttributesMapping.ItemText">
            <summary>
            Specifies the item aria attributes mapping for ItemText.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AriaAttributesMapping.Level">
            <summary>
            Specifies the item aria attributes mapping for Level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AriaAttributesMapping.ListRole">
            <summary>
            Specifies the item aria attributes mapping for ListRole.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.AriaAttributesMapping.WrapperRole">
            <summary>
            Specifies the item aria attributes mapping for WrapperRole.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Lists.ComposedItemModel`1">
            <summary>
            common class model for grouped list.
            </summary>
            <exclude/>
            <typeparam name="T">The generic type parameter.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ComposedItemModel`1.IsGroupItem">
            <summary>
            It used to check the list item is grouped item or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ComposedItemModel`1.Data">
            <summary>
            It used to specify the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ComposedItemModel`1.Key">
            <summary>
            It used to specify the key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ComposedItemModel`1.IsHeader">
            <summary>
            It used to check the group item is header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ComposedItemModel`1.Id">
            <summary>
            It used to specify the id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ComposedItemModel`1.Text">
            <summary>
            It used to specify the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Lists.ComposedItemModel`1.Items">
            <summary>
            It used to specify the items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse">
            <summary>
            Specifies the animation to appear while collapsing the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Effect">
            <summary>
            Specifies the animation effect for collapsing the Accordion item.
            Default animation is given as SlideUp for collapsing accordion animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationExpand">
            <summary>
            Specifies the animation to appear while expanding the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Effect">
            <summary>
            Specifies the animation effect for expanding the Accordion item.
            Default animation is given as SlideDown for expanding accordion animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationSettings">
            <summary>
            A class used for configuring the Accordion animation properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent">
            <summary>
            Child Content for the Accordion Animation Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.Collapse">
            <summary>
            Specifies the animation to appear while collapsing the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.Expand">
            <summary>
            Specifies the animation to appear while expanding the Accordion item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandMode">
            <summary>
            Specifies the option to expand single or multiple panel at a time.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandMode.Single">
            <summary>
            Denotes single panel expansion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandMode.Multiple">
            <summary>
            Denotes multiple panel expansion.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionEvents">
            <summary>
            Configure event handlers to handle the events with the Accordion component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Clicked">
            <summary>
            The event triggers when clicking anywhere within the Accordion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Created">
            <summary>
            The event triggers once the control rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Destroyed">
            <summary>
            The event triggers when the control gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Expanded">
            <summary>
            The event triggers after the item gets expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Expanding">
            <summary>
            The event triggers before the item gets expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Collapsed">
            <summary>
            The event triggers after the item gets collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Collapsing">
            <summary>
            The event triggers before the item gets collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItem">
            <summary>
            Defines accordion panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ChildContent">
            <summary>
            Child Content for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate">
            <summary>
            Sets the header to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate">
            <summary>
            Sets the content to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Content">
            <summary>
            Sets the text content to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.CssClass">
            <summary>
            Defines the single/multiple classes (separated by a space) that should be used for Accordion item customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Disabled">
            <summary>
            Specifies a value that indicates whether the accordion item is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Expanded">
            <summary>
            Specify a Boolean value that indicates whether the accordion panel is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Header">
            <summary>
            Sets the header text to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.IconCss">
            <summary>
            Defines an icon with the given custom CSS class that is to be rendered before the header text.
            Add the css classes to the `IconCss` property and write the css styles to the defined class to set the images/icons.
            Adding icon is applicable only to the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Visible">
            <summary>
            Specifies a Boolean value that indicates whether the accordion item is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Id">
            <summary>
            Sets Id attribute for accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ExpandedChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItems">
            <summary>
            A list of items that are used to configure the Accordion component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItems.ChildContent">
            <summary>
            Child Content for the Accordion items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItems.Items">
            <summary>
            Specifies the collection of items for rendering Accordion items.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionClickArgs">
            <summary>
            A class that holds options to control the accordion click action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.Item">
            <summary>
            Returns the current Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.OriginalEvent">
            <summary>
            Supplies information about a mouse event that is being raised.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandEventArgs">
            <summary>
            A class that holds options to control the expanding item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Cancel">
            <summary>
            Specifies a value that indicates to prevent the current action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Index">
            <summary>
            Returns the Accordion Item Index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.IsExpanded">
            <summary>
            Returns the expand or collapse state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Item">
            <summary>
            Returns the current Accordion Item Object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CollapseEventArgs">
            <summary>
            A class that holds options to control the collapsing item action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandedEventArgs">
            <summary>
            A class that holds options to control the expanded item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Index">
            <summary>
            Returns  the Accordion Item Index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.IsExpanded">
            <summary>
            Returns  the expand or collapse state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Item">
            <summary>
            Returns the current Accordion Item Object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CollapsedEventArgs">
            <summary>
            A class that holds options to control the collapsed item action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItemModel">
            <summary>
            A class that holds option for Accordion Items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.HeaderTemplate">
            <summary>
            Sets the header to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.ContentTemplate">
            <summary>
            Sets the content to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Content">
            <summary>
            Sets the text content to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.CssClass">
            <summary>
            Defines the single/multiple classes (separated by a space) that should be used for Accordion item customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Disabled">
            <summary>
            Specifies a value that indicates whether the accordion item is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Expanded">
            <summary>
            Specifies a Boolean value that indicates whether the accordion pane is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Header">
            <summary>
            Sets the header text to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.IconCss">
            <summary>
            Defines an icon with the given custom CSS class that is to be rendered before the header text.
            Add the css classes to the `IconCss` property and write the css styles to the defined class to set the images/icons.
            Adding icon is applicable only to the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Visible">
            <summary>
            Specifies a Boolean value that indicates whether the accordion item is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Id">
            <summary>
            Sets Id attribute for accordion item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfAccordion">
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ID">
            <summary>
            Sets ID attribute for the accordion element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ChildContent">
            <summary>
            Child Content for Accordion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Items">
            <summary>
            Gets or sets the accordion items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.LoadOnDemand">
            <summary>
            Enable or disable content of all the accordion are rendered on the initial load and maintained in the DOM.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandMode">
            <summary>
            Specifies the options to expand a single or multiple panels at a time.
            The possible values are:
            - Single: Sets to expand only one Accordion item at a time.
            - Multiple: Sets to expand more than one Accordion item at a time.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices">
            <summary>
            Specifies the index of items that is expanded on the initial load.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndicesChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Height">
            <summary>
            Specifies the height of the Accordion that can be represented in pixels/percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Width">
            <summary>
            Specifies the width of the Accordion that can be represented as pixels/percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.HtmlAttributes">
            <exclude/>
            <summary>
            Gets or sets the html attributes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.Select(System.Int32)">
            <summary>
            Sets focus to the specified index item header in Accordion.
            </summary>
            <param name="index">Number value that determines which item should be focused.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.SelectAsync(System.Int32)">
            <summary>
            Sets focus to the specified index item header in Accordion.
            </summary>
            <param name="index">Number value that determines which item should be focused.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.CreatedEvent">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnAccordionClick(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerExpandingEvent(System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerExpandedEvent(Syncfusion.Blazor.Navigations.ExpandEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerCollapsingEvent(System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerCollapsedEvent(Syncfusion.Blazor.Navigations.ExpandEventArgs)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender">
            <summary>
            Specifies the accordion item renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.Item">
            <summary>
            Gets or sets the accordion item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.ChildContent">
            <summary>
            Child content for menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the Menu container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items">
            <summary>
            Specifies menu items with its properties which will be rendered as ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.ShowItemOnClick">
            <summary>
            Specifies whether to show the sub menu or not on click.
            When set to true, the sub menu will open only on mouse click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnableScrolling">
            <summary>
            Specifies whether to enable / disable the scrollable option in Menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.CloseMenuAsync(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            To update the child properties
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.IconCss">
            <summary>
            Specifies the class to include icons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Id">
            <summary>
            Specifies the menu item id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Separator">
            <summary>
            Separator are either horizontal or vertical lines used to group menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Disabled">
            <summary>
            Specifies the menu item disable state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Hidden">
            <summary>
            Specifies the menu item hidden state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Text">
            <summary>
            Specifies the text of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Url">
            <summary>
            Specifies the URL of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.HtmlAttributes">
            <summary>
            Used to add additional attributes to the menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ToolbarContent">
            <summary>
            Specifies toolbar content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Item">
            <summary>
            Defines the toolbar item model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Index">
            <summary>
            Defines toolbar item index.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Dispose">
            <summary>
            Disposes unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor toolbar component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs">
            <summary>
            A class that holds options to control the toolbar item clicked action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.IsCloseIcon">
            <summary>
            Gets or sets the close icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.TargetParentDataIndex">
            <summary>
            Gets or sets the data index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.ToolbarItemIndex">
            <summary>
            Gets or sets the toolbar item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.IsPopupElement">
            <summary>
            Gets or sets the item from popup element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1">
            <summary>
            Specifies the complex list items.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.TreeOptions">
            <summary>
            Specifies the TreeOption field values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.HasChild">
            <summary>
            Specifies the treeview node has child or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.MappedData">
            <summary>
            Specifies the Treeview mapped data values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.RandomID">
            <summary>
            Specifies the Treeview node data id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.Index">
            <summary>
            Specifies the index position of Treeview node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.ListModel">
            <summary>
            Specifies the treeview list base option model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.ListData">
            <summary>
            Specifies the datasource of list element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.TreeNodeLevel">
            <summary>
            Specifies the tree node level of treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1">
            <summary>
            Specifies the ComplexCreateList.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListData">
            <summary>
            Specifies the datasource of list element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeOptions">
            <summary>
            Specifies the TreeOption field values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeItemCreating">
            <summary>
            Specifies the TreeItemCreating event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeNodeLevel">
            <summary>
            Specifies the tree node level of treeview nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListModel">
            <summary>
            Specifies the treeview list base option model.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.InvokeTreeItemCreating(`0,Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping{System.Collections.Generic.List{`0}},System.Int32)">
            <summary>
            Returns TreeItemCreatedArgs for a list item for which TreeItemCreating event invoked.
            </summary>
            <param name="item">"Specifies the item".</param>
            <param name="mappedData">"Specifies the mappedData".</param>
            <param name="nodeLevel">"Specifies the nodeLevel".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.MapSettings(Syncfusion.Blazor.Navigations.Internal.ListModel,System.Boolean)">
            <summary>
            Maps the default setting for the list generated.
            </summary>
            <param name="options">"Specifies the options field".</param>
            <param name="isField">"Specifies the isField attribute".</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListBasePropertyMapper`1">
            <summary>
            ListBase Property.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListBasePropertyMapper`1.PropertyMapper(`1,`1)">
            <summary>
            Specifies the property mapper.
            </summary>
            <param name="customizedProp">"Specifes the customised prop".</param>
            <param name="mappedProp">"Specifies the mapped property".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.GetDefaultListOptions">
            <summary>
            Sets and returns default listbase properties values to the listbase options.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1">
            <exclude/>
            <summary>
            Specifies the TreeViewListItems class.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1.TreeItemCreating">
            <summary>
            TreeItem creating.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1.ItemsCreating">
            <summary>
            ItemCreating variable.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1">
            <summary>
            Specifies the TreeOption class.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.ChildData">
            <summary>
            Specifies the Child data of node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.TreeViewFields">
            <summary>
            Specifies the Treeview fields value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsExpanded">
            <summary>
            Specifies the Treeview node is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsFullRowSelect">
            <summary>
            Specifies the fullrow selection enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IconClass">
            <summary>
            Specifies the IconClass of Treeview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsSelected">
            <summary>
            Specifies the node is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsChecked">
            <summary>
            Specifies the Treeview node checked or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.NodeLevel">
            <summary>
            Specifies the Treeview node level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsTree">
            <summary>
            Specifies the tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.NodeTemplate">
            <summary>
            Specifies the Treeview node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.FullRowNavigate">
            <summary>
            Specifies the full row navigate of Treeview node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsEdit">
            <summary>
            Specifies the editing mode in node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsDisabled">
            <summary>
            Specifies the node disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsLoaded">
            <summary>
            Specifies the node already loaded or not in DOM
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1">
            <summary>
            Specifies the TreeItemCreatedArgs.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.TreeOptions">
            <summary>
            Specifies the TreeOptions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.NodeLevel">
            <summary>
            Specifies the NodeLevel argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.ItemData">
            <summary>
            Specifies the ItemData argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Item">
            <summary>
            Specifies the Item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Options">
            <summary>
            Specifies the Options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Text">
            <summary>
            Specifies the Text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.FieldsMapping">
            <summary>
            Specifies the Treeview field mappings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Child">
            <summary>
            Specifies the child attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Enabled">
            <summary>
            Specifies the Enabled field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Expanded">
            <summary>
            Specifies the Expanded field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.HasChildren">
            <summary>
            Specifies the HasChildren field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.HtmlAttributes">
            <summary>
            Specifies the HtmlAttributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.IconCss">
            <summary>
            Specifies the IconCss field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Id">
            <summary>
            Specifies the Id field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.ImageAttributes">
            <summary>
            Specifies the ImageAttribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.ImageUrl">
            <summary>
            Specifies the ImageUrl field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.IsChecked">
            <summary>
            Specifies the IsChecked field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Selected">
            <summary>
            Specifies the Selected field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Text">
            <summary>
            Specifies the Text field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Tooltip">
            <summary>
            Specifies the Tooltip field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Url">
            <summary>
            Specifies the Url field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.UrlAttributes">
            <summary>
            Specifies the UrlAttributes field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Value">
            <summary>
            Specifies the value field attribute.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1">
            <summary>
            Specifies the field values Mapping.
            </summary>
            <typeparam name="T">"T".</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Child">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Enabled">
            <summary>
            Specifies the Enabled field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Expanded">
            <summary>
            Specifies the Expanded field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.HasChildren">
            <summary>
            Specifies the HasChildren field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.IconCss">
            <summary>
            Specifies the IconCss field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Id">
            <summary>
            Specifies the Id field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.ImageUrl">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.IsChecked">
            <summary>
            Specifies the IsChecked field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Selected">
            <summary>
            Specifies the Selected field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Text">
            <summary>
            Specifies the Text field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Tooltip">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Url">
            <summary>
            Specifies the URL field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.HtmlAttributes">
            <summary>
            Specifies the HtmlAttriibutes field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.ImageAttributes">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.UrlAttributes">
            <summary>
            Specifies the UrlAttributes field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Value">
            <summary>
            Specifies the Value field.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1">
            <summary>
            Specifies the item created event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.ItemData">
            <summary>
            Specifies the ItemData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.Item">
            <summary>
            Specifies the Item value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.Text">
            <summary>
            Specifies the Text of the item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping">
            <summary>
            Specifies the TreeFieldsMapping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.ParentID">
            <summary>
            Specifies the ParentId.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.DataManager">
            <summary>
            Specifies the item DataManager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.Query">
            <summary>
            Specifies the Query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.TableName">
            <summary>
            Specifies the TableName.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.Children">
            <summary>
            Specifies the Children.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ListModel">
            <summary>
            Specifies Treeview Options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ExpandCollapse">
            <summary>
            Specifies to show collapsible icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ExpandIconClass">
            <summary>
            Specifies the customizable expand icon class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.Fields">
            <summary>
            Specifies that fields that mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ItemNavigable">
            <summary>
            If set true to this property then the entire list will be navigate-able instead of text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ShowIcon">
            <summary>
            Specifies to show icon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel">
            <summary>
            Specifies class for expand / collapse animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel">
            <summary>
            Specifies the class for expand animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel.Effect">
            <summary>
            Specifies the animation effect for expanding the TreeView node.
            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel">
            <summary>
            Specifies the class for collapse animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel.Effect">
            <summary>
            Specifies the animation effect for collapsing the TreeView node.
            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsMultiSelect">
            <summary>
            Specifies the MultiSelect argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsCtrKey">
            <summary>
            Specifies the control key is pressed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsShiftKey">
            <summary>
            Specifies the shift key is pressed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.Nodes">
            <summary>
            Specifies the Node data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsInteracted">
            <summary>
            Specifies the nodes are selected in manual interaction or dynamic interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.Action">
            <summary>
            Specifies the action to be performed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.NodeData">
            <summary>
            Specifies the Node Data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs">
            <summary>
            Expand event args.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs.IsLoaded">
            <summary>
            Specifies the loaded argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs.NodeLevel">
            <summary>
            Specifies the Node level.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DragLi">
            <summary>
            Specifies the Drageed List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DropLi">
            <summary>
            Specifies the Dropped List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DropParentLi">
            <summary>
            Specifies the Dropped parent List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DragParentLi">
            <summary>
            Specifies the Dragged parent List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.Pre">
            <summary>
            Specifies the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.SrcTree">
            <summary>
            Specifies the Source Tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.IsExternalDrag">
            <summary>
            Specifies the external drag and drop is true or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ITreeView">
            <summary>
            Interface for SfTreeView component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ITreeView.UpdateAnimationProperties(Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings)">
            <summary>
            Update animation settings property.
            </summary>
            <param name="animationSettings">"Specifies the animationSettings parameter".</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType">
            <summary>
            An enum type that denotes the Treeview data source types.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.SelfReferential">
            <summary>
            Specifies 'SelfReferential' Data type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.Hierarchical">
            <summary>
            Specifies 'Hierarchical' Data type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.RemoteData">
            <summary>
            Specifies 'RemoteData' Data type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1">
            <summary>
            List generation of TreeView component.
            </summary>
            <typeparam name="TValue">"TValue paramater".</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">"First render".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GettingQuery(Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping,System.Object)">
            <summary>
            Getting Query values for Remote data source.
            </summary>
            <param name="mapper">"Specfies the mapper field".</param>
            <param name="value">"Specifies the value".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetQuery(Syncfusion.Blazor.Data.Query)">
            <summary>
            Update Cloned query value for Remote data binding.
            </summary>
            <param name="query">"Specifies the QUERY parameter".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.SerializeModel">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.AddNodeData(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Adding treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.CheckForRemoteHasChild(System.Collections.Generic.List{System.Object})">
            <summary>
            Update Has Child after remove operation in Remote Data
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.RemoveNodes(System.String[])">
            <summary>
            Removing treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetTreeViewData(System.String)">
            <summary>
            Return treeview node data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetRemoteNodeData(System.String)">
            <summary>
            Get the node data for remote data
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetNodeDetails(System.String)">
            <summary>
            Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1">
            <summary>
             A class used for configuring the TreeView fields setting properties.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue parameter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Child">
            <summary>
            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.DataSource">
            <summary>
            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Expanded">
            <summary>
            Specifies the mapping field for expand state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.HasChildren">
            <summary>
            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.HtmlAttributes">
            <summary>
            Specifies the mapping field for htmlAttributes to be added to the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.DataManager">
            <summary>
            The DataManager is used to performing data operations in applications.
            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.IconCss">
            <summary>
            Specifies the mapping field for icon class of each TreeView node that will be added before the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Id">
            <summary>
            Specifies the ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.ImageUrl">
            <summary>
            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.IsChecked">
            <summary>
            Specifies the field for checked state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.NavigateUrl">
            <summary>
            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.ParentID">
            <summary>
            Specifies the parent ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Query">
            <summary>
            This paramter will execute along with data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Selected">
            <summary>
            Specifies the mapping field for selected state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.TableName">
            <summary>
            Specifies the table name used to fetch data from a specific table in the server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Text">
            <summary>
            Specifies the mapping field for text displayed as TreeView node's display text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Tooltip">
            <summary>
            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Children">
            <summary>
            Specifies the child.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Specifies the child property update.
            </summary>
            <param name="prop">"Specifies the prop details".</param>
            <param name="details">"Specifies the details".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbItem">
            <summary>
            A class that represents breadcrumb component item of <see cref="T:Syncfusion.Blazor.Navigations.SfBreadcrumb"/> component.
            </summary>
            <remarks>
            You can render icon only, text only, icon and text breadcrumb item by specifying value to corresponding property.
            Additional attributes can be added to Breadcrumb item using <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, a basic Breadcrumb item has been added using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                    <BreadcrumbItem Text="Breadcrumb" Url="https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent">
            <summary>
            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text"/> content.
            </summary>
            <value>
            The template content. The default value in <c>null</c>.
            </value>
            <example>
            In the below code example, content has been set to <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> using <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text"/> property and <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent"/> property.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text">
            <summary>
            Gets or sets the text content of the Breadcrumb item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            Set child content within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> tag directive, to render as HTML content.
            </remarks>
            <example>
            In the below code example, content has been set to <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> using <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text"/> property and <c>ChildContent</c> property.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem>Home</BreadcrumbItem>
                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url">
            <summary>
            Gets or sets the Url of the Breadcrumb item and that will be navigated when clicked.
            </summary>
            <value>
            Accepts Url string value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            When Url has not been set, you can customize the item navigation using <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked"/> event.
            </remarks>
            <example>
            <code><![CDATA[
            <SfBreadcrumb">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.IconCss">
            <summary>
            Gets or sets a CSS class string to include an icon or image for the breadcrumb item. 
            </summary>
            <value>
            Accepts a CSS class string separated by space to include an icon or image for the breadcrumb item. The default value is <c>String.Empty</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem IconCss="e-icons e-home"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.
            </summary>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, title attribute added as inline in <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" title="Home"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbItems">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/>.
            </summary>
            <remarks>
            To generate dynamic <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> based on collection, use <c>@foreach</c> within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic Breadcrumb has been rendered using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent">
            <exclude/>
            <summary>
            Specifies the child content for the Breadcrumb items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates">
            <summary>
            Represents template options in <see cref="T:Syncfusion.Blazor.Navigations.SfBreadcrumb"/> component.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> or <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/> can be set <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates"/> tag directive.
            To access template's context parameter use <c>@context</c> in both <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> and <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/>.
            </remarks>
            <example>
            In the below code example, both <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> and <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/> has been specified.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations"></BreadcrumbItem>
                </BreadcrumbItems>
                <BreadcrumbTemplates>
                    <ItemTemplate>
                        <i>@context.Text</i>
                    </ItemTemplate>
                    <SeparatorTemplate>
                        <span class="e-icons e-arrow"></span>
                    </SeparatorTemplate>
                </BreadcrumbTemplates>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of breadcrumb items.
            Here, context refers to the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> for which the template is applied.
            </summary>
            <value>
            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.
            </value>
            <remarks>
            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> properties.
            Specify <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates"/> tag directive.
            </remarks>        
            <example>
            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations"></BreadcrumbItem>
                </BreadcrumbItems>
                <BreadcrumbTemplates>
                    <ItemTemplate>
                        <i>@context.Text</i>
                    </ItemTemplate>
                </BreadcrumbTemplates>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of breadcrumb items separator.
            Here, context refers to the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> for previous and current item which the template is applied.
            </summary>
            <value>
            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.
            </value>
            <remarks>
            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> properties.
            Specify <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/> within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates"/> tag directive.
            </remarks>
            <example>
            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations"></BreadcrumbItem>
                </BreadcrumbItems>
                <BreadcrumbTemplates>
                    <SeparatorTemplate>
                        <span class="e-icons e-arrow"></span>
                    </SeparatorTemplate>
                </BreadcrumbTemplates>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode">
            <summary>
            Specifies how to display breadcrumb items in <see cref="T:Syncfusion.Blazor.Navigations.SfBreadcrumb"/> component when the Breadcrumb items exceeds Breadcrumb container or <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Default">
            <summary>
            The specified <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/> count will be visible and the remaining items will be hidden. While clicking on the previous item, the hidden item will become visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Collapsed">
            <summary>
            Only the first and last items will be visible, and the remaining items will be hidden with collapsed icon. When the collapsed icon is clicked, all items become visible and scroll will be enabled if the space is not enough to show all items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemRendering"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs.Item">
            <summary>
            Gets or sets the breadcrumb item that is being render. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs.Item">
            <summary>
            Gets the clicked breadcrumb item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfBreadcrumb">
            <summary>
            Breadcrumb component is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.
            The aim is to make the user aware of their current position in a hierarchy of website links.
            </summary>
            <remarks>
            Breadcrumb items can be populated either by specifying <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url"/> property or by specifying <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive.
            <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> and <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/> can be used to customize the Breadcrumb component UI using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic Breadcrumb component initialized with <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                    <BreadcrumbItem Text="Breadcrumb" Url="https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url">
            <summary>
            Gets or sets the Url based on which the Breadcrumb items are generated.
            </summary>
            <value>
            The value as a Url string to generate Breadcrumb items. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            You can specify only absolute Url to this property.
            </remarks>
            <example>
            <code><![CDATA[
            <SfBreadcrumb Url="https://blazor.syncfusion.com/demos/breadcrumb/navigation">
            </SfBreadcrumb>
            ]]></code>
            </example>
            <seealso cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Items">
            <summary>
            Gets or sets the list of breadcrumb items that will be populated using the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive. 
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url"/> of the active breadcrumb item.
            </summary>
            <value>
            This property contains Url string of active breadcrumb item.
            </value>
            <remarks>
            This property is updated only when the <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url" /> has value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems ActiveItem="@activeItem">
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                    <BreadcrumbItem Text="Breadcrumb" Url="https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            @code {
                private string activeItem = "https://blazor.syncfusion.com/demos/menu-bar/default-functionalities";
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems">
            <summary>
            Gets or sets the maximum number of breadcrumb items to be visible in the breadcrumb component.
            If the number of items exceeds this count, then items are rendered based on <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode"/> property. 
            </summary>
            <value>
            The number of breadcrumb items to be visible in breadcrumb component. The default value is <c>0</c>. 
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/> is applicable only if the number of <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> is greater than <c>2</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode">
            <summary>
            Gets or sets a value that indicates how to display breadcrumb items when the breadcrumb items count exceeds <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/>.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Default"/>
            </value>
            <remarks>
            If the <c>OverflowMode</c> is <c>Default</c>, the exceeded items will be hidden and while clicking on the previous item, the hidden item will become visible.
            If the <c>OverflowMode</c> is <c>Collapsed</c>,  only the first and last items will be visible, and the remaining items will be hidden with collapsed icon.
            When the collapsed icon is clicked, all items become visible and scroll will be enabled if the space is not enough to show all items. 
            </remarks>
            <seealso cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Width"/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Width">
            <summary>
            Gets or sets the width for the Breadcrumb component container element.
            If the Breadcrumb items overflows the container width, the browser scrollbar will be activated.
            </summary>
            <value>
            It contains component width in pixel or percentage. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            If the <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/> property is specified, the <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/> property will be prioritized than Breadcrumb container width and responsive UI will be activated based on <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode"/>.
            You can set container width using CSS and HTML style attribute using <c>@attributes</c>.
            </remarks>
            <seealso cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation">
            <summary>
            Gets or sets whether the built-in item navigation is enabled or not. The breadcrumb component navigates to url based on the item clicked by user.
            </summary>
            <value>
            <c>true</c>, if built-in item navigation is enabled; otherwise, <b>false</b>.The default value is <c>true</c>.
            </value>
            <remarks>
            You can handle navigation in using <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked"/> event by setting <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation"/> as <c>false</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableActiveItemNavigation">
            <summary>
            Gets or sets whether the navigation is enabled for active item (last breadcrumb item).
            </summary>
            <value>
            <c>true</c>, if the navigation is enabled for last breadcrumb item and it is clickable. otherwise, <b>false</b>.The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem" /> property is persisted.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            Component's <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem"/> property will be stored in browser local storage to persist component's state when page reloads.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will applied to the Breadcrumb container element.
            </summary>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, Breadcrumb width has been specified as style attribute in <see cref="T:Syncfusion.Blazor.Navigations.SfBreadcrumb"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb style="width:200px">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                    <BreadcrumbItem Text="Breadcrumb" Url="https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent">
            <exclude />
            <summary>
            Gets or sets the child content of Breadcrumb component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItemChanged">
            <exclude/>
            <summary>
            Gets or sets a callback that updates the bound active item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemRendering">
            <summary>
            Gets or sets an event callback that is raised while rendering <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/>.
            </summary>
            <remarks>
            You can customize the breadcrumb items rendering using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs"/>.
            </remarks>
            <example>
            In the below code example, the breadcrumb item text is changed to lower casing using <c>ItemRendering</c> event.
            <code><![CDATA[
            <SfBreadcrumb ItemRendering="@ItemRendering">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Program Files"></BreadcrumbItem>
                    <BreadcrumbItem Text="Commom Files"></BreadcrumbItem>
                    <BreadcrumbItem Text="Services"></BreadcrumbItem>
                    <BreadcrumbItem Text="Config.json"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            @code {
                private void ItemRendering(BreadcrumbItemRenderingEventArgs args) {
                    args.Item.Text = args.Item.Text.ToLower();
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked">
            <summary>
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> is clicked. 
            </summary>
            <remarks>
            You can customize the item navigation using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs"/> by setting <seealso cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation"/> as <c>false</c>.
            The event is raised for UI based click only.
            </remarks>
            <example>
            <code><![CDATA[
            @inject NavigationManager NavigationManager
            <SfBreadcrumb ItemClicked="@ItemClicked" EnableNavigation="false">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Program Files" Url="programfiles"></BreadcrumbItem>
                    <BreadcrumbItem Text="Commom Files" Url="commomfiles"></BreadcrumbItem>
                    <BreadcrumbItem Text="Services" Url="services"></BreadcrumbItem>
                    <BreadcrumbItem Text="Config" Url="config"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            @code {
                private void ItemClicked(BreadcrumbClickedEventArgs args) {
                    NavigationManager.NavigateTo(args.Item.Url);
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfContextMenu`1">
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.Filter">
            <summary>
            Specifies the filter selector for elements inside the target in that the context menu will be opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.Target">
            <summary>
            Specifies target element selector in which the ContextMenu should be opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.ShowOn">
            <summary>
            Specifies the ContextMenu triggering event name.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.Close">
            <summary>
            Closes the ContextMenu if it is opened.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.Open(System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            This method is used to open the ContextMenu in specified position. If the positions are not specified, the context menu
            will open at its rendered position.
            </summary>
            <param name = "clientX">Specifies the horizontal position of the context menu.</param>
            <param name = "clientY">Specifies the vertical position of the context menu.</param>
            <param name = "enableCollision">Specifies the collision detection of the context menu.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.OpenContextMenuAsync(System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEffect">
            <summary>
            Menu animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.SlideDown">
            <summary>
            Defines menu effect as SlideDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.None">
            <summary>
            Defines menu effect as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.ZoomIn">
            <summary>
            Defines menu effect as ZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.FadeIn">
            <summary>
            Defines menu effect as FadeIn.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Orientation">
            <summary>
            Specifies the option for orientation mode of Menu. By default, component rendered in Horizontal orientation mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Orientation.Horizontal">
            <summary>
            Defines menu orientation as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Orientation.Vertical">
            <summary>
            Defines menu orientation as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1">
            <summary>
            Interface for OnOpen/OnClose event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Cancel">
            <summary>
            Set true to prevent menu from opening.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Element">
            <summary>
            Specifies the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Items">
            <summary>
            Specifies the current menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.ParentItem">
            <summary>
            Specifies the parent item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.ScrollHeight">
            <summary>
            Specifies the menu container height to show the scrollable menu.
            It is applicable only when the EnableScrolling property is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Top">
            <summary>
            Specifies the clientY position of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Left">
            <summary>
            Specifies the clientX position of the menu.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEventArgs`1">
            <summary>
            Interface for OnItemRender/ItemSelected event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Element">
            <summary>
            Specifies the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Event">
            <summary>
            Specifies the item select event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Item">
            <summary>
            Specifies the selected item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1">
            <summary>
            Interface for Opened/Closed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Element">
            <summary>
            Specifies the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Items">
            <summary>
            Specifies the current menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.ParentItem">
            <summary>
            Specifies the parent item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.NavigationIndex">
            <summary>
            Specifies the Navigation Index.
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItemModel">
            <summary>
            Interface for MenuItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItemModel.Items">
            <summary>
            Specifies the list of menu item model.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuAnimationSettings">
            <summary>
            Specifies the animation settings for the menu open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Duration">
            <summary>
            Specifies the time duration to transform object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Easing">
            <summary>
            Specifies the easing effect applied while transform.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Effect">
            <summary>
            Specifies the effect that shown in the sub menu transform.
            The possible effects are:
             None: Specifies the sub menu transform with no animation effect.
             SlideDown: Specifies the sub menu transform with slide down effect.
             ZoomIn: Specifies the sub menu transform with zoom in effect.
             FadeIn: Specifies the sub menu transform with fade in effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEvents`1">
            <summary>
            Used to configure the menu events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnClose">
            <summary>
            Triggers before closing the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnItemRender">
            <summary>
            Triggers while rendering each menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnOpen">
            <summary>
            Triggers before opening the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Closed">
            <summary>
            Triggers while closing the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Opened">
            <summary>
            Triggers while opening the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.ItemSelected">
            <summary>
            Triggers while selecting menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuFieldSettings">
            <summary>
            Configures the field options of the Menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Children">
            <summary>
            Specifies the children field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.IconCss">
            <summary>
            Specifies the CSS icon field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.ItemId">
            <summary>
            Specifies the itemId field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.ParentId">
            <summary>
            Specifies the parentId field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Separator">
            <summary>
            Specifies the separator field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Disabled">
            <summary>
            Specifies the disabled field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Hidden">
            <summary>
            Specifies the hidden field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Text">
            <summary>
            Specifies the text field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Url">
            <summary>
            Specifies the URL field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.HtmlAttributes">
            <summary>
            Specifies the @attributes (additional attributes) field for Menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItem">
            <summary>
            Used to configure the items which is going to render as menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.
            Menu Item can include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Id">
            <summary>
            Specifies the id for menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Items">
            <summary>
            Specifies the sub menu items that is the array of MenuItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Separator">
            <summary>
            Specifies separator between the menu items. Separator are either horizontal or vertical lines used to group menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Disabled">
            <summary>
            Used to enable or disable the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Hidden">
            <summary>
            Used to hide or show the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Text">
            <summary>
            Specifies text for menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Url">
            <summary>
            Specifies URL for menu item that creates the anchor link to navigate to the url provided.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.HtmlAttributes">
            <summary>
            You can add the additional HTML attributes such as style, title etc., to the menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItems">
            <summary>
            A list of items that is used to configure menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItems.ChildContent">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuTemplates`1">
            <summary>
            Used to specify templates for rendering menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuTemplates`1.Template">
            <summary>
            Specifies the template for Menu.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfMenu`1">
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.HamburgerMode">
            <summary>
            Specifies whether to enable / disable the hamburger mode in Menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Orientation">
            <summary>
            Specified the orientation of Menu whether it can be horizontal or vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Target">
            <summary>
            Specifies target element to open/close Menu while click in Hamburger mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Title">
            <summary>
            Specifies the title text for hamburger mode in Menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.GetItemIndex(`0,System.Boolean)">
            <summary>
            This method is used to get the index of the menu item in the Menu based on the argument.
            </summary>
            <param name = "item">Item be passed to get the index.</param>
            <param name = "isUniqueId">Set `true` if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.Open">
            <summary>
            Used to open the Menu in hamburger mode.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.OpenAsync">
            <summary>
            Used to open the Menu in hamburger mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.Close">
            <summary>
            Closes the Menu if it is opened in hamburger mode.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.CloseAsync">
            <summary>
            Closes the Menu if it is opened in hamburger mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.DocumentMouseDownAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SidebarPosition">
            <summary>
            Specifies the Sidebar positions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarPosition.Left">
            <summary>
            Specifies the position of the Left Sidebar corresponding to the main content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarPosition.Right">
            <summary>
            Specifies the position of the Right Sidebar corresponding to the main content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SidebarType">
            <summary>
            Specifies the Sidebar types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Slide">
            <summary>
            The sidebar translates the x and y positions of the main content area based on the sidebar width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Over">
            <summary>
            The sidebar floats over the main content area.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Push">
            <summary>
            The sidebar pushes the main content area to appear side-by-side, and shrinks the main content within the screen width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Auto">
            <summary>
            Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.EventArgs">
            <summary>
            Interface for open and close events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Cancel">
            <summary>
            Determines whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Element">
            <summary>
            Returns the element reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Name">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.IsInteracted">
            <summary>
            Defines the boolean that returns true when the Sidebar is closed by user interaction, otherwise returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Top">
            <summary>
            Specifies the clientY position of the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Left">
            <summary>
            Specifies the clientX position of the target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ChangeEventArgs">
            <summary>
            Defines the event arguments for the change event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.Element">
            <summary>
            Returns the element reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.Name">
            <summary>
            Returns event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.IsInteracted">
            <summary>
            Defines the boolean that returns true when the Sidebar is closed by user interaction, otherwise returns false.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PersistenceValues">
            <summary>
            Interface for persistence values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PersistenceValues.IsOpen">
            <summary>
            Gets or sets the Sidebar component is open or close.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfSidebar">
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            The SfSidebar component is an expandable and collapsible component that typically acts as a side container to place primary or secondary content alongside the main content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Changed">
            <summary>
            Triggers when the state(expand/collapse) of the component is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.OnClose">
            <summary>
            Triggers when the component is ready to close.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Destroyed">
            <summary>
            Triggers when the component gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.OnOpen">
            <summary>
            Triggers when the component is ready to open.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ID">
            <summary>
            Sets id attribute for the sidebar element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ChildContent">
            <summary>
            Specifies the child content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Animate">
            <summary>
            Enable or disable the animation transitions on expanding or collapsing the Sidebar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.CloseOnDocumentClick">
            <summary>
            Specifies whether the Sidebar needs to be closed or not when the document area is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.DockSize">
            <summary>
            Specifies the size of the Sidebar in dock state. Dock size can be set in pixel values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableDock">
            <summary>
            Specifies the docking state of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableGestures">
            <summary>
            Enables the expand or collapse while swiping in the touch devices.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnablePersistence">
            <summary>
            Enable or disable the persisting component's state between page reloads. If enabled, isOpen state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableRtl">
            <summary>
            Enable or disable rendering Sidebar in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.IsOpen">
            <summary>
            Gets or sets the Sidebar component is open or close.
            When the Sidebar type is set to `Auto`,
            the component will be expanded in the desktop and collapsed in the mobile mode regardless of the isOpen property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.IsOpenChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.MediaQuery">
            <summary>
            Specifies the media query string for resolution, when opens the Sidebar.
            Example: assigning media query value to '(min-width: 600px)' will open the sidebar component only when the provided resolution is met else the sidebar will be in closed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Position">
            <summary>
            Specifies the position of the Sidebar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ShowBackdrop">
            <summary>
            Specifies whether to apply overlay options to the main content or not when the Sidebar is in an open state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Target">
            <summary>
            Allows to place the sidebar inside the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Type">
            <summary>
            Specifies the expanding types of the Sidebar.
            `Over` - The sidebar floats over the main content area.
            `Push` - The sidebar pushes the main content area to appear side-by-side and shrinks the main content within the screen width.
            `Slide` - The sidebar translates the x and y positions of the main content area based on the sidebar width.
            The main content area will not be adjusted within the screen width.
             `Auto` - Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Width">
            <summary>
            Specifies the width of the Sidebar. By default, the width of the Sidebar sets based on the size of its content.
            Width can also be set in pixel values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ZIndex">
            <summary>
            Specifies the z-index of the Sidebar. It is applicable only when sidebar act as the overlay type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.HtmlAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Hide">
            <summary>
            Hide the Sidebar component, if it is in an open state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SidebarHide">
            <summary>
            Hide the Sidebar component, if it is in an open state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Show">
            <summary>
            Shows the Sidebar component, if it is in closed state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SidebarShow">
            <summary>
            Shows the Sidebar component, if it is in closed state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Toggle">
            <summary>
            Shows or hides the Sidebar based on the current state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SerializeModel">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.UpdateAttributes">
            <summay>
            Updates attributes added for the Sidebar component.
            </summay>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SetDock">
            <summary>
              Updates the dock styles and classes for the sidebar element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerChange(System.Boolean,Syncfusion.Blazor.Navigations.ChangeEventArgs)">
            <summary>
            Triggers change event.
            </summary>
            <exclude/>
            <param name="visible">visibles.</param>
            <param name="argsvalue">argsvalue.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerShow(Syncfusion.Blazor.Navigations.EventArgs)">
            <summary>
             Invoke show method from client.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerHide(Syncfusion.Blazor.Navigations.EventArgs)">
            <summary>
             Invoke hide method from client.
             </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.GetProperties">
            <summary>
             Method to Get Properties.
            </summary>
            <returns>properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AddEventArgs">
            <summary>
            A class that holds options to control the adding or added item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.AddedItems">
            <summary>
            Defines the added Tab item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.RemoveEventArgs">
            <summary>
            A class that holds options to control the removing and removed item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.RemovedIndex">
            <summary>
            Returns the removed Tab item index.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DragEventArgs">
            <summary>
            A class that holds options to control the dragged item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Cancel">
            <summary>
            Specify a value whether to prevent the drag action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Index">
            <summary>
            Returns the index of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.DraggedItem">
            <summary>
            Returns the index of dragged Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.DroppedItem">
            <summary>
            Returns the index of dropped Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Left">
            <summary>
            Return the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Top">
            <summary>
            Return the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SelectEventArgs">
            <summary>
            A class that holds options to control the selected item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.Cancel">
            <summary>
            Specify a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.IsSwiped">
            <summary>
            Returns a value whether content selection is done through swiping or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.PreviousIndex">
            <summary>
            Returns the index of previous Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.SelectedIndex">
            <summary>
            Returns the index of selected Tab item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SelectingEventArgs">
            <summary>
            A class that holds options to control the selecting item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.IsSwiped">
            <summary>
            Returns a value whether the content selection is done through swiping or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.PreviousIndex">
            <summary>
            Returns the index of the previous Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.SelectedIndex">
            <summary>
            Returns the index of the selected Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.SelectingIndex">
            <summary>
            Returns the index of the selecting Tab item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.HeaderModel">
            <summary>
            A class to define the properties of a tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.IconCss">
            <summary>
            Specifies the icon class that is used to render an icon in the Tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.IconPosition">
            <summary>
            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.
            The possible values are:
            - left: Places the icon to the `left` of the item.
            - top: Places the icon on the `top` of the item.
            - right: Places the icon to the `right` end of the item.
            - bottom: Places the icon at the `bottom` of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.Text">
            <summary>
            Specifies the display text of the Tab header.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItemModel">
            <summary>
            A class to define the properties of a tab Item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Content">
            <summary>
            Specifies the content of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.CssClass">
            <summary>
            Sets the CSS classes to the Tab item to customize its styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Disabled">
            <summary>
            Specifies a value that indicates whether the control is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Header">
            <summary>
            The object used for configuring the Tab item header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.HeaderTemplate">
            <summary>
            Specifies the header content of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Visible">
            <summary>
            Specifies a value that indicates whether the tab is visible or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfTab">
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ID">
            <summary>
            Sets ID attribute for the tab element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ChildContent">
            <summary>
            Child Content for Tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Animation">
            <summary>
            Specifies the animation settings of the Tabs component. The animation effect can be applied to activate the tab with duration and delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.CssClass">
            <summary>
            Sets the CSS classes to the root element of the Tabs that helps to customize the component styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            If enabled, the tab’s selected item will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.AllowDragAndDrop">
            <summary>
            Indicates whether the Tab allows drag and drop over tab items. Tab item has been reordered based on the dropped item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.DragArea">
            <summary>
            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted
            for the draggable element movement. By default, the draggable element movement occurs with Tabitems.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left (RTL) direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.HeaderPlacement">
            <summary>
            Specifies the orientation of the Tab header.
            The possible values are:
            - Top: Places the Tab header on the top.
            - Bottom: Places the Tab header at the bottom.
            - Left: Places the Tab header at the left.
            - Right: Places the Tab header at the right.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Height">
            <summary>
            Specifies the height of the Tabs component. By default, Tab height is set based on the height of its parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Items">
            <summary>
            A list of items that are used to configure the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.LoadOn">
            <summary>
            Specifies the modes for the Tab content.
            The possible modes are:
            `Dynamic` Load the Tab content dynamically, which is rendering its content when switching its header.
            `Init` Loads all the tab contents on initial loading.
            `Demand` Loads the Tab content when required but keeps the content once it is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.OverflowMode">
            <summary>
            Specifies the display mode which will be applied when the Tabs exceeds the viewing area.
            The possible modes are:
            - Scrollable: All the elements will be displayed in a single line with horizontal scrolling enabled.
            - Popup: Tab container will hold the items that can be placed within the available space and the rest of the items will be moved to the popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ScrollStep">
            <summary>
            Specifies the scrolling distance that applies when scrolling in Tab and enabled Scrollable mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.SelectedItem">
            <summary>
            Specifies the index for activating the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.SelectedItemChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ShowCloseButton">
            <summary>
            Specifies a value that indicates whether to show the close button in the Tab header or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Width">
            <summary>
            Specifies the width of the Tabs component. By default, Tab width sets based on the width of its parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the tab element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.AddTab(System.Collections.Generic.List{Syncfusion.Blazor.Navigations.TabItem},System.Int32)">
            <summary>
            Adds new items to the Tab that accepts a list of Tab items.
            </summary>
            <param name="items">A list of items that are added to the Tab.</param>
            <param name="index">Specifies an index value that determines where the items to be added.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.RemoveTab(System.Int32)">
            <summary>
            Removes a particular Tab based on index from the Tabs.
            </summary>
            <param name="index">Index of tab item that is going to be removed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.EnableTab(System.Int32,System.Boolean)">
            <summary>
            Enables or disables a particular tab item. On passing the value as `false`, the tab will be disabled.
            </summary>
            <param name="index">Index value of target Tab item.</param>
            <param name="isEnable">Specify a Boolean value that determines whether the command should be enabled or disabled. By default, isEnable has true.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.EnableTabAsync(System.Int32,System.Boolean)">
            <summary>
            Enables or disables a particular tab item. On passing the value as `false`, the tab will be disabled.
            </summary>
            <param name="index">Index value of target Tab item.</param>
            <param name="isEnable">Specify a Boolean value that determines whether the command should be enabled or disabled. By default, isEnable has true.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.HideTab(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides a particular Tab based on the specified index.
            </summary>
            <param name="index">Index value of target item.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (false) or show (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.HideTabAsync(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides a particular Tab based on the specified index.
            </summary>
            <param name="index">Index value of target item.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (false) or show (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Select(System.Int32)">
            <summary>
            Select (activate) a particular tab based on the specified index.
            </summary>
            <param name="index">Index is used for selecting an item from the Tab.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.SelectAsync(System.Int32)">
            <summary>
            Select (activate) a particular tab based on the specified index.
            </summary>
            <param name="index">Index is used for selecting an item from the Tab.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Disable(System.Boolean)">
            <summary>
            Specifies the value to disable or enable the Tabs component. When set to `true`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Tab will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.DisableAsync(System.Boolean)">
            <summary>
            Specifies the value to disable or enable the Tabs component. When set to `true`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Tab will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.GetTabItem(System.Int32)">
            <summary>
            Return a tab item element based on the specified index.
            </summary>
            <param name="index">Index is used for accessing tab header item element from the Tab.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.GetTabContent(System.Int32)">
            <summary>
            Returns the tab content element based on the specified index.
            </summary>
            <param name="index">Index is used for accessing tab content element from the Tab.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Refresh">
            <summary>
            Refresh the entire tabs component.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.RefreshAsync">
            <summary>
            Refresh the entire tabs component.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.CreatedEvent">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnDragStart(System.Int32)">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Dragged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.SelectingEvent(Syncfusion.Blazor.Navigations.SelectingEventArgs,System.Nullable{System.Int32})">
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationNext">
            <summary>
            Specifies the animation to appear when moving to the next Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Effect">
            <summary>
            Specifies the animation effect for displaying the next Tab content.
            Default animation is given as SlideRightIn for next tab animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationNext.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationNext.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationPrevious">
            <summary>
            Specifies the animation to appear when moving to the previous Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Duration">
            <summary>
            Specifies the time duration to transform the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Effect">
            <summary>
            Specifies the animation effect for displaying the previous Tab content.
            Default animation is given as SlideLeftIn for previous tab animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationPrevious.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationPrevious.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationSettings">
            <summary>
            A class used for configuring the Tab animation properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent">
            <summary>
            Child Content for the Tab Animation Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.Next">
            <summary>
            Specifies the animation to appear when moving to the next Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.Previous">
            <summary>
            Specifies the animation to appear when moving to the previous Tab content.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.HeaderPosition">
            <summary>
            Options to set the orientation of Tab header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Top">
            <summary>
            Places the Tab header on the top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Bottom">
            <summary>
            Places the Tab header at the bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Left">
            <summary>
            Places the Tab header on the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Right">
            <summary>
            Places the Tab header on the right.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ContentLoad">
            <summary>
            Specifies the options of Tab content display mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Dynamic">
            <summary>
            The content of the selected tab alone will be loaded and available in DOM and it will be replaced with the corresponding content if you select the tab dynamically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Init">
            <summary>
            The content of all the tabs are rendered on the initial load and maintained in the DOM.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Demand">
            <summary>
            The content of the selected tab alone is loaded initially. The content of the tabs which were loaded once will be maintained in the DOM.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabEvents">
            <summary>
            Configure event handlers to handle the events with the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Added">
            <summary>
            The event triggers after adding the item to the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Adding">
            <summary>
            The event triggers before adding the tab item to the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Created">
            <summary>
            The event triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Destroyed">
            <summary>
            The event triggers when the component gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Removed">
            <summary>
            The event triggers after removing the item from the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Removing">
            <summary>
            The event triggers before removing the item from the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Selected">
            <summary>
            The event triggers after the tab item gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Selecting">
            <summary>
            The event triggers before the tab item gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.OnDragStart">
            <summary>
            The event triggers when the Tab item drag starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Dragged">
            <summary>
            The event triggers after the tab item gets dropped.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabHeader">
            <summary>
            A class used for configuring the Tab header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.IconCss">
            <summary>
            Specifies the icon class that is used to render an icon in the Tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.IconPosition">
            <summary>
            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.
            The possible values are:
            - left: Places the icon to the `left` of the item.
            - top: Places the icon on the `top` of the item.
            - right: Places the icon to the `right` end of the item.
            - bottom: Places the icon at the `bottom` of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.Text">
            <summary>
            Specifies the display text of the Tab header.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabHeader.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabHeader.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItem">
            <summary>
            An item object that is used to configure the Tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.ChildContent">
            <summary>
            Child Content for the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.ContentTemplate">
            <summary>
            Specifies the content template of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Content">
            <summary>
            Specifies the content of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.CssClass">
            <summary>
            Sets the CSS classes to the Tab item to customize its styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Disabled">
            <summary>
            Specifies a value that indicates whether the control is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Header">
            <summary>
            The object used for configuring the Tab item header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate">
            <summary>
            Specifies the header content of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Visible">
            <summary>
            Specifies a value that indicates whether the tab is visible or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItem.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItems">
            <summary>
            A list of items that are used to configure the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItems.ChildContent">
            <summary>
            Child Content for the Tab items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItems.Items">
            <summary>
            A list of items that are used to configure the tab item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ClickEventArgs">
            <summary>
            A class that holds options to control the toolbar clicked action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Cancel">
            <summary>
            Defines the prevent action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Item">
            <summary>
            Defines the current Toolbar Item Object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.OriginalEvent">
            <summary>
            Defines the current Event arguments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemModel">
            <summary>
            A class for a toolbar Item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Click">
            <summary>
            Event triggers when `click` the toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Align">
            <summary>
            Specifies the location for aligning Toolbar items on the Toolbar. Each command will be aligned according to the `Align` property.
            Possible values are:
            - Left: To align commands to the left side of the Toolbar.
            - Center: To align commands at the center of the Toolbar.
            - Right: To align commands to the right side of the Toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.CssClass">
            <summary>
            Defines single/multiple classes (separated by space) to be used for customization of commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Disabled">
            <summary>
            Specifies whether an item should be disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.HtmlAttributes">
            <summary>
            Defines htmlAttributes used to add custom attributes to Toolbar command.
            Supports HTML attributes such as style, class, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Id">
            <summary>
            Specifies the unique ID to be used with button or input element of Toolbar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Overflow">
            <summary>
            Specifies the Toolbar command display area when an element's content is too large to fit available space.
            This is applicable only to `Popup` mode. Possible values are:
            - Show:  Always shows the item as the primary priority on the Toolbar.
            - Hide: Always shows the item as the secondary priority on the popup.
            - None: No priority for display, and as per normal order moves to popup when content exceeds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.PrefixIcon">
            <summary>
            Defines single/multiple classes separated by space used to specify an icon for the button.
            The icon will be positioned before the text content if text is available, otherwise the icon alone will be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.ShowAlwaysInPopup">
            <summary>
            Defines the priority of items to display it in popup always.
            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.ShowTextOn">
            <summary>
            Specifies where the button text will be displayed on popup mode of the Toolbar.
            Possible values are:
            - Toolbar:  Text will be displayed on Toolbar only.
            - Overflow: Text will be displayed only when content overflows to popup.
            - Both: Text will be displayed on popup and Toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.SuffixIcon">
            <summary>
            Defines single/multiple classes separated by space used to specify an icon for the button.
            The icon will be positioned after the text content if text is available.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Template">
            <summary>
            Specifies the template that can be added as a Toolbar command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Text">
            <summary>
            Specifies the text to be displayed on the Toolbar button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.TooltipText">
            <summary>
            Specifies the text to be displayed on hovering the Toolbar button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Type">
            <summary>
            Specifies the types of command to be rendered in the Toolbar.
            Supported types are:
            - Button: Creates the Button control with its given properties like text, prefixIcon, etc.
            - Separator: Adds a horizontal line that separates the Toolbar commands.
            - Input: Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList,
            AutoComplete, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Visible">
            <summary>
            Specifies whether an item should be hidden or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Width">
            <summary>
            Specifies the width of the Toolbar button commands.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfToolbar">
            <summary>
            The Toolbar control contains a group of commands that are aligned horizontally.
            </summary>
            <summary>
            The Toolbar control contains a group of commands that are aligned horizontally.
            </summary>
            <summary>
            The Toolbar control contains a group of commands that are aligned horizontally.
            </summary>
            <summary>
            The Toolbar control contains a group of commands that are aligned horizontally.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ID">
            <summary>
            Sets ID attribute for toolbar element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ChildContent">
            <summary>
            Child Content for Toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.AllowKeyboard">
            <summary>
            When this property is set to true, it allows the keyboard interaction in toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.CssClass">
            <summary>
            Sets the CSS classes to root element of the Toolbar that helps to customize component styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.EnableCollision">
            <summary>
            Enable or disable the popup collision.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Height">
            <summary>
            Specifies the height of the Toolbar in pixels/number/percentage. Number value is considered as pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Items">
            <summary>
            A list of items that is used to configure Toolbar commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.OverflowMode">
            <summary>
            Specifies the Toolbar display mode when Toolbar content exceeds the viewing area.
            Possible modes are:
            - Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.
            - Popup: Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the popup.
            - MultiRow: Displays the overflow toolbar items as an in-line of a toolbar.
            - Extended: Hide the overflowing toolbar items in the next row.  Show the overflowing toolbar items when you click the expand icons.
            If the popup content overflows the height of the page, the rest of the elements will be hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ScrollStep">
            <summary>
            Specifies the scrolling distance in scroller.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Width">
            <summary>
            Specifies the width of the Toolbar in pixels/numbers/percentage. Number value is considered as pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the toolbar element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.AddItems(System.Collections.Generic.List{Syncfusion.Blazor.Navigations.ToolbarItem},System.Int32)">
            <summary>
            Adds new items to the Toolbar that accepts an list of Toolbar items.
            </summary>
            <param name="items">A list of items to be added to the Toolbar.</param>
            <param name="index">Number value that determines where the command is to be added.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RemoveItems(System.Int32)">
            <summary>
            Removes the items from the Toolbar at the specified index.
            </summary>
            <param name="index">Index of item which is to be removed from the Toolbar.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.EnableItems(System.Collections.Generic.List{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Enables or disables the specified Toolbar item.
            </summary>
            <param name="items">A list of toolbar item index to be enabled or disabled.</param>
            <param name="isEnable">Boolean value that determines whether the command should be enabled or disabled. By default, `isEnable` is set to true.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.HideItem(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides the Toolbar item that is in the specified index.
            </summary>
            <param name="index">Index value of target item to be hidden or shown.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (true) or show (false). By default, isHide is false.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.HideItemAsync(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides the Toolbar item that is in the specified index.
            </summary>
            <param name="index">Index value of target item to be hidden or shown.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (true) or show (false). By default, isHide is false.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.Disable(System.Boolean)">
            <summary>
            Specifies the value to disable/enable the Toolbar component.
            When set to `True`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.DisableAsync(System.Boolean)">
            <summary>
            Specifies the value to disable/enable the Toolbar component.
            When set to `True`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshOverflow">
            <summary>
            Refresh the whole Toolbar component without re-rendering.
            - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
            - It will refresh the Toolbar component after loading items dynamically.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshOverflowAsync">
            <summary>
            Refresh the whole Toolbar component without re-rendering.
            - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
            - It will refresh the Toolbar component after loading items dynamically.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.Refresh">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshAsync">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.TriggerClickEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OverflowMode">
            <summary>
            Specifies the options of Toolbar display mode. Display option is considered when Toolbar content exceeds the available space.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable">
            <summary>
             Scrollable - All the elements are displayed in a single line with horizontal scrolling enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Popup">
            <summary>
             Popup - Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.MultiRow">
            <summary>
             MultiRow - Displays the overflow toolbar items as an in-line of a toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Extended">
            <summary>
             Extended - Hide the overflowing toolbar items in the next row. Show the overflowing toolbar items when you click the expand icons. If the popup content overflows the height of the page, the rest of the elements will be hidden.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DisplayMode">
            <summary>
            Specifies the options of where the text will be displayed in popup mode of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Both">
            <summary>
             Both - Text will be displayed on popup and Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Overflow">
            <summary>
             Overflow - Text will be displayed only when content overflows to popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Toolbar">
            <summary>
             Toolbar - Text will be displayed on Toolbar only.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemAlign">
            <summary>
            Specifies the options for aligning the Toolbar items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Left">
            <summary>
             Left - To align commands to the left side of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Center">
            <summary>
             Center - To align commands at the center of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Right">
            <summary>
             Right - To align commands to the right side of the Toolbar.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemType">
            <summary>
            Specifies the options for supporting element types of Toolbar command.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Button">
            <summary>
             Button - Creates the Button control with its given properties like text, prefixIcon, etc.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Separator">
            <summary>
             Separator - Adds a horizontal line that separates the Toolbar commands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Input">
            <summary>
             Input - Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList, AutoComplete, etc.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OverflowOption">
            <summary>
            Specifies the options of the Toolbar item display area when the Toolbar content overflows to available space.Applicable to `Popup` mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.None">
            <summary>
             None - No priority for display, and as per normal order moves to popup when content exceeds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.Show">
            <summary>
             Show - Always shows the item as the primary priority on the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.Hide">
            <summary>
             Hide - Always shows the item as the secondary priority on the popup.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ToolbarItem">
            <summary>
            An item object that is used to configure Toolbar commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent">
            <summary>
            Child Content for Toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.OnClick">
            <summary>
            Event triggers when click the toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Align">
             <summary>
             Specifies the location for aligning Toolbar items on the Toolbar. Each command will be aligned according to the `Align` property.
             Possible values are:
             - Left: To align commands to the left side of the Toolbar.
             - Center: To align commands at the center of the Toolbar.
             - Right: To align commands to the right side of the Toolbar.
            
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.CssClass">
            <summary>
            Defines single/multiple classes (separated by space) to be used for customization of commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Disabled">
            <summary>
            Specifies whether an item should be disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.HtmlAttributes">
            <summary>
            Defines htmlAttributes used to add custom attributes to Toolbar command.
            Supports HTML attributes such as style, class, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Id">
            <summary>
            Specifies the unique ID to be used with button or input element of Toolbar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Overflow">
            <summary>
            Specifies the Toolbar command display area when an element's content is too large to fit available space.
            This is applicable only to `Popup` mode. Possible values are:
            - Show:  Always shows the item as the primary priority on the Toolbar.
            - Hide: Always shows the item as the secondary priority on the popup.
            - None: No priority for display, and as per normal order moves to popup when content exceeds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.PrefixIcon">
            <summary>
            Defines single/multiple classes separated by space used to specify an icon for the button.
            The icon will be positioned before the text content if text is available, otherwise the icon alone will be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ShowAlwaysInPopup">
            <summary>
            Defines the priority of items to display it in popup always.
            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ShowTextOn">
            <summary>
            Specifies where the button text will be displayed on popup mode of the Toolbar.
            Possible values are:
            - Toolbar:  Text will be displayed on Toolbar only.
            - Overflow: Text will be displayed only when content overflows to popup.
            - Both: Text will be displayed on popup and Toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.SuffixIcon">
            <summary>
            Defines single/multiple classes separated by space used to specify an icon for the button.
            The icon will be positioned after the text content if text is available.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Template">
             <summary>
             Specifies the HTML element/element ID as a string that can be added as a Toolbar command.
            
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Text">
            <summary>
            Specifies the text to be displayed on the Toolbar button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.TooltipText">
            <summary>
            Specifies the text to be displayed on hovering the Toolbar button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Type">
            <summary>
            Specifies the types of command to be rendered in the Toolbar.
            Supported types are:
            - Button: Creates the Button control with its given properties like text, prefixIcon, etc.
            - Separator: Adds a horizontal line that separates the Toolbar commands.
            - Input: Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList,
            AutoComplete, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Visible">
            <summary>
            Specifies whether an item should be hidden or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Width">
            <summary>
            Specifies the width of the Toolbar button commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItem.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ToolbarItems">
            <summary>
            A list of items that is used to configure Toolbar commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent">
            <summary>
            Child Content for Toolbar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItems.Items">
            <summary>
            A list of items that is used to configure Toolbar commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandAction">
            <summary>
            Defines the expand type of the TreeView node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.DoubleClick">
            <summary>
            Specifies the action on 'DoubleClick' the node expands or collapses. The expand/collapse operation happens when you double-click the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.Click">
            <summary>
            Specifies the action on 'Click' the node expands or collapses. The expand/collapse operation happens when you single-click the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.None">
            <summary>
            The expand/collapse operation will not happen when you single-click or double-click the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SortOrder">
            <summary>
            Defines the sorting order type for TreeView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.None">
            <summary>
            Specifies the nodes are not sorted.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.Ascending">
            <summary>
            Specifies the nodes are sorted in the 'Ascending' order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.Descending">
            <summary>
            Specifies the nodes are sorted in the 'Descending' order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeEffect">
            <summary>
            TreeView animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.SlideDown">
            <summary>
            Specifies 'SlideDown' type of animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.None">
            <summary>
            Specifies animation type 'None'.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.ZoomIn">
            <summary>
            Specifies 'ZoomIn' type of animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.FadeIn">
            <summary>
            Specifies 'FadeIn' type of animation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs`1">
            <summary>
            Specifies class for DataSourceChanged event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs`1.Data">
            <summary>
            Return the updated TreeView data. The data source will be updated after performing some operation like
            drag and drop, node editing, adding and removing node. If you want to get updated data source after performing operation like
            selecting/unSelecting, checking/unChecking, expanding/collapsing the node, then you can use getTreeData method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs`1.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DataBoundEventArgs`1">
            <summary>
            Specifies class for DataBound event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataBoundEventArgs`1.Data">
            <summary>
            Return the updated TreeView data. The data source will be updated after performing some operation like
            drag and drop, node editing, adding and removing node. If you want to get updated data source after performing operation like
            selecting/unSelecting, checking/unChecking, expanding/collapsing the node, then you can use getTreeData method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataBoundEventArgs`1.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DragAndDropEventArgs">
            <summary>
            Specifies class for DragAndDrop event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.ClonedNode">
            <summary>
            Return the cloned element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DraggedNode">
            <summary>
            Return the currently dragged TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DraggedNodeData">
            <summary>
            Return the currently dragged node as array of JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DraggedParentNode">
            <summary>
            Return the dragged element's source parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropIndex">
            <summary>
            Returns the dragged/dropped element's target index position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropIndicator">
            <summary>
            Return the cloned element's drop status icon while dragging.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropLevel">
            <summary>
            Returns the dragged/dropped element's target level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropTarget">
            <summary>
            Return the dragged element's destination parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DroppedNode">
            <summary>
            Return the dropped TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DroppedNodeData">
            <summary>
            Return the dropped node as array of JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Event">
            <summary>
            Return the actual event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.PreventTargetExpand">
            <summary>
            Return boolean value for preventing auto-expanding of parent node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Target">
            <summary>
            Return the target element from which drag starts/end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Left">
            <summary>
            Return the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Top">
            <summary>
            Return the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1">
            <summary>
            Specifies class for node render event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Node">
            <summary>
            Return the current rendering node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.NodeData">
            <summary>
            Return the current rendering node as JSON object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Text">
            <summary>
            Return the current rendering node text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.FailureEventArgs">
            <summary>
            Specifies class for Failure event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.FailureEventArgs.Error">
            <summary>
            Defines the error information.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeCheckEventArgs">
            <summary>
            Specifies class for NodeCheck event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Action">
            <summary>
            Return the name of action like check or un-check.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.NodeData">
            <summary>
            Return the currently checked node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Node">
            <summary>
            Return the currently checked TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeClickEventArgs">
            <summary>
            Specifies class for NodeClick event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Event">
            <summary>
            Return the actual event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Node">
            <summary>
            Return the current clicked TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.NodeData">
            <summary>
            Return the current clicked TreeView node data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Left">
            <summary>
            Return the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Top">
            <summary>
            Return the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeData">
            <summary>
            Specifies class that holds the node details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Expanded">
            <summary>
            Specifies the mapping field for expand state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.HasChildren">
            <summary>
            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Id">
            <summary>
            Specifies the ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.IsChecked">
            <summary>
            Specifies the field for checked state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.ParentID">
            <summary>
            Specifies the parent ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Selected">
            <summary>
            Specifies the mapping field for selected state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Text">
            <summary>
            Specifies the mapping field for text displayed as TreeView node's display text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeEditEventArgs">
            <summary>
            Specifies class for NodeEdit event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.InnerHtml">
            <summary>
            Gets or sets the inner HTML of TreeView node while editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.NewText">
            <summary>
            Return the current TreeView node new text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.Node">
            <summary>
            Return the current TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.NodeData">
            <summary>
            Return the current node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.OldText">
            <summary>
            Return the current TreeView node old text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeExpandEventArgs">
            <summary>
            Specifies class for NodeExpand event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Event">
            <summary>
            Event argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Node">
            <summary>
            Return the expanded/collapsed TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.NodeData">
            <summary>
            Return the expanded/collapsed node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs">
            <summary>
            Specifies class for NodeKeyPress event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Event">
            <summary>
            Return the actual event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Node">
            <summary>
            Return the current active TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.NodeData">
            <summary>
            Return the current active node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Action">
            <summary>
            Return the Key Action of Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Key">
            <summary>
            Return the Key value of Event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeSelectEventArgs">
            <summary>
            Specifies class for NodeSelect event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Action">
            <summary>
            Return the name of action like select or un-select.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Node">
            <summary>
            Return the currently selected TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.NodeData">
            <summary>
            Return the currently selected node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ActionEventArgs">
            <summary>
            Specifies class for denotes the event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ActionEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreePersistenceValues">
            <summary>
            class for persistence values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.SelectedNodes">
            <summary>
            Gets or sets SelectedNodes of the TreeView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.CheckedNodes">
            <summary>
            Gets or sets CheckedNodes of the TreeViewcomponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.ExpandedNodes">
            <summary>
            Gets or sets ExpandedNodes of the TreeViewcomponent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfTreeView`1">
            <summary>
            Specifies the TreeView component.
            </summary>
            <summary>
            Specifies the TreeView component.
            </summary>
            <summary>
            SfTreeView component.
            </summary>
            <summary>
            The TreeView component is used to represent hierarchical data in a tree like structure with advanced functions to edit, drag and drop, select with CheckBox and more.
            TreeView can be populated from a data source such as an array of data's or from DataManager.
            </summary>
            <typeparam name="TValue">"TValue parameter".</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">"First render parameter".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ChildContent">
            <exclude/>
            <summary>
            Get the RenderFragment content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowDragAndDrop">
            <summary>
            Indicates whether the TreeView allows drag and drop of nodes. To drag and drop a node in
            desktop, hold the mouse on the node, drag it to the target node and drop the node by releasing
            the mouse. For touch devices, drag and drop operation is performed by touch, touch move
            and touch end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowEditing">
            <summary>
            Enables or disables editing of the text in the TreeView node. When `AllowEditing` property is set
            to true, the TreeView allows you to edit the node by double clicking the node or by navigating to
            the node and pressing F2 key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowMultiSelection">
            <summary>
            Enables or disables multi-selection of nodes. To select multiple nodes:
             Select the nodes by holding down the CTRL key while clicking on the nodes.
             Select consecutive nodes by clicking the first node to select and hold down the SHIFT key
            and click the last node to select.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowTextWrap">
            <summary>
            Enables or disables to wrap the text in the TreeView node. 
            When the `AllowTextWrap` property is set to true, the TreeView node text content will wrap to the next line
            when its text content exceeds the width of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Animation">
            <summary>
            Specifies the type of animation applied on expanding and collapsing the nodes along with duration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AutoCheck">
            <summary>
            Allow us to specify the parent and child nodes to get auto check while we check or uncheck a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckedNodes">
            <summary>
            The `CheckedNodes` property is used to set the nodes that need to be checked or
            get the ID of nodes that are currently checked in the TreeView component.
            The `checkedNodes` property depends upon the value of `showCheckBox` property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckedNodesChanged">
            <summary>
            Specifies the callback to trigger when the checked nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CssClass">
            <summary>
            Specifies the CSS classes to be added with root element of the TreeView to help customize the appearance of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Disabled">
            <summary>
            Specifies a value that indicates whether the TreeView component is disabled or not.
            When set to true, user interaction will not be occurred in TreeView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.DropArea">
            <summary>
            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted
            for the draggable element movement. By default, the draggable element movement occurs in the entire page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableHtmlSanitizer">
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnablePersistence">
            <summary>
            Enables or disables persisting TreeView state between page reloads. If enabled, following APIs will persist.
            1. `SelectedNodes` - Represents the nodes that are selected in the TreeView component.
            2. `checkedNodes`  - Represents the nodes that are checked in the TreeView component.
            3. `expandedNodes` - Represents the nodes that are expanded in the TreeView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandOn">
            <summary>
            Specifies the action on which the node expands or collapses. The available actions are,
             `Click` - The expand/collapse operation happens when you single-click the node in both desktop and mobile devices.
             `DblClick` - The expand/collapse operation happens when you double-click the node in both desktop and mobile devices.
             `None` - The expand/collapse operation will not happen when you single-click or double-click the node in both desktop
             and mobile devices.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandedNodes">
            <summary>
            Represents the expanded nodes in the TreeView component. We can set the nodes that need to be
            expanded or get the ID of the nodes that are currently expanded by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandedNodesChanged">
            <summary>
            Specifies the callback to trigger when the expanded nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Fields">
            <summary>
            Specifies the data source and mapping fields to render TreeView nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.FullRowNavigable">
            <summary>
            If this property is set to true, then the entire TreeView node will be navigate-able instead of text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.FullRowSelect">
            <summary>
            On enabling this property, the entire row of the TreeView node gets selected by clicking a node.
            When disabled only the corresponding node's text gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.LoadOnDemand">
            <summary>
            By default, the load on demand (Lazy load) is set to true. By disabling this property, all the tree nodes are rendered at the
            beginning itself.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SelectedNodes">
            <summary>
            Represents the selected nodes in the TreeView component. We can set the nodes that need to be
            selected or get the ID of the nodes that are currently selected by using this property.
            On enabling `AllowMultiSelection` property we can select multiple nodes and on disabling
            it we can select only a single node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SelectedNodesChanged">
            <summary>
            Specifies the callback to trigger when the selected nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ShowCheckBox">
            <summary>
            Indicates that the nodes will display CheckBoxes in the TreeView.
            The CheckBox will be displayed next to the expand/collapse icon of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SortOrder">
            <summary>
            Specifies a value that indicates whether the nodes are sorted in the ascending or descending order,
            or are not sorted at all. The available types of sort order are,
             `None` - The nodes are not sorted.
             `Ascending` - The nodes are sorted in the ascending order.
             `Descending` - The nodes are sorted in the ascending order.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.HtmlAttributes">
            <summary>
            Specify the HtmlAttributes for TreeView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.TreeViewTemplates">
            <summary>
            Specifies the custom item template of TreeView Node item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ID">
            <summary>
            Sets id attribute for the treeview element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateAnimationProperties(Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings)">
            <summary>
            Specifies the Animation properties.
            </summary>
            <param name="animationSettings">"Specifies the animation settings".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.AddNodes(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Adds the collection of TreeView nodes based on target and index position. If target node is not specified,
            then the nodes are added as children of the given parentID or in the root level of TreeView.
            </summary>
            <param name="nodes">A list of nodes to be added to the TreeView.</param>
            <param name="target">Based on target nodes are added as children of the given parentID or in the root level of TreeView.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.BeginEdit(System.String)">
            <summary>
            Instead of clicking on the TreeView node for editing, we can enable it by using
            `BeginEdit` property. On passing the node ID or element through this property, the edit textBox
            will be created for the particular node thus allowing us to edit it.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.BeginEditAsync(System.String)">
            <summary>
            Instead of clicking on the TreeView node for editing, we can enable it by using
            `BeginEdit` property. On passing the node ID or element through this property, the edit textBox
            will be created for the particular node thus allowing us to edit it.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckAll(System.String[])">
            <summary>
            Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes
            as argument to this method.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckAllAsync(System.String[])">
            <summary>
            Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes
            as argument to this method.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ClearState">
            <summary>
            This method clears the Expanded, Selected and Checked interaction states in the TreeView. This method is useful when changing the data source dynamically.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ClearStateAsync">
            <summary>
            This method clears the Expanded, Selected and Checked interaction states in the TreeView. This method is useful when changing the data source dynamically.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CollapseAll(System.String[])">
            <summary>
            Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.
            </summary>
            <param name="nodesId">"Specifes the NodeID".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CollapseAllAsync(System.String[])">
            <summary>
            Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.
            </summary>
            <param name="nodesId">"Specifes the NodeID".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DisableNodes(System.String[])">
            <summary>
            Disables the collection of nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DisableNodesAsync(System.String[])">
            <summary>
            Disables the collection of nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableNodes(System.String[])">
            <summary>
            Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableNodesAsync(System.String[])">
            <summary>
            Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnsureVisible(System.String)">
            <summary>
            Ensures visibility of the TreeView node by using node ID or node element.
            When many TreeView nodes are present and we need to find a particular node, `EnsureVisible` property
            helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnsureVisibleAsync(System.String)">
            <summary>
            Ensures visibility of the TreeView node by using node ID or node element.
            When many TreeView nodes are present and we need to find a particular node, `EnsureVisible` property
            helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandAll(System.String[])">
            <summary>
            Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandAllAsync(System.String[])">
            <summary>
            Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetAllCheckedNodes">
            <summary>
            Gets all the checked nodes including child, whether it is loaded or not.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetDisabledNodes">
            <summary>
            Gets all the disabled nodes including child, whether it is loaded or not.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetDisabledNodesAsync">
            <summary>
            Gets all the disabled nodes including child, whether it is loaded or not.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetNode(System.String)">
            <summary>
            Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Return TreeData".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetTreeData(System.String)">
            <summary>
            To get the updated data source of TreeView after performing some operation like drag and drop, node editing,
            node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.
             If you pass the ID of TreeView node as arguments for this method then it will return the updated data source
            of the corresponding node otherwise it will return the entire updated data source of TreeView.
             The updated data source also contains custom attributes if you specified in data source.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Return TreeData".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RemoveNodes(System.String[])">
            <summary>
            Removes the collection of TreeView nodes by passing the array of node details as argument to this method.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UncheckAll(System.String[])">
            <summary>
            Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes
            as argument to this method.
            </summary>
            <returns>"Task".</returns>
            <param name="nodesId">"Specifies the Id of the node".</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UncheckAllAsync(System.String[])">
            <summary>
            Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes
            as argument to this method.
            </summary>
            <returns>"Task".</returns>
            <param name="nodesId">"Specifies the Id of the node".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateNode(System.String,System.String)">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="newText">Specifies the new text of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.Refresh">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RefreshNode(System.String,System.Collections.Generic.List{`0})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="newData">Specifies the new Data of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RefreshNodeAsync(System.String,System.Collections.Generic.List{`0})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="newData">Specifies the new Data of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetRootElement">
            <summary>
            Returns the route element reference of the component.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.MoveNodes(System.String[],System.String,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="sourceNodes">Specifies the array of TreeView nodes ID.</param>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="index">Specifies the index to place the moved nodes in the target element.</param>
            <param name="preventTargetExpand">If set to true, the target parent node will be prevented from auto expanding.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetPropertyChanges">
            <summary>
            Specifies the particular property is changes or not.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DropNodeAsSibling(Syncfusion.Blazor.Navigations.Internal.DropTreeArgs)">
            <summary>
            Drop Node as Sibling for TreeView component.
            </summary>
            <returns>"Task".</returns>
            <param name="args">"Specifies the DropTree argument".</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DropNodeAsChild(Syncfusion.Blazor.Navigations.Internal.DropTreeArgs)">
            <summary>
            Drop Node as Sibling for TreeView component.
            </summary>
            <param name="args">"Specifies the DropTree argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerDragStartEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Start Event for TreeView component.
            </summary>
            <param name="args">"Node Drag Start argument".</param>
            <param name="left">"Dragged Node position".</param>
            <param name="top">"Dragged Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeDraggingEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Dragging Event for TreeView component.
            </summary>
            <param name="args">"Node Drag Start argument".</param>
            <param name="left">"Dragging Node position".</param>
            <param name="top">"Dragging Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerDragStopEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="args">"Node Drop Start argument".</param>
            <param name="left">"Drag stop Node position".</param>
            <param name="top">"Drag stop Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeDropped(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="args">"Dropped argument".</param>
            <param name="left">"Dropped stop Node position".</param>
            <param name="top">"Dropped stop Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateExpandedNode(System.String[])">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="parentNodes">"Parent node".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeSelectingEvent(Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs)">
            <summary>
            Trigger Node Selecting Event for TreeView component.
            </summary>
            <param name="selectEventArgs">"Select event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeEditingEvent(Syncfusion.Blazor.Navigations.NodeEditEventArgs)">
            <summary>
            Trigger Node Editing Event for TreeView component.
            </summary>
            <param name="args">"Node Edit event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CreatedEvent">
            <summary>
            Trigger TreeView created event.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeExpandingEvent(Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs)">
            <summary>
            Trigger Node Expanding Event for TreeView component.
            </summary>
            <param name="arguments">"Expand event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCheckingEvent(Syncfusion.Blazor.Navigations.NodeCheckEventArgs)">
            <summary>
            Trigger Node Checking Event for TreeView component.
            </summary>
            <param name="args">"NodeCheck event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeClickingEvent(Syncfusion.Blazor.Navigations.ClickEventArgs,System.String,System.Double,System.Double)">
            <summary>
            Trigger Node Click Event for TreeView component.
            </summary>
            <param name="eventArgs">"NodeClick event argument".</param>
            <param name="id">"Clicked node id".</param>
            <param name="left">"Clicked node Left position".</param>
            <param name="top">"Clicked node Top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeExpandedEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Trigger Node Expanded Event for TreeView component.
            </summary>
            <param name="args">"Node Expanded event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateData(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Update the latest data source values to TreeView component (Drag and drop).
            </summary>
            <param name="dataSource">"Specifies the datasource".</param>
            <param name="isUpdateChecked">"Specifies the checked is true or not".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCollapsingEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Collapse Action for TreeView.
            </summary>
            <param name="args">"NodeCollapsing event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerKeyboardEvent(Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs,System.String,System.String,System.String)">
            <summary>
            Collapsed Action for TreeView.
            </summary>
            <param name="args">"Key press event argument".</param>
            <param name="id">"Specifies the Id".</param>
            <param name="keyAction">"Specifies the key action".</param>
            <param name="keyValue">"Specifies the Key value".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCollapsedEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Collapsed Action for TreeView.
            </summary>
            <param name="args">"NodeCollapsed event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values to TreeView component instance.
            </summary>
            <param name="key">"Specifies the key field".</param>
            <param name="details">"Specifies the details field".</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse">
            <summary>
            Specifies the animation to appear while collapsing the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse.ComponentDispose">
            <summary>
            Dispose the Expand animation value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand">
            <summary>
            Specifies the animation to appear while expanding the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand.OnInitializedAsync">
            <summary>
             Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand.ComponentDispose">
            <summary>
            Dispose the Expand animation value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewEvents`1">
            <summary>
            The TreeView allows us to control the component by using events.
            </summary>
            <typeparam name="TValue">"Tvalue paramter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnActionFailure">
            <summary>
            Triggers when any TreeView action failed to fetch the desired results.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.Created">
            <summary>
            Triggers when the TreeView control is created successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.DataBound">
            <summary>
            Triggers when data source is populated in the TreeView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.DataSourceChanged">
            <summary>
            Triggers when data source is changed in the TreeView. The data source will be changed after performing some operation like
            drag and drop, node editing, adding and removing node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.Destroyed">
            <summary>
            Triggers when the TreeView control is destroyed successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeRender">
            <summary>
            Triggers before the TreeView node is appended to the TreeView element. It helps to customize specific nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnKeyPress">
            <summary>
            Triggers when key press is successful. It helps to customize the operations at key press.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeChecked">
            <summary>
            Triggers when the TreeView node is checked/unchecked successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeChecking">
            <summary>
            Triggers before the TreeView node is to be checked/unchecked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeClicked">
            <summary>
            Triggers when the TreeView node is clicked successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeCollapsed">
            <summary>
            Triggers when the TreeView node collapses successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeCollapsing">
            <summary>
            Triggers before the TreeView node collapses.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragStart">
            <summary>
            Triggers when the TreeView node drag (move) starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragStop">
            <summary>
            Triggers when the TreeView node dragging (move) stops.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragged">
            <summary>
            Triggers when the TreeView node drag (move) is stopped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeDropped">
            <summary>
            Triggers when the TreeView node is dropped on target element successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeEdited">
            <summary>
            Triggers when the TreeView node is renamed successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeEditing">
            <summary>
            Triggers before the TreeView node is renamed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeExpanded">
            <summary>
            Triggers when the TreeView node expands successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeExpanding">
            <summary>
            Triggers before the TreeView node is to be expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeSelected">
            <summary>
            Triggers when the TreeView node is selected/unselected successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeSelecting">
            <summary>
            Triggers before the TreeView node is selected/unselected.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1">
            <summary>
             A class used for configuring the TreeView child element fields properties.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue paramater".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1.ChildContent">
            <summary>
            Specifies the Treeview child content.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1">
            <summary>
             A class used for configuring the TreeView fields setting properties.
            </summary>
            <typeparam name="TValue">"Specifies the TValue parameter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.ChildContent">
            <summary>
            Specifies the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.DataSourceChanged">
            <summary>
            Invokes when data source changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings">
            <summary>
            A class used for configuring the TreeView animation properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent">
            <exclude/>
            <summary>
            Child Content for the Treeview Animation Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.Collapse">
            <summary>
            Specifies the animation to appear when collapsing the TreeView item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.Expand">
            <summary>
            Specifies the animation to appear when expanding the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewTemplates`1">
            <summary>
            The TreeView component allows you to customize the look of TreeView nodes using Templates.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewTemplates`1.NodeTemplate">
            <summary>
            Specifies the NodeTemplate.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewTemplates`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Clicked">
            <summary>
            The event will be fired on clicking the Toolbar elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Created">
            <summary>
            The event will be fired when the control is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Destroyed">
            <summary>
            The event will be fired when the control gets destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogAnimationSettings">
            <summary>
            The class provides data for the animation to Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogAnimationSettings.Delay">
            <summary>
            Specifies the delay in milliseconds to start the animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogAnimationSettings.Duration">
            <summary>
            Specifies the duration in milliseconds that the animation takes to open or close the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogAnimationSettings.Effect">
            <summary>
            Specifies the animation name that should be applied on while opening and closing the dialog.
            If the user sets Fade animation, the dialog will open with the `FadeIn` effect and close with the `FadeOut` effect.
            The following are the list of animation effects available to configure to the dialog:
            1. Fade
            2. FadeZoom
            3. FlipLeftDown
            4. FlipLeftUp
            5. FlipRightDown
            6. FlipRightUp
            7. FlipXDown
            8. FlipXUp
            9. FlipYLeft
            10. FlipYRight
            11. SlideBottom
            12. SlideLeft
            13. SlideRight
            14. SlideTop
            15. Zoom
            16. None.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogButton">
            <summary>
            Provides data to configure the Dialog button properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.ChildContent">
            <summary>
            Gets or sets the content of the Spinner element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.Content">
            <summary>
            Defines the text `content` of the Button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.CssClass">
            <summary>
            Defines the class/multiple classes separated by a space in the Button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.Disabled">
            <summary>
            Specifies a value that indicates whether the Button is `disabled`.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left (RTL) direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IconCss">
            <summary>
            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IconPosition">
            <summary>
            Positions the icon before or after the text content in the Button.
            The possible values are: Left: The icon will be positioned to the left of the text content.
            Right: The icon will be positioned to the right of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IsPrimary">
            <summary>
            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IsToggle">
            <summary>
            Makes the Button toggle, when set to `true`.
            When you click it, the state changes from normal to active.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.OnClick">
            <summary>
            Event triggers when `click` the dialog button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.Type">
            <summary>
            Specifies the type of the button.
            Possible values are Button, Submit, and Reset.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IsFlat">
            <summary>
            Specifies the Flat appearance of the dialog buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogButton.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogButton.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogButtons">
            <summary>
            A list of buttons that are used to configure the Dialog buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButtons.ChildContent">
            <summary>
            Gets or sets the content of the Dialog Button element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogButtons.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender"> Set to true if this is the first time OnAfterRender(Boolean) has been invoked.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogEvents">
            <summary>
            Configure handlers to handle the events with the Dialog component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Closed">
            <summary>
            Event triggers after the dialog has been closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Created">
            <summary>
            Event triggers when the dialog is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Destroyed">
            <summary>
            Event triggers when the dialog is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnClose">
            <summary>
            Event triggers before the dialog is closed.
            If you cancel this event, the dialog remains opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnDrag">
            <summary>
            Event triggers when the user drags the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnDragStart">
            <summary>
            Event triggers when the user begins dragging the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnDragStop">
            <summary>
            Event triggers when the user stops dragging the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnOpen">
            <summary>
            Event triggers when the dialog is being opened.
            If you cancel this event, the dialog remains closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnOverlayClick">
            <summary>
            Event triggers when the overlay of the dialog is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnOverlayModalClick">
            <summary>
            Event triggers when the overlay of the dialog is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnResizeStart">
            <summary>
            Event triggers when the user begins to resize a dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnResizeStop">
            <summary>
            Event triggers when the user stops to resize a dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Opened">
            <summary>
            Event triggers when a dialog is opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Resizing">
            <summary>
            Event triggers when the user resizes the dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogPositionData">
            <summary>
            Configures to display a dialog in the custom position within the document or target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogPositionData.X">
            <summary>
            Specifies the offset left value to position the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogPositionData.Y">
            <summary>
            Specifies the offset top value to position the dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogPositionData.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogPositionData.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogTemplates">
            <summary>
            Configure templates to display within a header, content, and footer section of Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogTemplates.Header">
            <summary>
            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.
            The dialog will be displayed without the header if the header property is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogTemplates.Content">
            <summary>
            Specifies the value that can be displayed in the dialog's content section.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate">
            <summary>
            Defines the footer template of the dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogTemplates.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.SfDialog">
            <summary>
            Represents the dialog component that displays the information and gets input from the user.
            Two types of dialog components are `Modal and Modeless(non-modal)` depending on their interaction with the parent application.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender"> Set to true if this is the first time OnAfterRender(Boolean) has been invoked.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ID">
            <summary>
            Specifies the unique identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ChildContent">
            <summary>
            Sets content for the Dialog element including HTML support and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.AllowDragging">
            <summary>
            Specifies the value whether the dialog component can be dragged by the end-user.
            The dialog allows a user to drag by selecting the header and dragging it for re-positioning the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.AnimationSettings">
            <summary>
            Specifies the animation settings of the dialog component.
            The animation effect can be applied to open and close the dialog with duration and delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Buttons">
            <summary>
            Configures the action `Buttons` that contains button properties with primary attributes and the click events.
            One or more action buttons can be configured to the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.CloseOnEscape">
            <summary>
            Specifies the Boolean value whether the dialog can be closed on pressing the escape (ESC) key.
            that is used to control the dialog's closing behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Content">
            <summary>
            Specifies the value that can be displayed in the dialog's content section.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the dialog.
            One or more custom CSS classes can be added to a dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.EnableResize">
            <summary>
            Specifies the value whether the dialog component can be resized by the end-user.
            If the enableResize is true, the dialog component creates a grip to resize it in a diagonal direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ResizeHandles">
            <summary>
            Specifies the resize handles direction in the dialog component that can be resized by the end-user.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left (RTL) direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.FooterTemplate">
            <summary>
            Specifies the template value that can be displayed with the dialog's footer area.
            This is an optional property and can be used only when the footer is occupied with information or custom components.
            By default, the footer is configured with the action buttons.
            If the footer template is configured to the dialog, the buttons property will be disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Header">
            <summary>
            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.
            The dialog will be displayed without the header if the header property is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Height">
            <summary>
            Specifies the height of the dialog component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.HtmlAttributes">
            <summary>
            You can add the additional Html attributes such as id, title, etc., to the dialog element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.IsModal">
            <summary>
            Specifies the Boolean value whether the dialog can be displayed as modal or non-modal.
            `Modal`: It creates an overlay that disables interaction with the parent application and
             the user who should respond with modal before continuing with other applications.
            `Modeless`: It does not prevent user interaction with the parent application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.MinHeight">
            <summary>
            Specifies the min-height of the dialog component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Position">
            <summary>
            Specifies the value where the dialog can be positioned within the document or target.
            The position can be represented with pre-configured positions or specific X and Y values.
            `X value`: left, center, right, or offset value.
            `Y value`: top, center, bottom, or offset value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ShowCloseIcon">
            <summary>
            Specifies the value that represents whether the close icon can be shown in the dialog’s title section.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Target">
            <summary>
            Specifies the target element in which the dialog should be displayed.
            The default value is null, which refers to the `Document.body` element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Visible">
            <summary>
            Specifies the value that represents whether the dialog component is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.VisibleChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Width">
            <summary>
            Specifies the width of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ZIndex">
            <summary>
            Specifies the z-order for rendering that determines whether the dialog is displayed
            in front or behind of another component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.IsLoadOnDemand">
            <summary>
            Specifies the value that represents whether the Dialog element re-render or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.GetButton(System.Int32)">
            <summary>
            Returns the dialog button instances by index.
            Based on that, you can dynamically change the button states.
            </summary>
            <param name="index">Specifies the button index.</param>
            <returns>Returns the dialog button instances by index.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.GetButtonItems">
            <summary>
            Returns all the dialog button’s instances which are rendered in the dialog’s footer.
            Based on that, you can dynamically change the buttons states.
            </summary>
            <returns>Returns all the dialog button’s instances.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.HideAsync">
            <summary>
            Overloaded.
            Closes the dialog if it is in a visible state.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Hide">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.HideAsync(System.String)">
            <summary>
            Overloaded.
            Closes the dialog if it is in a visible state.
            </summary>
            <param name="args">Specifies the interaction type.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Hide(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.HideAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Overloaded.
            Closes the dialog if it is in a visible state.
            </summary>
            <param name="args">Specifies the interaction type.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Hide(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.HideAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Overloaded.
            Closes the dialog if it is in a visible state.
            </summary>
            <param name="args">Specifies the keyboard arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Hide(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.RefreshPositionAsync">
            <summary>
            Refreshes the dialog's position when the user changes its height and width dynamically.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.RefreshPosition">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ShowAsync(System.Nullable{System.Boolean})">
            <summary>
            Opens the dialog if it is in a hidden state.
            To open the dialog with full-screen width, set the parameter as true.
            </summary>
            <param name="isFullScreen">Specifies dialog will open on full screen or not.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Show(System.Nullable{System.Boolean})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.CreatedEvent">
            <summary>
            Method invoked after component has been rendered.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.OpenEvent(System.String)">
            <summary>
            Method invoked after dialog opened.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.CloseEvent(System.String)">
            <summary>
            Method invoked after dialog closed.
            </summary>
            <param name="classes">Specifiy the class names.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.DragStartEvent(Syncfusion.Blazor.Popups.DragStartEventArgs)">
            <summary>
            Method invoked when start to drag the dialog.
            </summary>
            <param name="args">Defines the DragStart Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.DragEvent(Syncfusion.Blazor.Popups.DragEventArgs)">
            <summary>
            Method invoked when drag the dialog.
            </summary>
            <param name="args">Defines the Drag Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.DragStopEvent(Syncfusion.Blazor.Popups.DragStopEventArgs)">
            <summary>
            Method invoked when complete the drag action.
            </summary>
            <param name="args">Defines the DragStop Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ResizeStartEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Method invoked when start to resize the dialog.
            </summary>
            <param name="args">Defines the Mouse Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ResizingEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Method invoked while resizing the dialog.
            </summary>
            <param name="args">Defines the Mouse Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ResizeStopEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Method invoked after the dialog resize.
            </summary>
            <param name="args">Defines the Mouse Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ShowDialog(System.Nullable{System.Boolean})">
            <summary>
            Method invoked after the dialog resize.
            </summary>
            <param name="isFullScreen">Specifies the dialog is opened on full screen or not.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.CloseDialog(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method invoked after dialog closed.
            </summary>
            <param name="args">Specifies KeyBoard arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.ResizeDirection">
            <summary>
            Defines the resize handles in the dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.SouthEast">
            <summary>
            Defines edge resize of the dialog in the south east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.South">
            <summary>
            Defines border resize of the dialog in the south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.North">
            <summary>
            Defines border resize of the dialog in the south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.East">
            <summary>
            Defines border resize of the dialog in the south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.West">
            <summary>
            Defines border resize of the dialog in the south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.NorthEast">
            <summary>
            Defines edge resize of the dialog in the north east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.NorthWest">
            <summary>
            Defines edge resize of the dialog in the north west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.SouthWest">
            <summary>
            Defines edge resize of the dialog in the south west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.All">
            <summary>
            Defines border resize of the dialog in all the direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.ButtonType">
            <summary>
            Defines the type of a button in the dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ButtonType.Button">
            <summary>
            Defines ButtonType as Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ButtonType.Submit">
            <summary>
            Defines ButtonType as Submit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ButtonType.Reset">
            <summary>
            Defines ButtonType as Reset.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogEffect">
            <summary>
            Specifies the Dialog animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.Fade">
            <summary>
            Defines DialogEffect as Fade.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FadeZoom">
            <summary>
            Defines DialogEffect as FadeZoom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipLeftDown">
            <summary>
            Defines DialogEffect as FlipLeftDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipLeftUp">
            <summary>
            Defines DialogEffect as FlipLeftUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipRightDown">
            <summary>
            Defines DialogEffect as FlipRightDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipRightUp">
            <summary>
            Defines DialogEffect as FlipRightUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipXDown">
            <summary>
            Defines DialogEffect as FlipXDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipXUp">
            <summary>
            Defines DialogEffect as FlipXUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipYLeft">
            <summary>
            Defines DialogEffect as FlipYLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipYRight">
            <summary>
            Defines DialogEffect as FlipYRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.SlideBottom">
            <summary>
            Defines DialogEffect as SlideBottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.SlideLeft">
            <summary>
            Defines DialogEffect as SlideLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.SlideRight">
            <summary>
            Defines DialogEffect as SlideRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.SlideTop">
            <summary>
            Defines DialogEffect as SlideTop.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.Zoom">
            <summary>
            Defines DialogEffect as Zoom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.None">
            <summary>
            Defines DialogEffect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.OverlayModalClickEventArgs">
            <summary>
            Provides data for overLayClick event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OverlayModalClickEventArgs.Event">
            <summary>
            Defines the mouse event arguments when the event is triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OverlayModalClickEventArgs.PreventFocus">
            <summary>
            Specifies the value whether the default focus on the first focusable element in a dialog can be prevented.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.BeforeCloseEventArgs">
            <summary>
            Provides data for the BeforeClose event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.ClosedBy">
            <summary>
            Determines whether the dialog is closed by "Close Icon", "Escape", "User Action".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.Container">
            <summary>
            Returns the root container element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.IsInteracted">
            <summary>
            Determines whether the event is triggered by interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.BeforeOpenEventArgs">
            <summary>
            Provides data for the BeforeOpen event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeOpenEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeOpenEventArgs.Container">
            <summary>
            Returns the root container element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeOpenEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeOpenEventArgs.MaxHeight">
            <summary>
            Specifies the value to override the max height of dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.CloseEventArgs">
            <summary>
            Provides data for the Close event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.ClosedBy">
            <summary>
            Determines whether the dialog is closed by "Close Icon", "Escape", "User Action".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Container">
            <summary>
            Returns the root container element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.IsInteracted">
            <summary>
            Determines whether the event is triggered by interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DragEventArgs">
            <summary>
            Provides data for the Dragging event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragEventArgs.Target">
            <summary>
            Returns the target element of the dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DragStartEventArgs">
            <summary>
            Provides data for the DragStart event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStartEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStartEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStartEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStartEventArgs.Target">
            <summary>
            Returns the target element of the dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DragStopEventArgs">
            <summary>
            Provides data for the DragStop event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Helper">
            <summary>
            Returns the helper element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Target">
            <summary>
            Returns the target element of the dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.OpenEventArgs">
            <summary>
            Provides data for the DialogOpen event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.Container">
            <summary>
            Returns the root container element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.PreventFocus">
            <summary>
            Specifies the value whether the default focus on the first focusable element in a dialog can be prevented.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TargetType">
            <summary>
            Defines the types of target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TargetType.Relative">
            <summary>
            Defines the TargetType as Relative.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TargetType.Container">
            <summary>
            Defines the TargetType as Container.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.CollisionType">
            <summary>
            Defines the types of collision.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.CollisionType.None">
            <summary>
            Defines the CollisionType as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.CollisionType.Flip">
            <summary>
            Defines the CollisionType as Flip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.CollisionType.Fit">
            <summary>
            Defines the CollisionType as Fit.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.PopupModel">
            <summary>
            Provides data for the PopupModel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.Collision">
            <summary>
            Specifies the collision handler settings of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.Position">
            <summary>
            Specifies the popup element position, respective to the relative element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.RelateTo">
            <summary>
            Specifies the element selector for relative container element of the popup element .Based on the relative element, popup element will be positioned.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.TargetType">
            <summary>
            Specifies the relative element type of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.OffsetX">
            <summary>
            specifies the popup element offset-x value, respective to the relative element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.OffsetY">
            <summary>
            specifies the popup element offset-y value, respective to the relative element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.CollisionAxis">
            <summary>
             Provides information about a CollisionAxis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CollisionAxis.X">
            <summary>
            Specify the collision handler for a X-Axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CollisionAxis.Y">
            <summary>
            specify the collision handler for a Y-Axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.PositionDataModel">
            <summary>
             Provides information about a PositionDataModel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PositionDataModel.X">
            <summary>
            Specify the offset left value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PositionDataModel.Y">
            <summary>
            Specify the offset top value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.Effect">
            <summary>
            Animation effects that are applicable to the Tooltip. A different animation can be set for tooltip open and close action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FadeIn">
            <summary>
            Tooltip open/close actions occur with the FadeIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FadeOut">
            <summary>
            Tooltip open/close actions occur with the FadeOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FadeZoomIn">
            <summary>
            Tooltip open/close actions occur with the FadeZoomIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FadeZoomOut">
            <summary>
            Tooltip open/close actions occur with the FadeZoomOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipXDownIn">
            <summary>
            Tooltip open/close actions occur with the FlipXDownIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipXDownOut">
            <summary>
            Tooltip open/close actions occur with the FlipXDownOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipXUpIn">
            <summary>
            Tooltip open/close actions occur with the FlipXUpIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipXUpOut">
            <summary>
            Tooltip open/close actions occur with the FlipXUpOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipYLeftIn">
            <summary>
            Tooltip open/close actions occur with the FlipYLeftIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipYLeftOut">
            <summary>
            Tooltip open/close actions occur with the FlipYLeftOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipYRightIn">
            <summary>
            Tooltip open/close actions occur with the FlipYRightIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipYRightOut">
            <summary>
            Tooltip open/close actions occur with the FlipYRightOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.ZoomIn">
            <summary>
            Tooltip open/close actions occur with the ZoomIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.ZoomOut">
            <summary>
            Tooltip open/close actions occur with the ZoomOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.None">
            <summary>
            Tooltip open/close actions occur without any animation effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.OpenMode">
            <summary>
            To set the open modes available for the Tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Auto">
            <summary>
            In Auto mode, the tooltip appears when you hover over the target or when the target element receives the focus.
            In mobile devices, the tooltip opens on tap and hold of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Hover">
            <summary>
            In Hover mode, the tooltip appears when you hover over the target on the desktop.
            In mobile devices, the tooltip opens on a tap and hold of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Click">
            <summary>
            In Click mode, the tooltip appears when you click a target element on the desktop.
            In mobile devices, Tooltip appears with a single tap on the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Focus">
            <summary>
            In Focus mode, Tooltip appears when you focus on a target element in desktop.
            In mobile devices, Tooltip appears with a single tap on the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Custom">
            <summary>
            In Custom mode, the tooltip will not appear on any default action. You have to bind your custom events and use either open or close public methods in both desktop and mobile devices.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.Position">
            <summary>
            To set the applicable positions where the Tooltip can be displayed over specific target elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.TopCenter">
            <summary>
            Positions the Tooltip to the top-center of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.TopLeft">
            <summary>
            Positions the Tooltip to the top-left of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.TopRight">
            <summary>
            Positions the Tooltip to the top-right of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.BottomLeft">
            <summary>
            Positions the Tooltip to the bottom-left of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.BottomCenter">
            <summary>
            Positions the Tooltip to the bottom-center of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.BottomRight">
            <summary>
            Positions the Tooltip to the bottom-right of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.LeftTop">
            <summary>
            Positions the Tooltip to the left-top of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.LeftCenter">
            <summary>
            Positions the Tooltip to the left-center of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.LeftBottom">
            <summary>
            Positions the Tooltip to the left-bottom of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.RightTop">
            <summary>
            Positions the Tooltip to the right-top of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.RightCenter">
            <summary>
            Positions the Tooltip to the right-center of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.RightBottom">
            <summary>
            Positions the Tooltip to the right-bottom of the target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TipPointerPosition">
            <summary>
            Applicable tip positions are attached to the Tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TipPointerPosition.Auto">
            <summary>
            Automatically adjusts the tip pointer position.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TipPointerPosition.Start">
            <summary>
            Positions the tip pointer at the start of the Tooltip element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TipPointerPosition.Middle">
            <summary>
            Positions the tip pointer in the middle of the Tooltip element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TipPointerPosition.End">
            <summary>
            Positions the tip pointer at the end of the Tooltip element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TooltipAnimationSettings">
            <summary>
            Animation options that are common for both open and close actions of the Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipAnimationSettings.Delay">
            <summary>
            It is used to denote the delay value in milliseconds and indicating the waiting time before the animation begins.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipAnimationSettings.Duration">
            <summary>
            It is used to denote the duration of the animation that is completed per the animation cycle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipAnimationSettings.Effect">
            <summary>
            It is used to apply the Animation effect on the Tooltip, during open and close actions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TooltipEventArgs">
            <summary>
            Interface for Tooltip event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Cancel">
            <summary>
            It determines whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.CollidedPosition">
            <summary>
            It is used to denote the Collided Tooltip position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Element">
            <summary>
            It is used to denote the Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Event">
            <summary>
            It is used to specify the current event object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.HasText">
            <summary>
            It determines whether the tooltip content contains text character or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Top">
            <summary>
            Specifies the clientY position of the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Left">
            <summary>
            Specifies the clientX position of the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Target">
            <summary>
            It is used to denote the current target element where the Tooltip is to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Type">
            <summary>
            It is used to denote the type of triggered event.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.TooltipEventArgs.Equals(System.Object)">
            <exclude/>
            <summary>
            Compares the obj.
            </summary>
            <param name="obj">obj.</param>
            <returns>="obj".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.TooltipEventArgs.GetHashCode">
            <summary>
            Gets the HashCode.
            </summary>
            <exclude/>
            <returns>int.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.AnimationModel">
            <summary>
            Interface for a class Animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.AnimationModel.Close">
            <summary>
            Animation settings to be applied to the Tooltip when it is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.AnimationModel.Open">
            <summary>
            Animation settings to be applied on the Tooltip, while it is being shown over the target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.SfTooltip">
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Closed">
            <summary>
            The event `Closed` will be fired when the Tooltip component gets closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Opened">
            <summary>
            The event `Opened` will be fired after the Tooltip component gets opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OnClose">
            <summary>
            The event `OnClose` will be fired before the Tooltip hides from the screen.
            The Tooltip close can be prevented by setting the cancel argument value to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OnCollision">
            <summary>
            The event `OnCollision` will be fired for every collision fit calculation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OnOpen">
            <summary>
            The event `OnOpen` will be fired before the Tooltip is displayed over the target element.
            When one of its arguments `cancel` is set to true, the Tooltip display can be prevented.
            This event is mainly used to refresh the Tooltip positions dynamically or to set customized styles in it and so on.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OnRender">
            <summary>
            The event `OnRender` will be fired before the Tooltip and its contents will be added to the DOM.
            When one of its arguments `cancel` is set to true, the Tooltip can be prevented from rendering on the page.
            This event is mainly used to customize the Tooltip before it shows up on the screen.
            For example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Created">
            <summary>
            The event `Created` will be fired after the Tooltip component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Destroyed">
            <summary>
            The event `Destroyed` will be fired when the Tooltip component is destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.ChildContent">
            <exclude/>
            <summary>
            Defines the content which has to be passed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.ID">
            <exclude/>
            <summary>
            Defines the Id of the Tooltip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.ContentTemplate">
            <exclude/>
            <summary>
            Defines the content template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Animation">
            <summary>
            It is used to customize the animation of the Tooltip while opening and closing.
            The animation property also allows you to set delay, duration, and various other effects of your choice.
            You can set the same or different animation options to the Tooltip when it is in the open or close state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.CloseDelay">
            <summary>
            To close the Tooltip after a specified delay in millisecond.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Content">
            <summary>
            To display the content of the Tooltip which can be a string element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.CssClass">
            <summary>
            To customize the Tooltip which accepts the custom CSS class names that define specific
            user-defined styles and themes to be applied to the Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.EnableHtmlSanitizer">
            <summary>
            This property has been deprecated as we achieve this behavior by using ChildContent of render fragment type and and Content as a string value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.EnablePersistence">
            <summary>
            As there are no properties required to persist in tooltip component, this property is deprecated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.EnableRtl">
            <summary>
            To enable or disable the rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.WindowCollision">
            <summary>
            It is used to set the collision target element as page viewport (window) or Tooltip element, when using the target.
            If this property is enabled, tooltip will perform the collision calculation between the target elements.
            and viewport(window) instead of Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Height">
            <summary>
            To set the height of the Tooltip component which accepts the string values.
            When the Tooltip content gets overflowed due to the height value, then the scroll mode will be enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.IsSticky">
            <summary>
            To display the Tooltip in an open state until it is closed manually.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.MouseTrail">
            <summary>
            It allows the Tooltip to follow the mouse pointer moves over the specified target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OffsetX">
            <summary>
            It sets the space between the target and Tooltip element in X-axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OffsetY">
            <summary>
            It sets the space between the target and Tooltip element in Y-axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OpenDelay">
            <summary>
            To open the Tooltip after a specified delay in millisecond.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OpensOn">
            <summary>
            To determine the type of open mode to display the Tooltip content.
            The available open modes are Auto, Hover, Click, Focus, and Custom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Position">
            <summary>
            To set the position of the Tooltip element with respect to the Target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.ShowTipPointer">
            <summary>
            To show or hide the tip pointer of the Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Target">
            <summary>
            To denote the target selector where the Tooltip needs to be displayed.
            The target element is considered as the parent container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.TipPointerPosition">
            <summary>
            It is used to customize the position of the tip pointer on the tooltip. The available options are Auto, Start, Middle, and End.
            When set to auto, the tip pointer gets auto adjusted within the space of the target's length and does not point outside.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Width">
            <summary>
            To set the width of the Tooltip component which accepts a string value.
            When set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.HtmlAttributes">
            <summary>
            Adds the additional html attributes to the Tooltip element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.Open(System.Nullable{Microsoft.AspNetCore.Components.ElementReference},Syncfusion.Blazor.Popups.TooltipAnimationSettings)">
            <summary>
            It is used to show the Tooltip on the specified target with specific animation settings.
            You can also pass the additional arguments like target element in which the tooltip should appear and animation settings for the tooltip open action.
            </summary>
            <param name="element">element.</param>
            <param name="animation">animation.</param>
            <returns>="Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.OpenAsync(System.Nullable{Microsoft.AspNetCore.Components.ElementReference},Syncfusion.Blazor.Popups.TooltipAnimationSettings)">
            <summary>
            It is used to show the Tooltip on the specified target with specific animation settings.
            You can also pass the additional arguments like target element in which the tooltip should appear and animation settings for the tooltip open action.
            </summary>
            <param name="element">element.</param>
            <param name="animation">animation.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.Close(Syncfusion.Blazor.Popups.TooltipAnimationSettings)">
            <summary>
            It is used to hide the Tooltip with a specific animation effect. You can pass the animation settings for tooltip close action.
            </summary>
            <param name="animation">animation.</param>
            <returns>="Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.CloseAsync(Syncfusion.Blazor.Popups.TooltipAnimationSettings)">
            <summary>
            It is used to hide the Tooltip with a specific animation effect. You can pass the animation settings for tooltip close action.
            </summary>
            <param name="animation">animation.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.Refresh">
            <summary>
            Refresh the tooltip component when the target element is dynamically used.
            </summary>
            <returns>="Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.RefreshAsync">
            <summary>
            Refresh the tooltip component when the target element is dynamically used.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.RefreshPosition(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})">
            <summary>
            Dynamically refreshes the tooltip element position based on the target element.
            </summary>
            <param name="target">target.</param>
            <returns>="Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.RefreshPositionAsync(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})">
            <summary>
            Dynamically refreshes the tooltip element position based on the target element.
            </summary>
            <param name="target">target.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.GetEventsList">
            <summary>
            The method to get events list.
            </summary>
            <exclude/>
            <returns>eventList.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.GetProperties">
            <summary>
            The method to get Properties.
            </summary>
            <exclude/>
            <returns>properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.GetPorpertyChanges">
            <summary>
            The method to get Property changes.
            </summary>
            <exclude/>
            <returns>properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.CreateTooltip(System.Boolean)">
            <exclude/>
            <summary>
            Add/Removes the Tooltip Element.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.StickyClose">
            <exclude/>
            <summary>
            Closes the Tooltip Element.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerBeforeRenderEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before render event.
            </summary>
            <returns>="Task".</returns>
            <param name="args">args.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerBeforeCollisionEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before collision event.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerBeforeOpenEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before open event.
            </summary>
            <param name="args">args.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerOpenedEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before opened event.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerBeforeCloseEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before close event.
            </summary>
            <returns>"Task".</returns>
            <param name="args">args.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerClosedEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before closed event.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TooltipTemplates">
            <summary>
            Configure templates to display content within the tooltip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent">
            <exclude/>
            <summary>
            Defines the content which has to be passed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipTemplates.Content">
            <exclude/>
            <summary>
            Defines the content to be passed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.TooltipTemplates.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.Internal.DialogContent.ChildContent">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SpinnerEvents">
            <summary>
            Configure event handlers for the Spinner component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEvents.Created">
            <summary>
            Event triggers after the Spinner is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEvents.OnBeforeOpen">
            <summary>
            Event triggers before the Spinner is opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEvents.OnBeforeClose">
            <summary>
            Event triggers before the Spinner is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEvents.Destroyed">
            <summary>
            Event triggers after the Spinner is destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SpinnerEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SpinnerTemplates">
            <summary>
            Configure the template of the Spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerTemplates.Template">
            <summary>
            Defines the template of the Spinner.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SpinnerTemplates.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SfSpinner">
            <summary>
            Represents the spinner component that displays when spinner is shown.
            </summary>
            <exclude/> 
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender"> Set to true if this is the first time OnAfterRender(Boolean) has been invoked.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.Label">
            <summary>
            Specifies the label for the Spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the Spinner.
            One or more custom CSS classes can be added to a Spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.ChildContent">
            <exclude/>
            <summary>
            Specified content of the Spinner element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.Visible">
            <summary>
            Specifies the value that represents whether the Spinner component is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.VisibleChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.Size">
            <summary>
            Specifies the size of the Spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.ZIndex">
            <summary>
            Specifies the z-order for the Spinner.
            By default the value is AUTO.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.Type">
            <summary>
            Specifies a theme of the spinner.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.Show">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.Hide">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.ShowAsync">
            <summary>
            Shows the spinner.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.HideAsync">
            <summary>
            Hides the spinner.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.OnPropertyChange(System.Collections.Generic.List{System.String})">
            <summary>
            Method invoked when property has been changed.
            </summary>
            <param name="changedKeys"> Specifies the updated properties.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SpinnerType">
            <summary>
            Specify the theme that the Spinner to be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.None">
            <summary>
            Default value is None
            Automatically, picks the application-level theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Material">
            <summary>
            Choose to render the Material spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Bootstrap4">
            <summary>
            Choose to render the Bootstrap 4 spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Bootstrap5">
            <summary>
            Choose to render the Bootstrap 5 spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Fabric">
            <summary>
            Choose to render the Fabric spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Bootstrap">
            <summary>
            Choose to render the Bootstrap spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.HighContrast">
            <summary>
            Choose to render the High-contrast spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Tailwind">
            <summary>
            Choose to render the Tailwind spinner.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SpinnerEventArgs">
            <summary>
            Provides data for the OnBeforeOpen and OnBeforeClose events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEventArgs.Cancel">
            <summary>
            Set cancel as true to prevent showing or hiding of the spinner.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.Bootstrap">
            <summary>
            Represents the Spinner's Bootstrap class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.Internal.Bootstrap.Show">
            <summary>
            Gets or sets a value indicating whether visible status of the spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.Internal.Bootstrap.TypeUpdate">
            <summary>
            Gets or sets a value indicating whether type of the spinner.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Bootstrap.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Bootstrap.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.Bootstrap4">
            <summary>
            Represents the Spinner's Bootstrap 4 class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Bootstrap4.ComponentDispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Bootstrap4.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.FabricHighContrast">
            <summary>
            Represents the Spinner's Fabric and High-Contrast class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.FabricHighContrast.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.Material">
            <summary>
            Represents the Spinner Material class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.Internal.Material.Show">
            <summary>
            Gets or sets a value indicating whether visible status of the spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.Internal.Material.TypeUpdate">
            <summary>
            Gets or sets a value indicating whether type of the spinner.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Material.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Material.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.SpinnerBase">
            <summary>
            Represents the common methods that are used in all the themes.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton">
            <summary>
            ButtonGroupButton  creates a button element that triggers an event on its click action.
            It can contain a text, an image, or both.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the button element. The button types and
            styles can be defined by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the button that is used to include an icon.
            Button can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Disabled">
            <summary>
            Specifies a value that indicates whether the button is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Selected">
            <summary>
            Specifies a value that indicates whether the button is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Name">
            <summary>
            Defines name attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Value">
            <summary>
            Defines value attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content">
            <summary>
            Defines the text content of the button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IsToggle">
            <summary>
            Makes the button as toggleable, when set to true. When you click it, the state changes from normal to active and viceversa.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IsPrimary">
            <summary>
            Allows the appearance of the button to be enhanced and visually appealing when set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconPosition">
            <summary>
            Positions the icon based on the text content in the button and its default value is Left.
            The possible values are:
            - Left: The icon will be positioned to the left of the text content.
            - Right: The icon will be positioned to the right of the text content.
            - Top: The icon will be positioned to the top of the text content.
            - Bottom: The icon will be positioned to the bottom of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as id, native events etc., to the ButtonGroup element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.SelectedChanged">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SfButtonGroup">
            <summary>
            A ButtonGroup is a container that groups a series of buttons on a single line. It has an optional radio button (single selection) and checkbox (multiple selection) behavior.
            It may contain DropDownButton or SplitButton component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent">
            <exclude/>
            <summary>
            Sets content for buttongroup element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the buttongroup container element. The ButtonGroup types and
            size customizations can be achieved by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as id, title etc., to the ButtonGroup container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.Mode">
            <summary>
            Specifies the selection modes. The possible values are,
             `Default`: Default selection in the ButtonGroup.
             `Single`: Allows you to select a single button in the ButtonGroup.
             `Multiple`: Allows you to select more than one button in the ButtonGroup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SelectionMode">
            <summary>
            Defines the selection mode of ButtonGroup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SelectionMode.Default">
            <summary>
            Default selection in the ButtonGroup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SelectionMode.Single">
            <summary>
            Allows you to select a single button in the ButtonGroup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SelectionMode.Multiple">
            <summary>
            Allows you to select more than one button in the ButtonGroup.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition">
            <summary>
            Defines the icon position of Split Button and DropDown Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition.Left">
            <summary>
            To position icon left to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition.Top">
            <summary>
            To position icon above the content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.AnimationEffect">
            <summary>
            Defines the animation effect of progress button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.SlideLeft">
            <summary>
            To set the slide left effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.SlideRight">
            <summary>
            To set the slide right effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.SlideUp">
            <summary>
            To set the slide up effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.SlideDown">
            <summary>
            To set the slide down effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.ZoomIn">
            <summary>
            To set the zoom in effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.ZoomOut">
            <summary>
            To set the zoom out effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SpinPosition">
            <summary>
            Defines the spin position of progress button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Left">
            <summary>
            To position spinner left to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Right">
            <summary>
            To position spinner right to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Top">
            <summary>
            To position spinner top to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Bottom">
            <summary>
            To position spinner bottom to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Center">
            <summary>
            To position spinner at center.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs">
            <summary>
            Interface for before open / close event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Cancel">
            <summary>
            Used to prevent dropdown menu open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Element">
            <summary>
            Specifies the button or dropdown element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Event">
            <summary>
            Specifies the Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Items">
            <summary>
            Specifies the dropdown items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.MenuEventArgs">
            <summary>
            Interface for before item render / select event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.MenuEventArgs.Element">
            <summary>
            Specifies the selected list element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.MenuEventArgs.Item">
            <summary>
            Specifies the selected dropdown item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.MenuEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.MenuEventArgs.Event">
            <summary>
            Specifies the selected dropdown item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs">
            <summary>
            Interface for open/close event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs.Element">
            <summary>
            Specifies the dropdown element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs.Items">
            <summary>
            Specifies the button or dropdown items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ProgressEventArgs">
            <summary>
            Interface for progress event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressEventArgs.CurrentDuration">
            <summary>
            Indicates the current duration of the progress.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressEventArgs.Percent">
            <summary>
            Indicates the current state of progress in percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressEventArgs.Step">
            <summary>
            Specifies the interval.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.OnClose">
            <summary>
            Triggers before closing the DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.OnItemRender">
            <summary>
            Triggers while rendering each Popup item of DropDownButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.OnOpen">
            <summary>
            Triggers before opening the DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.Closed">
            <summary>
            Triggers while closing the DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.Opened">
            <summary>
            Triggers while opening the DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.ItemSelected">
            <summary>
            Triggers while selecting action item in DropDownButton popup.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SfDropDownButton">
            <summary>
            DropDownButton component is used to toggle contextual overlays for displaying list of action items.
            It can contain both text and images.
            </summary>
            <summary>
            DropDownButton component is used to toggle contextual overlays for displaying list of action items.
            It can contain both text and images.
            </summary>
            <summary>
            DropDownButton component is used to toggle contextual overlays for displaying list of action items.
            It can contain both text and images.
            </summary>
            <summary>
            DropDownButton component is used to toggle contextual overlays for displaying list of action items.
            It can contain both text and images.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent">
            <summary>
            Sets content for button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content">
            <summary>
            Defines the text content of the button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the DropDownButton element. The
            DropDownButton size and styles can be customized by using this.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the DropDownButton that is used to
            include an icon. DropDownButton can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconPosition">
            <summary>
            Positions the icon before/top of the text content in the DropDownButton. The possible values are:
            - Left: The icon will be positioned to the left of the text content.
            - Top: The icon will be positioned to the top of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Items">
            <summary>
            Specifies action items with its properties which will be rendered in DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Disabled">
            <summary>
            Specifies a value that indicates whether the DropDownButton is `Disabled` or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent">
            <summary>
            To specify the custom popup content instead of Items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the dropdown button element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfDropDownButton.AddItems(System.Collections.Generic.List{Syncfusion.Blazor.SplitButtons.DropDownMenuItem},System.String,System.Boolean)">
            <summary>
            Adds a new item to the menu. By default, new item appends to the list as the last item,
            but you can insert based on the text parameter.
            </summary>
            <param name="items">Specifies the list of items to be added.</param>
            <param name="text">Specifies the existing item text. If specified, adds the items of the collection before this item.
            If not specified, adds the items of the collection to the end of the list.</param>
            <param name="isUniqueId">Set true if text parameter is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfDropDownButton.RemoveItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Removes the items from the menu.
            </summary>
            <param name="items">Specifies the list of items to be removed.</param>
            <param name="isUniqueId">Set true if text parameter is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Toggle">
            <summary>
            To open/close DropDownButton popup based on current state of the DropDownButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfDropDownButton.ButtonClickAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SfProgressButton">
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.OnClick">
            <summary>
            Triggers when button element is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent">
            <summary>
            Sets content for progress button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content">
            <summary>
            Defines the text content of the progress button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.CssClass">
            <summary>
            Specifies the root CSS class of the progress button that allows customization of component’s appearance.
            The progress button types, styles, and size can be achieved by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Disabled">
            <summary>
            Enables or disables the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Duration">
            <summary>
            Specifies the duration of progression in the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.EnableProgress">
            <summary>
            Enables or disables the background filler UI in the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.EnableRtl">
            <summary>
            Enables or disables the Rtl support.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the progress button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the progress button that is used to include an icon.
            Progress button can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconPosition">
            <summary>
            Positions an icon in the progress button. The possible values are:
             Left: The icon will be positioned to the left of the text content.
             Right: The icon will be positioned to the right of the text content.
             Top: The icon will be positioned at the top of the text content.
             Bottom: The icon will be positioned at the bottom of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IsPrimary">
            <summary>
            Allows the appearance of the progress button to be enhanced and visually appealing when set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IsToggle">
            <summary>
            Makes the progress button toggle, when set to true. When you click it, the state changes from normal to active.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.Start(System.Double)">
            <summary>
            Starts the button progress at the specified percent.
            </summary>
            <param name="percent">Specifies the Progress percent.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.StartAsync(System.Double)">
            <summary>
            Starts the button progress at the specified percent.
            </summary>
            <param name="percent">Specifies the Progress percent.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.Stop">
            <summary>
            Stops the button progress.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.StopAsync">
            <summary>
            Stops the button progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.FocusIn">
            <summary>
            Sets the focus to ProgressButton.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.FocusAsync">
            <summary>
            Sets the focus to ProgressButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.ProgressComplete">
            <summary>
            Complete the button progress.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.EndProgressAsync">
            <summary>
            Complete the button progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.Click">
            <summary>
            Click the button element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.ClickAsync">
            <summary>
            Click the button element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings">
            <summary>
            Specifies the animation settings for the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings.Duration">
            <summary>
            Specifies the duration taken to animate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings.Easing">
            <summary>
            Specifies the animation timing function.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings.Effect">
            <summary>
            Specifies the effect of animation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents">
            <summary>
            Used to configure the progress button events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.OnBegin">
            <summary>
            Triggers when the progress starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.OnEnd">
            <summary>
            Triggers when the progress is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.OnFailure">
            <summary>
            Triggers when the progress is incomplete.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.Progressing">
            <summary>
            Triggers in specified intervals.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings">
            <summary>
            Specifies the spin settings for the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Position">
            <summary>
            Specifies the position of a spinner in the progress button. The possible values are:
             Left: The spinner will be positioned to the left of the text content.
             Right: The spinner will be positioned to the right of the text content.
             Top: The spinner will be positioned at the top of the text content.
             Bottom: The spinner will be positioned at the bottom of the text content.
             Center: The spinner will be positioned at the center of the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate">
            <summary>
            Specifies the template content to be displayed in a spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Width">
            <summary>
            Sets the width of a spinner.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ClickEventArgs">
            <summary>
            Interface for Split Button click event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ClickEventArgs.Element">
            <summary>
            Specifies the primary split button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ClickEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SfSplitButton">
            <summary>
            SplitButton component has primary and secondary button. Primary button is used to select 
            default action and secondary button is used to toggle contextual overlays for displaying list of 
            action items. It can contain both text and images.
            </summary>
            <summary>
            SplitButton component has primary and secondary button. Primary button is used to select 
            default action and secondary button is used to toggle contextual overlays for displaying list of 
            action items. It can contain both text and images.
            </summary>
            <summary>
            SplitButton component has primary and secondary button. Primary button is used to select 
            default action and secondary button is used to toggle contextual overlays for displaying list of 
            action items. It can contain both text and images.
            </summary>
            <summary>
            SplitButton component has primary and secondary button. Primary button is used to select 
            default action and secondary button is used to toggle contextual overlays for displaying list of 
            action items. It can contain both text and images.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent">
            <summary>
            Sets content for primary button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content">
            <summary>
            Defines the text `Content` of the Button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the SplitButton element. The SplitButton
            size and styles can be customized by using this.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Disabled">
            <summary>
            Specifies a value that indicates whether the SplitButton is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the SplitButton that is used to include an
            icon. SplitButton can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconPosition">
            <summary>
            Positions the icon before/top of the text content in the SplitButton. The possible values are
            - Left: The icon will be positioned to the left of the text content.
            - Top: The icon will b  positioned to the top of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Items">
            <summary>
            Specifies action items with its properties which will be rendered as SplitButton secondary button popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent">
            <summary>
            Allows to specify the custom popup content instead of Items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the primary button element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfSplitButton.AddItems(System.Collections.Generic.List{Syncfusion.Blazor.SplitButtons.DropDownMenuItem},System.String,System.Boolean)">
            <summary>
            Adds a new item to the menu. By default, new item appends to the list as the last item,
            but you can insert based on the text parameter.
            </summary>
            <param name="items">Specifies the list of items to be added.</param>
            <param name="text">Specifies the existing item text. If specified, adds the items of the collection before this item.
            If not specified, adds the items of the collection to the end of the list.</param>
            <param name="isUniqueId">Set true if text parameter is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfSplitButton.RemoveItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Removes the items from the menu.
            </summary>
            <param name="items">Specifies the list of items to be removed.</param>
            <param name="isUniqueId">Set true if text parameter is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfSplitButton.Toggle">
            <summary>
            To open/close Split Button popup based on current state of the Split Button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.OnClose">
            <summary>
            Triggers before closing the SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.OnItemRender">
            <summary>
            Triggers while rendering each Popup item of SplitButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.OnOpen">
            <summary>
            Triggers before opening the SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.Clicked">
            <summary>
            Triggers when the primary button of SplitButton has been clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.Closed">
            <summary>
            Triggers while closing the SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.Opened">
            <summary>
            Triggers while opening the SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.ItemSelected">
            <summary>
            Triggers while selecting action item of SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent">
            <summary>
            Set custom content for items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the item that is used to include an icon.
            Action item can include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Separator">
            <summary>
            Specifies separator between the items. Separator are horizontal lines used to group action items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Disabled">
            <summary>
            Used to enable or disable the action items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Text">
            <summary>
            Specifies text for item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Url">
            <summary>
            Specifies url for item that creates the anchor link to navigate to the url provided.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Id">
            <summary>
            Specifies unique id for item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.HtmlAttributes">
            <summary>
            You can add the additional HTML attributes such as style, title etc., to the item
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent">
            <exclude />
        </member>
    </members>
</doc>
